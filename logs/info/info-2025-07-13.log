2025-07-13 00:26:33.284 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 00:26:33.334 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 28820 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 00:26:33.334 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 00:26:33.382 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 00:26:33.383 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 00:26:34.310 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:26:34.310 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 00:26:34.503 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 180 ms. Found 10 JPA repository interfaces.
2025-07-13 00:26:34.942 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:26:34.943 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 00:26:34.975 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:26:34.976 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:26:34.976 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:26:34.977 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:26:34.977 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:26:34.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:26:34.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:26:34.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:26:34.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:26:34.980 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:26:34.980 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 Redis repository interfaces.
2025-07-13 00:26:36.799 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 00:26:36.804 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 00:26:36.828 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 00:26:36.847 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 00:26:36.851 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 00:26:36.852 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 00:26:36.956 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 00:26:36.958 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3574 ms
2025-07-13 00:26:37.636 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 00:26:38.022 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3899fec9
2025-07-13 00:26:38.026 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 00:26:38.208 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 00:26:38.447 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 00:26:38.550 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 00:26:38.594 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 00:26:38.623 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 00:27:46.346 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 00:27:46.425 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 22296 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 00:27:46.426 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 00:27:46.502 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 00:27:46.503 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 00:27:47.891 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:27:47.892 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 00:27:48.143 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 236 ms. Found 10 JPA repository interfaces.
2025-07-13 00:27:48.865 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:27:48.867 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 00:27:48.916 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:27:48.917 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:27:48.918 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:27:48.919 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:27:48.920 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:27:48.922 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:27:48.922 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:27:48.922 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:27:48.923 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:27:48.924 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:27:48.924 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 0 Redis repository interfaces.
2025-07-13 00:27:50.267 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 00:27:50.273 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 00:27:50.280 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 00:27:50.295 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 00:27:50.305 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 00:27:50.306 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 00:27:50.438 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 00:27:50.440 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3934 ms
2025-07-13 00:27:50.962 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 00:27:51.208 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@63686b79
2025-07-13 00:27:51.211 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 00:27:51.304 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 00:27:51.447 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 00:27:51.498 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 00:27:51.559 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 00:27:51.582 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 00:29:45.296 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 00:29:45.377 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 34736 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 00:29:45.379 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 00:29:45.461 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 00:29:45.462 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 00:29:47.028 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:29:47.028 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 00:29:47.224 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 188 ms. Found 10 JPA repository interfaces.
2025-07-13 00:29:47.622 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:29:47.624 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 00:29:47.653 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:29:47.654 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:29:47.655 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:29:47.656 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:29:47.656 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:29:47.657 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:29:47.659 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:29:47.660 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:29:47.660 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:29:47.661 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:29:47.661 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 30 ms. Found 0 Redis repository interfaces.
2025-07-13 00:29:48.708 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 00:29:48.712 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 00:29:48.717 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 00:29:48.728 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 00:29:48.730 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 00:29:48.731 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 00:29:48.810 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 00:29:48.811 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3347 ms
2025-07-13 00:29:49.151 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 00:29:49.254 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 00:29:49.306 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 00:29:49.700 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 00:29:49.754 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 00:29:49.955 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@50e79504
2025-07-13 00:29:49.957 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 00:29:51.040 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 00:29:51.967 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 00:29:53.327 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 00:29:54.109 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 00:29:54.404 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 00:29:54.405 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 00:29:54.895 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 00:29:55.239 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 00:29:55.308 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 00:29:55.309 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 00:29:55.408 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 00:29:55.408 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 00:29:55.519 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 00:29:55.543 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 00:29:55.565 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 00:29:55.587 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 00:29:55.845 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 00:29:55.873 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 00:29:56.424 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 00:29:56.760 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 00:29:57.178 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 00:29:57.966 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 00:29:58.028 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 00:29:58.051 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 00:29:58.053 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 00:29:58.054 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2ac41f0]]
2025-07-13 00:29:58.054 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 00:29:58.071 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 13.712 seconds (process running for 14.334)
2025-07-13 00:29:58.127 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 00:29:58.161 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 00:29:58.177 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 00:29:58.193 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 00:29:58.209 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 00:29:58.228 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 00:29:58.245 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 00:29:58.282 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 00:30:31.628 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 00:30:31.629 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 00:30:31.634 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 5 ms
2025-07-13 00:30:32.445 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 00:30:32.448 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 00:30:32.580 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 00:30:32.584 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 00:30:32.584 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 00:30:32.585 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 00:30:32.586 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 00:30:32.586 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 00:30:32.586 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 00:30:32.640 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 00:30:32.644 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 00:30:32.671 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 00:30:32.674 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 00:30:32.677 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 00:30:32.677 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 00:30:32.683 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 00:30:32.683 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 00:30:33.138 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 00:30:33.139 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 00:30:33.146 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 00:30:33.164 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 00:30:33.168 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 00:30:33.168 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 00:30:33.169 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 00:30:33.169 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 00:30:33.171 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 00:30:33.172 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 00:30:33.178 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 00:30:33.180 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 00:30:33.180 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 00:30:33.180 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 00:30:33.181 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 00:30:33.192 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 00:30:33.192 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 00:30:33.192 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 00:30:33.312 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 00:30:33.357 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 00:30:36.612 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 00:30:36.614 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 00:30:36.645 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 00:30:36.647 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 00:30:36.648 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 00:30:36.648 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 00:30:36.648 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 00:30:36.649 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 00:30:36.650 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 00:30:36.672 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 00:30:36.676 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 00:30:36.685 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 00:30:36.689 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 00:30:36.690 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 00:30:36.691 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 00:30:36.696 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 00:30:36.697 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 00:30:37.191 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 00:30:37.194 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 00:30:37.194 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 00:30:37.201 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 00:30:37.201 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 00:30:37.201 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 00:30:37.202 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 00:30:37.202 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 00:30:37.203 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 00:30:37.218 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 00:30:37.241 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 00:30:37.242 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 00:30:37.242 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 00:30:37.243 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 00:30:37.243 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 00:30:37.251 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 00:30:37.252 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 00:30:37.252 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 00:30:37.636 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 00:30:37.680 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 00:30:58.005 [MessageBroker-5] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 00:32:38.849 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-07-13 00:32:38.852 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 00:32:38.852 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2ac41f0]]
2025-07-13 00:32:38.852 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 00:32:38.853 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 00:32:39.196 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 00:32:39.199 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 00:32:39.208 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 00:32:39.420 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 34736 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 00:32:39.421 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 00:32:39.756 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:32:39.757 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 00:32:39.804 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 46 ms. Found 10 JPA repository interfaces.
2025-07-13 00:32:39.911 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:32:39.911 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 00:32:39.924 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:39.925 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:39.925 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:39.926 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:39.926 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:39.926 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:39.926 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:39.926 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:39.927 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:39.927 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:39.927 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Redis repository interfaces.
2025-07-13 00:32:40.107 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 00:32:40.108 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 00:32:40.109 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 00:32:40.110 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 00:32:40.110 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 00:32:40.110 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 00:32:40.146 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 00:32:40.146 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 723 ms
2025-07-13 00:32:40.340 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-07-13 00:32:40.358 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3bfe94ac
2025-07-13 00:32:40.359 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-07-13 00:32:40.412 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 00:32:40.502 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 00:32:40.563 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-07-13 00:32:40.616 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-07-13 00:32:40.627 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 00:32:46.304 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 34736 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 00:32:46.304 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 00:32:46.566 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:32:46.567 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 00:32:46.617 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 49 ms. Found 10 JPA repository interfaces.
2025-07-13 00:32:46.705 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:32:46.706 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 00:32:46.718 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:46.718 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:46.719 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:46.719 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:46.719 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:46.720 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:46.720 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:46.720 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:46.720 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:46.721 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:32:46.721 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-07-13 00:32:46.868 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 00:32:46.869 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 00:32:46.870 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 00:32:46.870 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 00:32:46.871 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 00:32:46.871 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 00:32:46.903 [restartedMain] INFO  o.a.c.c.C.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 00:32:46.904 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 599 ms
2025-07-13 00:32:46.995 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2025-07-13 00:32:47.009 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7b121ee9
2025-07-13 00:32:47.009 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2025-07-13 00:32:47.026 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 00:32:47.060 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 00:32:47.114 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown initiated...
2025-07-13 00:32:47.115 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown completed.
2025-07-13 00:32:47.124 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 00:35:29.420 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 00:35:29.456 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 12076 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 00:35:29.457 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 00:35:29.491 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 00:35:29.491 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 00:35:30.122 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:35:30.122 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 00:35:30.261 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 132 ms. Found 10 JPA repository interfaces.
2025-07-13 00:35:30.590 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:35:30.591 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 00:35:30.613 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:35:30.613 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:35:30.613 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:35:30.614 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:35:30.614 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:35:30.615 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:35:30.615 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:35:30.616 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:35:30.616 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:35:30.616 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:35:30.616 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 0 Redis repository interfaces.
2025-07-13 00:35:31.556 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 00:35:31.562 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 00:35:31.570 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 00:35:31.591 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 00:35:31.598 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 00:35:31.599 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 00:35:31.718 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 00:35:31.720 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2226 ms
2025-07-13 00:35:32.284 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 00:35:32.450 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5a965e96
2025-07-13 00:35:32.451 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 00:35:32.519 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 00:35:32.619 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 00:35:32.658 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 00:35:32.704 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 00:35:32.718 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 00:36:51.221 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 00:36:51.284 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10328 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 00:36:51.285 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 00:36:51.350 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 00:36:51.350 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 00:36:52.279 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:36:52.279 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 00:36:52.410 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 126 ms. Found 10 JPA repository interfaces.
2025-07-13 00:36:52.706 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:36:52.707 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 00:36:52.730 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:36:52.730 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:36:52.732 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:36:52.733 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:36:52.733 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:36:52.734 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:36:52.735 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:36:52.735 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:36:52.735 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:36:52.735 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:36:52.736 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-07-13 00:36:53.430 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 00:36:53.434 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 00:36:53.437 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 00:36:53.445 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 00:36:53.446 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 00:36:53.446 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 00:36:53.497 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 00:36:53.498 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2146 ms
2025-07-13 00:36:53.731 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 00:36:53.840 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@63686b79
2025-07-13 00:36:53.841 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 00:36:53.931 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 00:36:54.004 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 00:36:54.025 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 00:36:54.043 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 00:36:54.053 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 00:39:26.909 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 00:39:26.985 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 17724 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 00:39:26.987 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 00:39:27.064 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 00:39:27.064 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 00:39:28.371 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:39:28.371 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 00:39:28.516 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 138 ms. Found 10 JPA repository interfaces.
2025-07-13 00:39:28.856 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:39:28.858 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 00:39:28.883 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:39:28.884 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:39:28.884 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:39:28.885 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:39:28.885 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:39:28.886 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:39:28.886 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:39:28.887 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:39:28.887 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:39:28.887 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:39:28.888 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2025-07-13 00:39:29.600 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 00:39:29.601 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 00:39:29.605 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 00:39:29.613 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 00:39:29.614 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 00:39:29.614 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 00:39:29.663 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 00:39:29.664 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2597 ms
2025-07-13 00:39:29.892 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 00:39:30.009 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@63686b79
2025-07-13 00:39:30.010 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 00:39:30.090 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 00:39:30.180 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 00:39:30.210 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 00:39:30.254 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 00:39:30.268 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 00:41:09.778 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 00:41:09.820 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 31628 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 00:41:09.820 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 00:41:09.867 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 00:41:09.868 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 00:41:10.701 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:41:10.701 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 00:41:10.906 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 194 ms. Found 10 JPA repository interfaces.
2025-07-13 00:41:11.507 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:41:11.510 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 00:41:11.554 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:41:11.555 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:41:11.555 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:41:11.556 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:41:11.557 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:41:11.558 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:41:11.559 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:41:11.560 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:41:11.561 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:41:11.562 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:41:11.562 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 41 ms. Found 0 Redis repository interfaces.
2025-07-13 00:41:12.678 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 00:41:12.682 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 00:41:12.686 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 00:41:12.697 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 00:41:12.699 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 00:41:12.699 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 00:41:12.764 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 00:41:12.767 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2898 ms
2025-07-13 00:41:13.081 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 00:41:13.194 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2c02225b
2025-07-13 00:41:13.195 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 00:41:13.233 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 00:41:13.295 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 00:41:13.329 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 00:41:13.373 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 00:41:13.383 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 00:48:21.656 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 00:48:21.691 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 24092 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 00:48:21.692 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 00:48:21.741 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 00:48:21.742 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 00:48:22.754 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:48:22.756 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 00:48:22.977 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 206 ms. Found 10 JPA repository interfaces.
2025-07-13 00:48:23.464 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 00:48:23.465 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 00:48:23.492 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:48:23.493 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:48:23.493 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:48:23.494 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:48:23.495 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:48:23.497 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:48:23.497 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:48:23.499 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:48:23.499 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:48:23.500 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 00:48:23.500 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 Redis repository interfaces.
2025-07-13 00:48:24.442 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 00:48:24.446 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 00:48:24.451 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 00:48:24.472 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 00:48:24.475 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 00:48:24.475 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 00:48:24.557 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 00:48:24.558 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2815 ms
2025-07-13 00:48:24.887 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 00:48:25.031 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2c02225b
2025-07-13 00:48:25.032 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 00:48:25.079 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 00:48:25.184 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.059s)
2025-07-13 00:48:25.217 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 00:48:25.221 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 00:48:25.333 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 00:48:25.405 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 00:48:25.448 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 00:48:25.715 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 00:48:27.338 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 00:48:27.420 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 00:48:27.468 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 00:48:27.482 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 00:48:27.506 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 01:06:21.136 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 01:06:21.171 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 15376 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:06:21.172 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:06:21.203 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 01:06:21.203 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 01:06:21.810 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:06:21.811 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:06:21.930 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 114 ms. Found 10 JPA repository interfaces.
2025-07-13 01:06:22.218 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:06:22.219 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:06:22.242 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:06:22.242 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:06:22.243 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:06:22.243 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:06:22.244 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:06:22.244 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:06:22.245 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:06:22.245 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:06:22.245 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:06:22.246 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:06:22.247 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
2025-07-13 01:06:22.922 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:06:22.925 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:06:22.930 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:06:22.949 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:06:22.951 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:06:22.952 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:06:23.013 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:06:23.014 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1810 ms
2025-07-13 01:06:23.255 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 01:06:23.400 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5a965e96
2025-07-13 01:06:23.402 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 01:06:23.469 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:06:23.549 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.048s)
2025-07-13 01:06:23.571 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:06:23.575 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:06:23.664 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:06:23.700 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 01:06:23.727 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:06:23.920 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:06:24.859 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:06:24.905 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:06:25.542 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 01:06:25.922 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:06:26.079 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:06:26.080 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:06:26.251 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:06:26.381 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:06:26.413 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:06:26.413 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:06:26.448 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:06:26.448 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:06:26.484 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:06:26.495 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:06:26.504 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:06:26.517 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:06:26.609 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:06:26.615 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:06:26.797 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:06:26.908 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:06:27.105 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:06:27.549 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:06:27.590 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:06:27.610 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:06:27.612 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:06:27.612 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@70b390cb]]
2025-07-13 01:06:27.612 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:06:27.627 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 6.819 seconds (process running for 7.132)
2025-07-13 01:06:27.763 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:06:27.781 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:06:27.795 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:06:27.816 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:06:27.832 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:06:27.847 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:06:27.864 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:06:27.898 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:06:52.081 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 01:06:52.081 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 01:06:52.083 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 01:07:07.241 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:07:07.242 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:07:07.281 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:07:07.283 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:07:07.283 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:07:07.284 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:07:07.284 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:07:07.284 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:07:07.284 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:07:07.314 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:07:07.317 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:07:07.329 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:07:07.332 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:07:07.333 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:07:07.334 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:07:07.336 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:07:07.338 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:07:07.812 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:07:07.813 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:07:07.813 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:07:07.823 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:07:07.823 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:07:07.823 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:07:07.823 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:07:07.824 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:07:07.825 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:07:07.826 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:07:07.835 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:07:07.835 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:07:07.835 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:07:07.836 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:07:07.836 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:07:07.844 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:07:07.845 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:07:07.845 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:07:08.191 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:07:08.231 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:07:27.584 [MessageBroker-4] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 01:07:33.707 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:07:33.709 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:07:33.709 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:07:33.711 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:07:33.712 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:07:33.712 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:07:33.712 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:07:33.712 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:07:33.712 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:07:33.715 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:07:33.717 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:07:33.717 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:07:33.717 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:07:33.720 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:07:33.720 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:07:37.320 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:07:37.334 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:07:37.335 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:07:37.335 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:07:37.335 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:07:37.335 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:07:37.335 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:07:37.364 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:07:37.368 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:07:37.377 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:07:37.380 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:07:37.380 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:07:37.381 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:07:37.384 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:07:37.385 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:07:56.641 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:07:56.643 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:07:56.643 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:07:56.645 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:07:56.645 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:07:56.646 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:07:56.646 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:07:56.646 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:07:56.647 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:07:56.649 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:07:56.651 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:07:56.651 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:07:56.651 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:07:56.655 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:07:56.656 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:08:08.283 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:08:08.288 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:08:08.288 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:08:08.293 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:08:08.296 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:08:08.297 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:08:08.298 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:08:08.350 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:08:08.355 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:08:08.361 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:08:08.366 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:08:08.366 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:08:08.366 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:08:08.374 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:08:08.374 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:08:38.263 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:08:38.265 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:08:38.265 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:08:38.265 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:08:38.265 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:08:38.265 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:08:38.266 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:08:38.289 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:08:38.292 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:08:38.298 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:08:38.300 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:08:38.301 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:08:38.301 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:08:38.304 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:08:38.304 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:09:08.270 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:09:08.276 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:09:08.276 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:09:08.276 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:09:08.276 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:09:08.276 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:09:08.276 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:09:08.301 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:09:08.304 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:09:08.309 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:09:08.311 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:09:08.311 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:09:08.311 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:09:08.315 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:09:08.315 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:09:38.268 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:09:38.272 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:09:38.272 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:09:38.272 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:09:38.273 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:09:38.273 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:09:38.273 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:09:38.298 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:09:38.301 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:09:38.308 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:09:38.310 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:09:38.310 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:09:38.311 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:09:38.314 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:09:38.315 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:09:38.724 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 256 class path changes (0 additions, 256 deletions, 0 modifications)
2025-07-13 01:09:38.730 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 01:09:38.730 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@70b390cb]]
2025-07-13 01:09:38.730 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 01:09:38.732 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 01:09:39.029 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:09:39.032 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 01:09:39.039 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 01:09:39.156 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 15376 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:09:39.156 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:09:39.541 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:09:39.542 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:09:39.552 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
2025-07-13 01:09:39.555 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:09:39.555 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:09:39.565 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-07-13 01:09:39.743 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:09:39.744 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:09:39.745 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:09:39.746 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:09:39.746 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:09:39.746 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:09:39.789 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:09:39.789 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 630 ms
2025-07-13 01:09:39.912 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-07-13 01:09:39.937 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@cc34bb6
2025-07-13 01:09:39.938 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-07-13 01:09:39.983 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:09:40.065 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.045s)
2025-07-13 01:09:40.109 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:09:40.112 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:09:40.173 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:09:40.182 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:09:40.207 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:09:40.252 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:09:40.253 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:09:40.387 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:09:40.931 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:09:40.979 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:09:41.072 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:09:41.094 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:09:41.109 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:09:41.129 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 2.005 seconds (process running for 200.635)
2025-07-13 01:09:41.138 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation delta:


==========================
CONDITION EVALUATION DELTA
==========================


Positive matches:
-----------------

   JpaRepositoriesAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.data.jpa.repository.JpaRepository' (OnClassCondition)
      - @ConditionalOnProperty (spring.data.jpa.repositories.enabled=true) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: javax.sql.DataSource; SearchStrategy: all) found bean 'dataSource'; @ConditionalOnMissingBean (types: org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean,org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ManagementWebSecurityAutoConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)
      - AllNestedConditions 2 matched 0 did not; NestedCondition on DefaultWebSecurityCondition.Beans @ConditionalOnMissingBean (types: org.springframework.security.web.SecurityFilterChain; SearchStrategy: all) did not find any beans; NestedCondition on DefaultWebSecurityCondition.Classes @ConditionalOnClass found required classes 'org.springframework.security.web.SecurityFilterChain', 'org.springframework.security.config.annotation.web.builders.HttpSecurity' (DefaultWebSecurityCondition)

   RedisAutoConfiguration#redisTemplate matched:
      - @ConditionalOnSingleCandidate (types: org.springframework.data.redis.connection.RedisConnectionFactory; SearchStrategy: all) found a single bean 'redisConnectionFactory'; @ConditionalOnMissingBean (names: redisTemplate; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringBootWebSecurityConfiguration.WebSecurityEnablerConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity' (OnClassCondition)
      - @ConditionalOnMissingBean (names: springSecurityFilterChain; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskExecutorConfigurations.TaskExecutorConfiguration matched:
      - @ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskExecutorConfigurations.TaskExecutorConfiguration#applicationTaskExecutor matched:
      - @ConditionalOnThreading found PLATFORM (OnThreadingCondition)

   TaskSchedulingConfigurations.TaskSchedulerConfiguration matched:
      - @ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) found bean 'org.springframework.context.annotation.internalScheduledAnnotationProcessor'; @ConditionalOnMissingBean (types: org.springframework.scheduling.TaskScheduler,java.util.concurrent.ScheduledExecutorService; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskSchedulingConfigurations.TaskSchedulerConfiguration#taskScheduler matched:
      - @ConditionalOnThreading found PLATFORM (OnThreadingCondition)

   TransactionAutoConfiguration.EnableTransactionManagementConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.transaction.TransactionManager; SearchStrategy: all) found bean 'transactionManager'; @ConditionalOnMissingBean (types: org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration matched:
      - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)


Negative matches:
-----------------

   CacheMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans of type org.springframework.cache.CacheManager (OnBeanCondition)

   JpaRepositoriesAutoConfiguration#entityManagerFactoryBootstrapExecutorCustomizer:
      Did not match:
         - AnyNestedCondition 0 matched 2 did not; NestedCondition on JpaRepositoriesAutoConfiguration.BootstrapExecutorCondition.LazyBootstrapMode @ConditionalOnProperty (spring.data.jpa.repositories.bootstrap-mode=lazy) did not find property 'bootstrap-mode'; NestedCondition on JpaRepositoriesAutoConfiguration.BootstrapExecutorCondition.DeferredBootstrapMode @ConditionalOnProperty (spring.data.jpa.repositories.bootstrap-mode=deferred) did not find property 'bootstrap-mode' (JpaRepositoriesAutoConfiguration.BootstrapExecutorCondition)

   TaskExecutorConfigurations.TaskExecutorConfiguration#applicationTaskExecutorVirtualThreads:
      Did not match:
         - @ConditionalOnThreading did not find VIRTUAL (OnThreadingCondition)

   TaskSchedulingConfigurations.TaskSchedulerConfiguration#taskSchedulerVirtualThreads:
      Did not match:
         - @ConditionalOnThreading did not find VIRTUAL (OnThreadingCondition)

   WebSocketMessagingAutoConfiguration.WebSocketMessageConverterConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration,com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans of type org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required classes 'com.fasterxml.jackson.databind.ObjectMapper', 'org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration' (OnClassCondition)


Exclusions:
-----------

    None


Unconditional classes:
----------------------

    None



2025-07-13 01:09:47.960 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 256 class path changes (256 additions, 0 deletions, 0 modifications)
2025-07-13 01:09:47.963 [Thread-7] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 01:09:48.261 [Thread-7] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:09:48.262 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-07-13 01:09:48.267 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-07-13 01:09:48.375 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 15376 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:09:48.375 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:09:48.651 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:09:48.651 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:09:48.701 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 50 ms. Found 10 JPA repository interfaces.
2025-07-13 01:09:48.857 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:09:48.857 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:09:48.874 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:48.874 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:48.875 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:48.875 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:48.875 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:48.875 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:48.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:48.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:48.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:48.879 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:48.879 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-07-13 01:09:49.176 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:09:49.177 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:09:49.178 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:09:49.179 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:09:49.180 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:09:49.180 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:09:49.238 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:09:49.239 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 862 ms
2025-07-13 01:09:49.396 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2025-07-13 01:09:49.413 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3afd85e8
2025-07-13 01:09:49.414 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2025-07-13 01:09:49.453 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:09:49.501 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.026s)
2025-07-13 01:09:49.534 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:09:49.537 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:09:49.617 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:09:49.622 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:09:49.631 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:09:49.844 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:09:49.878 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:09:50.408 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:09:50.423 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:09:50.423 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:09:50.519 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:09:50.635 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 01:09:50.643 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:09:50.698 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:09:50.698 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:09:50.712 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 1872 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:09:50.714 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:09:50.747 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:09:50.748 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:09:50.765 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:09:50.781 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:09:50.788 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 01:09:50.789 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 01:09:50.795 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:09:50.814 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:09:50.949 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:09:50.960 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:09:51.122 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:09:51.227 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:09:51.443 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:09:51.828 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:09:51.847 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:09:51.850 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:09:51.852 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:09:51.852 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@249421d1]]
2025-07-13 01:09:51.853 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:09:51.865 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 3.514 seconds (process running for 211.37)
2025-07-13 01:09:51.866 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:09:51.886 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:09:51.900 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:09:51.906 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:09:51.906 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:09:51.914 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:09:51.930 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:09:51.945 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:09:51.960 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:09:51.995 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:09:51.997 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation delta:


==========================
CONDITION EVALUATION DELTA
==========================


Positive matches:
-----------------

   CacheMetricsAutoConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) found bean 'cacheManager' (OnBeanCondition)

   CacheMetricsRegistrarConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProvider,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans 'simpleMeterRegistry', 'redisCacheMeterBinderProvider' (OnBeanCondition)

   DataConsistencyMonitorTask matched:
      - @ConditionalOnProperty (app.data-consistency.monitor.enabled=true) matched (OnPropertyCondition)

   FileCleanupTask matched:
      - @ConditionalOnProperty (app.file.cleanup.enabled=true) matched (OnPropertyCondition)

   RealTimeDataConsistencyListener matched:
      - @ConditionalOnProperty (app.data-consistency.real-time.enabled=true) matched (OnPropertyCondition)

   TemporaryFileCleanupTask matched:
      - @ConditionalOnProperty (app.file.temporary-cleanup.enabled=true) matched (OnPropertyCondition)

   WebSocketMessagingAutoConfiguration.WebSocketMessageConverterConfiguration matched:
      - @ConditionalOnClass found required classes 'com.fasterxml.jackson.databind.ObjectMapper', 'org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration,com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found beans 'jacksonObjectMapper', 'org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration' (OnBeanCondition)


Negative matches:
-----------------

   JpaRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean,org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension; SearchStrategy: all) found beans of type 'org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean' &contactRepository, &userRepository, &contactTagAssignmentRepository, &contactTagRepository, &userDeviceRepository, &loginDeviceRepository, &userSettingsRepository, &fileUploadRepository, &verificationCodeRepository, &contactRequestRepository and found beans of type 'org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension' org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension#0 (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.data.jpa.repository.JpaRepository' (OnClassCondition)
         - @ConditionalOnProperty (spring.data.jpa.repositories.enabled=true) matched (OnPropertyCondition)

   ManagementWebSecurityAutoConfiguration:
      Did not match:
         - AllNestedConditions 1 matched 1 did not; NestedCondition on DefaultWebSecurityCondition.Beans @ConditionalOnMissingBean (types: org.springframework.security.web.SecurityFilterChain; SearchStrategy: all) found beans of type 'org.springframework.security.web.SecurityFilterChain' filterChain; NestedCondition on DefaultWebSecurityCondition.Classes @ConditionalOnClass found required classes 'org.springframework.security.web.SecurityFilterChain', 'org.springframework.security.config.annotation.web.builders.HttpSecurity' (DefaultWebSecurityCondition)
      Matched:
         - found 'session' scope (OnWebApplicationCondition)

   RedisAutoConfiguration#redisTemplate:
      Did not match:
         - @ConditionalOnMissingBean (names: redisTemplate; SearchStrategy: all) found beans named redisTemplate (OnBeanCondition)

   SpringBootWebSecurityConfiguration.WebSecurityEnablerConfiguration:
      Did not match:
         - @ConditionalOnMissingBean (names: springSecurityFilterChain; SearchStrategy: all) found beans named springSecurityFilterChain (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity' (OnClassCondition)

   TaskExecutorConfigurations.TaskExecutorConfiguration:
      Did not match:
         - @ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) found beans of type 'java.util.concurrent.Executor' dataConsistencyExecutor, taskExecutor, clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor (OnBeanCondition)

   TaskSchedulingConfigurations.TaskSchedulerConfiguration:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.scheduling.TaskScheduler,java.util.concurrent.ScheduledExecutorService; SearchStrategy: all) found beans of type 'org.springframework.scheduling.TaskScheduler' messageBrokerTaskScheduler (OnBeanCondition)

   TransactionAutoConfiguration.EnableTransactionManagementConfiguration:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration; SearchStrategy: all) found beans of type 'org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration' org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration (OnBeanCondition)

   TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration:
      Did not match:
         - Ancestor org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)
      Matched:
         - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)


Exclusions:
-----------

    None


Unconditional classes:
----------------------

    None



2025-07-13 01:09:52.024 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 01:09:52.024 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 01:09:52.026 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 01:09:52.123 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 207 ms. Found 10 JPA repository interfaces.
2025-07-13 01:09:52.599 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:09:52.600 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:09:52.629 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:52.629 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:52.629 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:52.631 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:52.631 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:52.632 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:52.632 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:52.633 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:52.633 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:52.633 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:09:52.634 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 0 Redis repository interfaces.
2025-07-13 01:09:53.575 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:09:53.579 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:09:53.584 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:09:53.597 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:09:53.599 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:09:53.600 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:09:53.677 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:09:53.678 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2888 ms
2025-07-13 01:09:53.969 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 01:09:54.133 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@63686b79
2025-07-13 01:09:54.135 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 01:09:54.235 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:09:54.373 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.088s)
2025-07-13 01:09:54.415 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:09:54.423 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:09:54.572 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:09:54.669 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 01:09:54.713 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:09:54.969 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:09:56.326 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:09:56.406 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:09:57.386 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 01:09:57.872 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:09:58.057 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:09:58.057 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:09:58.234 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:09:58.378 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:09:58.408 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:09:58.408 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:09:58.442 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:09:58.442 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:09:58.475 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:09:58.483 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:09:58.492 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:09:58.501 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:09:58.606 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:09:58.612 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:09:58.794 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:09:58.972 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:09:59.296 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:10:00.017 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:10:00.081 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:10:00.084 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 01:10:00.093 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 01:10:00.209 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 01:10:08.175 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:10:08.178 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:10:08.178 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:10:08.181 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:10:08.182 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:10:08.182 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:10:08.182 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:10:08.183 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:10:08.183 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:10:08.184 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:10:08.187 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:10:08.188 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:10:08.189 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:10:08.192 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:10:08.192 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:10:08.204 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:10:08.206 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:10:08.206 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:10:08.206 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:10:08.206 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:10:08.206 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:10:08.206 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:10:08.226 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:10:08.229 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:10:08.235 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:10:08.237 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:10:08.237 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:10:08.237 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:10:08.240 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:10:08.240 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:10:09.441 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:10:09.442 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:10:09.490 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:10:09.494 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:10:09.495 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:10:09.495 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:10:09.495 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:10:09.495 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:10:09.495 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:10:09.518 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:10:09.521 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:10:09.527 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:10:09.530 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:10:09.530 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:10:09.530 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:10:09.534 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:10:09.534 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:10:09.721 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:10:09.723 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:10:09.761 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:10:09.764 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:10:09.764 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:10:09.764 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:10:09.764 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:10:09.764 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:10:09.764 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:10:09.782 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:10:09.784 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:10:09.790 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:10:09.792 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:10:09.792 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:10:09.792 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:10:09.794 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:10:09.795 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:10:10.290 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:10:10.290 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:10:10.290 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:10:10.295 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:10:10.295 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:10:10.295 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:10:10.296 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:10:10.296 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:10:10.296 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:10:10.301 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:10:10.313 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:10:10.313 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:10:10.313 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:10:10.313 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:10:10.314 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:10:10.318 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:10:10.318 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:10:10.318 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:10:10.741 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:10:10.775 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:10:18.381 [http-nio-8080-exec-5] INFO  c.i.i.u.s.impl.UserDeviceServiceImpl - 获取用户设备列表: userId=4
2025-07-13 01:10:24.133 [http-nio-8080-exec-7] INFO  c.i.i.u.s.impl.UserDeviceServiceImpl - 获取用户设备列表: userId=4
2025-07-13 01:10:34.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.impl.UserDeviceServiceImpl - 获取用户设备列表: userId=4
2025-07-13 01:10:39.799 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:10:39.800 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:10:39.800 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:10:39.800 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:10:39.800 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:10:39.801 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:10:39.801 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:10:51.846 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 01:11:10.267 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:11:10.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:11:10.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:11:10.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:11:10.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:11:10.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:11:10.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:11:40.263 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:11:40.265 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:11:40.266 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:11:40.266 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:11:40.266 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:11:40.266 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:11:40.267 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:12:01.242 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-07-13 01:12:01.245 [Thread-11] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 01:12:01.245 [Thread-11] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@249421d1]]
2025-07-13 01:12:01.245 [Thread-11] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 01:12:01.245 [Thread-11] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 01:12:02.126 [Thread-11] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:12:02.128 [Thread-11] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown initiated...
2025-07-13 01:12:02.135 [Thread-11] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown completed.
2025-07-13 01:12:02.416 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 15376 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:12:02.417 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:12:03.144 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:12:03.145 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:12:03.397 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 250 ms. Found 10 JPA repository interfaces.
2025-07-13 01:12:03.908 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:12:03.908 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:12:03.937 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:03.938 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:03.939 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:03.939 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:03.940 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:03.941 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:03.941 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:03.941 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:03.943 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:03.944 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:03.944 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 34 ms. Found 0 Redis repository interfaces.
2025-07-13 01:12:04.342 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:12:04.343 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:12:04.345 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:12:04.346 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:12:04.347 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:12:04.347 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:12:04.460 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:12:04.461 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2040 ms
2025-07-13 01:12:04.747 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Starting...
2025-07-13 01:12:04.772 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-4 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7f9afcb9
2025-07-13 01:12:04.772 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Start completed.
2025-07-13 01:12:04.795 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:12:04.860 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.033s)
2025-07-13 01:12:04.902 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:12:04.905 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:12:05.020 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:12:05.027 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:12:05.045 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:12:05.998 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:12:06.022 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:12:06.293 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:12:06.293 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Shutdown initiated...
2025-07-13 01:12:06.294 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Shutdown completed.
2025-07-13 01:12:06.296 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 01:12:06.356 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 01:12:08.033 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 15376 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:12:08.033 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:12:08.658 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:12:08.658 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:12:08.738 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 79 ms. Found 10 JPA repository interfaces.
2025-07-13 01:12:09.134 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:12:09.152 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:12:09.228 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:09.233 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:09.239 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:09.241 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:09.242 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:09.243 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:09.245 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:09.248 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:09.249 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:09.252 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:09.256 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 101 ms. Found 0 Redis repository interfaces.
2025-07-13 01:12:10.062 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:12:10.064 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:12:10.066 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:12:10.066 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:12:10.067 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:12:10.067 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:12:10.193 [restartedMain] INFO  o.a.c.c.C.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:12:10.229 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2192 ms
2025-07-13 01:12:10.889 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-5 - Starting...
2025-07-13 01:12:10.923 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-5 - Added connection com.mysql.cj.jdbc.ConnectionImpl@623d36e
2025-07-13 01:12:10.923 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-5 - Start completed.
2025-07-13 01:12:11.078 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:12:11.205 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.077s)
2025-07-13 01:12:11.254 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:12:11.258 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:12:11.360 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:12:11.368 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:12:11.387 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:12:11.745 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:12:11.802 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:12:12.764 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:12:12.765 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-5 - Shutdown initiated...
2025-07-13 01:12:12.771 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-5 - Shutdown completed.
2025-07-13 01:12:12.773 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 01:12:12.916 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 01:12:24.734 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 15376 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:12:24.734 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:12:25.072 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:12:25.072 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:12:25.144 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 70 ms. Found 10 JPA repository interfaces.
2025-07-13 01:12:25.299 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:12:25.299 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:12:25.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:25.330 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:25.330 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:25.331 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:25.331 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:25.333 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:25.333 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:25.335 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:25.336 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:25.336 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:25.337 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 37 ms. Found 0 Redis repository interfaces.
2025-07-13 01:12:25.664 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:12:25.664 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:12:25.666 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:12:25.666 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:12:25.667 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:12:25.667 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:12:25.706 [restartedMain] INFO  o.a.c.c.C.[Tomcat-2].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:12:25.706 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 970 ms
2025-07-13 01:12:25.905 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-6 - Starting...
2025-07-13 01:12:25.921 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-6 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3561362
2025-07-13 01:12:25.921 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-6 - Start completed.
2025-07-13 01:12:25.931 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:12:25.965 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.017s)
2025-07-13 01:12:25.987 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:12:25.989 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:12:26.041 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:12:26.045 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:12:26.052 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:12:26.299 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:12:26.327 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:12:26.995 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:12:26.997 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:12:26.997 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:12:27.134 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:12:27.297 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:12:27.358 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:12:27.359 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:12:27.411 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:12:27.411 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:12:27.431 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:12:27.446 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:12:27.457 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:12:27.477 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:12:27.650 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:12:27.669 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:12:27.827 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:12:27.910 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:12:28.139 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:12:28.669 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:12:28.698 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:12:28.705 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:12:28.706 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:12:28.707 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@40816ca6]]
2025-07-13 01:12:28.707 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:12:28.722 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 4.017 seconds (process running for 368.228)
2025-07-13 01:12:28.724 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:12:28.744 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:12:28.765 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:12:28.788 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:12:28.809 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:12:28.824 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:12:28.847 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:12:28.883 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:12:28.885 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 01:12:40.252 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat-2].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 01:12:40.253 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 01:12:40.255 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 01:12:40.289 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:12:40.292 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:12:40.293 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:12:40.293 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:12:40.293 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:12:40.293 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:12:40.293 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:12:42.670 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 1 class path change (1 addition, 0 deletions, 0 modifications)
2025-07-13 01:12:42.673 [Thread-15] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 01:12:42.674 [Thread-15] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@40816ca6]]
2025-07-13 01:12:42.675 [Thread-15] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 01:12:42.675 [Thread-15] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 01:12:43.398 [Thread-15] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:12:43.400 [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-6 - Shutdown initiated...
2025-07-13 01:12:43.405 [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-6 - Shutdown completed.
2025-07-13 01:12:43.715 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 15376 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:12:43.716 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:12:44.116 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:12:44.116 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:12:44.207 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 90 ms. Found 10 JPA repository interfaces.
2025-07-13 01:12:44.423 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:12:44.423 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:12:44.446 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:44.447 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:44.447 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:44.448 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:44.448 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:44.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:44.450 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:44.450 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:44.451 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:44.451 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:12:44.451 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 Redis repository interfaces.
2025-07-13 01:12:44.674 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:12:44.675 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:12:44.676 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:12:44.676 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:12:44.676 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:12:44.676 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:12:44.729 [restartedMain] INFO  o.a.c.c.C.[Tomcat-2].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:12:44.730 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1012 ms
2025-07-13 01:12:44.849 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-7 - Starting...
2025-07-13 01:12:44.860 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-7 - Added connection com.mysql.cj.jdbc.ConnectionImpl@da942cb
2025-07-13 01:12:44.860 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-7 - Start completed.
2025-07-13 01:12:44.929 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:12:44.954 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.015s)
2025-07-13 01:12:44.968 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:12:44.969 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:12:45.004 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:12:45.006 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:12:45.010 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:12:45.087 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:12:45.106 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:12:45.405 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:12:45.406 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:12:45.406 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:12:45.462 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:12:45.509 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:12:45.532 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:12:45.532 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:12:45.552 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:12:45.553 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:12:45.560 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:12:45.568 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:12:45.573 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:12:45.581 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:12:45.647 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:12:45.654 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:12:45.723 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:12:45.765 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:12:45.885 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:12:46.112 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:12:46.123 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:12:46.126 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:12:46.126 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:12:46.127 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@51bf4088]]
2025-07-13 01:12:46.127 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:12:46.136 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 2.47 seconds (process running for 385.642)
2025-07-13 01:12:46.138 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:12:46.155 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:12:46.168 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:12:46.181 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:12:46.197 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:12:46.211 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:12:46.224 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:12:46.247 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:12:46.248 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 01:12:52.013 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat-2].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 01:12:52.013 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 01:12:52.017 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-07-13 01:13:05.863 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 256 class path changes (0 additions, 256 deletions, 0 modifications)
2025-07-13 01:13:05.869 [Thread-25] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 01:13:05.869 [Thread-25] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@51bf4088]]
2025-07-13 01:13:05.869 [Thread-25] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 01:13:05.870 [Thread-25] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 01:13:06.895 [Thread-25] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:13:06.897 [Thread-25] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-7 - Shutdown initiated...
2025-07-13 01:13:06.903 [Thread-25] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-7 - Shutdown completed.
2025-07-13 01:13:07.204 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 15376 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:13:07.204 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:13:07.798 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:13:07.798 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:13:07.819 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 0 JPA repository interfaces.
2025-07-13 01:13:07.823 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:13:07.823 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:13:07.841 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-07-13 01:13:08.011 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:13:08.011 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:13:08.014 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:13:08.014 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:13:08.015 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:13:08.016 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:13:08.138 [restartedMain] INFO  o.a.c.c.C.[Tomcat-2].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:13:08.139 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 931 ms
2025-07-13 01:13:08.242 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-8 - Starting...
2025-07-13 01:13:08.264 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-8 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4d9cd804
2025-07-13 01:13:08.265 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-8 - Start completed.
2025-07-13 01:13:08.350 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:13:08.404 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.030s)
2025-07-13 01:13:08.435 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:13:08.437 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:13:08.487 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:13:08.490 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:13:08.498 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:13:08.533 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:13:08.534 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:13:08.540 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:13:08.540 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-8 - Shutdown initiated...
2025-07-13 01:13:08.543 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-8 - Shutdown completed.
2025-07-13 01:13:08.545 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 01:13:08.665 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 01:13:18.725 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 15376 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:13:18.726 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:13:19.478 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:13:19.479 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:13:19.626 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 146 ms. Found 10 JPA repository interfaces.
2025-07-13 01:13:20.175 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:13:20.176 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:13:20.224 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:20.225 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:20.226 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:20.226 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:20.227 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:20.228 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:20.229 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:20.229 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:20.229 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:20.230 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:20.230 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53 ms. Found 0 Redis repository interfaces.
2025-07-13 01:13:20.618 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:13:20.619 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:13:20.620 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:13:20.621 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:13:20.622 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:13:20.622 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:13:20.691 [restartedMain] INFO  o.a.c.c.C.[Tomcat-3].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:13:20.691 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1961 ms
2025-07-13 01:13:20.909 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-9 - Starting...
2025-07-13 01:13:20.930 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-9 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1ad2360e
2025-07-13 01:13:20.930 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-9 - Start completed.
2025-07-13 01:13:21.022 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:13:21.062 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.021s)
2025-07-13 01:13:21.082 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:13:21.084 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:13:21.126 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:13:21.130 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:13:21.135 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:13:21.267 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:13:21.347 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:13:21.720 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:13:21.721 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:13:21.721 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:13:21.786 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:13:21.834 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:13:21.858 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:13:21.859 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:13:21.881 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:13:21.882 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:13:21.888 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:13:21.896 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:13:21.901 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:13:21.906 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:13:21.978 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:13:21.984 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:13:22.072 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:13:22.121 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:13:22.239 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:13:22.492 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:13:22.505 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:13:22.509 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:13:22.509 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:13:22.509 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@11dddee7]]
2025-07-13 01:13:22.510 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:13:22.518 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 3.866 seconds (process running for 422.023)
2025-07-13 01:13:22.519 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:13:22.530 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:13:22.541 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:13:22.554 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:13:22.566 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:13:22.580 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:13:22.596 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:13:22.617 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:13:22.619 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 01:13:22.674 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 01:13:22.710 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 31336 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:13:22.712 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:13:22.746 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 01:13:22.747 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 01:13:23.408 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:13:23.409 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:13:23.544 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 130 ms. Found 10 JPA repository interfaces.
2025-07-13 01:13:23.866 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:13:23.867 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:13:23.895 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:23.896 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:23.897 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:23.897 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:23.897 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:23.898 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:23.899 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:23.900 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:23.901 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:23.901 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:13:23.901 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 Redis repository interfaces.
2025-07-13 01:13:25.423 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:13:25.433 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:13:25.443 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:13:25.479 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:13:25.484 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:13:25.486 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:13:25.644 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:13:25.647 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2898 ms
2025-07-13 01:13:26.125 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 01:13:26.440 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@36fecfd8
2025-07-13 01:13:26.444 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 01:13:26.556 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:13:26.675 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.071s)
2025-07-13 01:13:26.712 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:13:26.719 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:13:26.841 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:13:26.910 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 01:13:26.949 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:13:27.212 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:13:28.440 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:13:28.488 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:13:29.309 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 01:13:29.743 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:13:29.948 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:13:29.949 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:13:30.161 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:13:30.369 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:13:30.412 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:13:30.412 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:13:30.463 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:13:30.464 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:13:30.512 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:13:30.528 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:13:30.544 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:13:30.563 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:13:30.777 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:13:30.792 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:13:31.128 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:13:31.358 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:13:31.788 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:13:32.486 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:13:32.504 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:13:32.507 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 01:13:32.512 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 01:13:32.570 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 01:15:07.735 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 01:15:07.776 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 22052 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:15:07.777 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:15:07.818 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 01:15:07.818 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 01:15:09.008 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:15:09.009 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:15:09.222 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 202 ms. Found 10 JPA repository interfaces.
2025-07-13 01:15:09.794 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:15:09.798 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:15:09.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:15:09.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:15:09.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:15:09.880 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:15:09.880 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:15:09.881 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:15:09.882 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:15:09.882 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:15:09.883 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:15:09.883 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:15:09.883 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53 ms. Found 0 Redis repository interfaces.
2025-07-13 01:15:10.733 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:15:10.736 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:15:10.740 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:15:10.748 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:15:10.750 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:15:10.752 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:15:10.815 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:15:10.817 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2996 ms
2025-07-13 01:15:11.122 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 01:15:11.272 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1ccc382e
2025-07-13 01:15:11.274 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 01:15:11.419 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:15:11.483 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.041s)
2025-07-13 01:15:11.505 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:15:11.509 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:15:11.588 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:15:11.634 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 01:15:11.669 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:15:11.881 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:15:12.808 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:15:12.853 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:15:13.655 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 01:15:14.134 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:15:14.285 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:15:14.286 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:15:14.453 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:15:14.609 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:15:14.653 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:15:14.653 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:15:14.688 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:15:14.689 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:15:14.727 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:15:14.736 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:15:14.746 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:15:14.757 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:15:14.884 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:15:14.892 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:15:15.113 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:15:15.243 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:15:15.492 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:15:16.001 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:15:16.042 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:15:16.065 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:15:16.067 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:15:16.067 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@79906785]]
2025-07-13 01:15:16.067 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:15:16.083 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 8.738 seconds (process running for 9.104)
2025-07-13 01:15:16.199 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:15:16.215 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:15:16.227 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:15:16.245 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:15:16.258 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:15:16.271 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:15:16.282 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:15:16.308 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:15:19.529 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 01:15:19.529 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 01:15:19.531 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 01:15:19.621 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:15:19.630 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:15:19.631 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:15:19.631 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:15:19.632 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:15:19.632 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:15:19.632 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:15:19.675 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:15:19.678 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:15:19.678 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:15:19.678 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:15:19.678 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:15:19.678 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:15:19.678 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:15:39.819 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:15:39.822 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:15:39.822 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:15:39.822 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:15:39.822 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:15:39.823 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:15:39.824 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:16:01.461 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:16:01.463 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:16:01.512 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:16:01.515 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:16:01.515 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:16:01.515 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:16:01.516 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:16:01.516 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:16:01.516 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:16:01.555 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:16:01.558 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:16:01.581 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:16:01.585 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:16:01.586 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:16:01.587 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:16:01.592 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:16:01.592 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:16:02.068 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:16:02.068 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:16:02.071 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:16:02.098 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:16:02.098 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:16:02.098 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:16:02.099 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:16:02.099 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:16:02.102 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:16:02.103 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:16:02.110 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:16:02.110 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:16:02.110 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:16:02.111 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:16:02.111 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:16:02.122 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:16:02.123 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:16:02.123 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:16:02.461 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:16:02.527 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:16:08.344 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:16:08.348 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:16:08.348 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:16:08.353 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:16:08.353 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:16:08.354 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:16:08.354 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:16:08.355 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:16:08.355 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:16:08.358 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:16:08.362 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:16:08.362 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:16:08.363 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:16:08.367 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:16:08.368 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:16:13.883 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:16:13.885 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:16:13.920 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:16:13.922 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:16:13.923 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:16:13.923 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:16:13.923 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:16:13.923 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:16:13.923 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:16:13.942 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:16:13.944 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:16:13.952 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:16:13.954 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:16:13.954 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:16:13.955 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:16:13.958 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:16:13.958 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:16:14.455 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:16:14.455 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:16:14.455 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:16:14.459 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:16:14.460 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:16:14.460 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:16:14.460 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:16:14.460 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:16:14.460 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:16:14.465 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:16:14.476 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:16:14.476 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:16:14.476 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:16:14.476 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:16:14.477 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:16:14.481 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:16:14.482 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:16:14.482 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:16:14.884 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:16:14.908 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:16:16.035 [MessageBroker-4] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 01:16:19.249 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:16:19.249 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:16:30.050 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:16:30.053 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:16:30.053 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:16:30.056 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:16:30.056 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:16:30.056 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:16:30.057 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:16:30.057 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:16:30.057 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:16:30.058 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:16:30.059 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:16:30.060 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:16:30.060 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:16:30.064 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:16:30.064 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:16:33.512 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:16:33.512 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:16:39.155 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:16:39.157 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:16:39.158 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:16:39.161 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:16:39.161 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:16:39.161 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:16:39.162 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:16:39.162 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:16:39.162 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:16:39.164 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:16:39.167 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:16:39.167 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:16:39.167 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:16:39.172 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:16:39.172 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:16:44.286 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:16:44.291 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:16:44.293 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:16:44.293 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:16:44.293 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:16:44.294 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:16:44.294 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:16:44.327 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:16:44.332 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:16:44.340 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:16:44.343 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:16:44.344 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:16:44.344 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:16:44.348 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:16:44.349 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:17:14.277 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:17:14.282 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:17:14.282 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:17:14.283 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:17:14.283 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:17:14.283 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:17:14.283 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:17:14.308 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:17:14.311 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:17:14.316 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:17:14.318 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:17:14.318 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:17:14.318 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:17:14.321 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:17:14.321 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:17:31.273 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:17:31.276 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:17:31.277 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:17:31.279 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:17:31.279 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:17:31.279 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:17:31.279 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:17:31.280 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:17:31.280 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:17:31.282 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:17:31.283 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:17:31.283 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:17:31.283 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:17:31.287 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:17:31.287 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:17:34.755 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:17:34.757 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:17:34.758 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:17:34.760 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:17:34.760 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:17:34.760 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:17:34.761 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:17:34.761 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:17:34.761 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:17:34.762 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:17:34.764 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:17:34.764 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:17:34.765 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:17:34.767 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:17:34.767 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:17:43.947 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:17:43.949 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:17:43.949 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:17:43.950 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:17:43.950 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:17:43.950 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:17:43.951 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:17:43.967 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:17:43.969 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:17:43.973 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:17:43.975 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:17:43.975 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:17:43.976 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:17:43.978 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:17:43.978 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:18:00.283 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:18:00.287 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:18:00.288 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:18:00.289 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:18:00.290 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:18:00.290 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:18:00.290 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:18:00.290 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:18:00.290 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:18:00.292 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:18:00.295 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:18:00.295 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:18:00.295 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:18:00.298 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:18:00.298 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:18:14.296 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:18:14.300 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:18:14.300 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:18:14.301 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:18:14.301 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:18:14.301 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:18:14.301 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:18:14.328 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:18:14.331 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:18:14.337 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:18:14.340 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:18:14.340 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:18:14.340 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:18:14.343 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:18:14.343 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:18:26.109 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:18:26.111 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:18:26.111 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:18:26.113 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:18:26.114 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:18:26.114 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:18:26.114 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:18:26.114 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:18:26.114 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:18:26.116 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:18:26.117 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:18:26.118 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:18:26.118 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:18:26.121 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:18:26.121 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:18:44.273 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:18:44.274 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:18:44.274 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:18:44.274 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:18:44.274 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:18:44.274 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:18:44.275 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:18:44.290 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:18:44.293 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:18:44.298 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:18:44.299 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:18:44.300 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:18:44.300 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:18:44.302 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:18:44.302 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:19:14.258 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:19:14.260 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:19:14.260 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:19:14.260 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:19:14.260 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:19:14.260 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:19:14.261 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:19:14.279 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:19:14.281 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:19:14.286 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:19:14.289 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:19:14.289 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:19:14.289 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:19:14.291 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:19:14.291 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:19:44.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:19:44.277 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:19:44.278 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:19:44.278 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:19:44.278 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:19:44.278 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:19:44.278 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:19:44.306 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:19:44.310 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:19:44.316 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:19:44.318 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:19:44.318 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:19:44.318 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:19:44.322 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:19:44.322 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:20:45.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:20:45.259 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:20:45.259 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:20:45.259 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:20:45.259 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:20:45.259 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:20:45.260 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:20:45.278 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:20:45.280 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:20:45.288 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:20:45.290 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:20:45.290 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:20:45.290 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:20:45.293 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:20:45.294 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:21:46.265 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:21:46.268 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:21:46.268 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:21:46.269 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:21:46.269 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:21:46.269 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:21:46.269 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:21:46.294 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:21:46.297 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:21:46.305 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:21:46.308 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:21:46.308 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:21:46.309 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:21:46.312 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:21:46.312 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:22:47.306 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:22:47.311 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:22:47.312 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:22:47.313 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:22:47.313 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:22:47.313 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:22:47.314 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:22:47.353 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:22:47.357 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:22:47.369 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:22:47.373 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:22:47.374 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:22:47.374 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:22:47.379 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:22:47.380 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:23:32.374 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:23:32.379 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:23:32.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:23:32.381 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:23:32.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:23:32.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:23:32.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:23:32.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:23:32.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:23:32.385 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:23:32.387 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:23:32.388 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:23:32.388 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:23:32.392 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:23:32.392 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:23:32.401 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:23:32.404 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:23:32.404 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:23:32.405 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:23:32.405 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:23:32.405 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:23:32.405 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:23:32.423 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:23:32.426 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:23:32.432 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:23:32.435 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:23:32.435 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:23:32.435 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:23:32.439 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:23:32.439 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:23:33.475 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:23:33.477 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:23:33.509 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:23:33.513 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:23:33.513 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:23:33.513 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:23:33.514 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:23:33.514 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:23:33.514 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:23:33.533 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:23:33.536 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:23:33.543 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:23:33.546 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:23:33.546 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:23:33.547 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:23:33.549 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:23:33.550 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:23:34.039 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:23:34.039 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:23:34.039 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:23:34.047 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:23:34.047 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:23:34.047 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:23:34.047 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:23:34.047 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:23:34.048 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:23:34.048 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:23:34.056 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:23:34.056 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:23:34.057 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:23:34.057 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:23:34.057 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:23:34.060 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:23:34.060 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:23:34.061 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:23:34.475 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:23:34.501 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:23:37.124 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:23:40.698 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:23:40.702 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:23:40.755 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:23:40.758 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:23:40.759 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:23:40.761 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:23:40.761 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:23:40.762 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:23:40.763 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:23:40.792 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:23:40.798 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:23:40.808 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:23:40.813 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:23:40.814 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:23:40.814 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:23:40.819 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:23:40.820 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:23:41.299 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:23:41.302 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:23:41.303 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:23:41.307 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:23:41.307 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:23:41.308 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:23:41.309 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:23:41.310 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:23:41.310 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:23:41.313 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:23:41.324 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:23:41.324 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:23:41.324 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:23:41.324 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:23:41.325 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:23:41.330 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:23:41.330 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:23:41.330 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:23:41.667 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:23:41.704 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:23:42.560 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:23:43.750 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:23:43.753 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:23:43.801 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:23:43.805 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:23:43.805 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:23:43.807 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:23:43.807 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:23:43.807 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:23:43.807 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:23:43.836 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:23:43.840 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:23:43.850 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:23:43.854 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:23:43.855 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:23:43.855 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:23:43.861 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:23:43.861 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:23:44.348 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:23:44.349 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:23:44.349 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:23:44.354 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:23:44.355 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:23:44.355 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:23:44.355 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:23:44.356 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:23:44.356 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:23:44.360 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:23:44.372 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:23:44.372 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:23:44.372 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:23:44.372 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:23:44.373 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:23:44.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:23:44.379 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:23:44.379 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:23:44.748 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:23:44.777 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:23:47.181 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:23:49.724 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:23:49.727 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:23:49.786 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:23:49.790 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:23:49.791 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:23:49.791 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:23:49.792 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:23:49.792 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:23:49.792 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:23:49.825 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:23:49.829 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:23:49.837 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:23:49.841 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:23:49.841 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:23:49.841 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:23:49.846 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:23:49.847 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:23:50.329 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:23:50.330 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:23:50.332 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:23:50.336 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:23:50.337 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:23:50.338 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:23:50.338 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:23:50.338 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:23:50.338 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:23:50.343 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:23:50.354 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:23:50.355 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:23:50.355 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:23:50.355 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:23:50.355 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:23:50.360 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:23:50.361 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:23:50.362 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:23:50.724 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:23:50.765 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:23:51.620 [http-nio-8080-exec-5] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取收到的好友请求列表: userId=4, status=null
2025-07-13 01:23:51.692 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取发送的好友请求列表: userId=4, status=null
2025-07-13 01:23:51.874 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:23:51.896 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:23:55.448 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:23:55.448 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:24:05.677 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:24:05.680 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:24:05.681 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:24:05.683 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:24:05.683 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:24:05.684 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:24:05.686 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:24:05.687 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:24:05.688 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:24:05.690 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:24:05.692 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:24:05.692 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:24:05.693 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:24:05.698 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:24:05.698 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:24:07.359 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:24:07.360 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:24:12.482 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:24:12.484 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:24:12.515 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:24:12.519 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:24:12.519 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:24:12.519 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:24:12.520 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:24:12.520 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:24:12.520 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:24:12.543 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:24:12.547 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:24:12.554 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:24:12.557 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:24:12.558 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:24:12.558 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:24:12.561 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:24:12.562 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:24:13.067 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:24:13.068 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:24:13.069 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:24:13.074 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:24:13.074 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:24:13.074 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:24:13.074 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:24:13.075 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:24:13.075 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:24:13.081 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:24:13.090 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:24:13.091 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:24:13.091 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:24:13.091 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:24:13.092 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:24:13.098 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:24:13.098 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:24:13.099 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:24:13.481 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:24:13.502 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:24:18.633 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:24:18.633 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:24:26.991 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:24:26.995 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:24:26.995 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:24:26.998 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:24:26.998 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:24:26.998 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:24:26.998 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:24:26.998 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:24:26.998 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:24:27.000 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:24:27.002 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:24:27.003 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:24:27.003 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:24:27.007 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:24:27.007 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:24:28.914 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:24:28.914 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:24:43.267 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:24:43.271 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:24:43.271 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:24:43.271 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:24:43.272 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:24:43.272 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:24:43.272 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:24:43.306 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:24:43.310 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:24:43.320 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:24:43.324 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:24:43.325 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:24:43.325 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:24:43.331 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:24:43.332 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:25:12.039 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:25:12.043 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:25:12.043 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:25:12.046 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:25:12.046 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:25:12.047 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:25:12.047 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:25:12.047 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:25:12.047 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:25:12.049 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:25:12.051 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:25:12.051 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:25:12.051 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:25:12.056 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:25:12.056 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:25:12.547 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:25:12.548 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:25:12.549 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:25:12.549 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:25:12.549 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:25:12.549 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:25:12.549 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:25:12.571 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:25:12.574 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:25:12.579 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:25:12.581 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:25:12.581 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:25:12.581 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:25:12.584 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:25:12.585 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:25:14.463 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:25:14.463 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:25:16.279 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:25:17.635 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:25:17.637 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:25:17.664 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:25:17.667 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:25:17.667 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:25:17.668 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:25:17.668 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:25:17.668 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:25:17.669 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:25:17.693 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:25:17.695 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:25:17.700 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:25:17.703 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:25:17.703 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:25:17.703 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:25:17.708 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:25:17.708 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:25:18.213 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:25:18.213 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:25:18.215 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:25:18.218 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:25:18.219 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:25:18.219 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:25:18.219 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:25:18.219 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:25:18.221 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:25:18.224 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:25:18.231 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:25:18.232 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:25:18.232 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:25:18.232 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:25:18.232 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:25:18.236 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:25:18.237 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:25:18.237 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:25:18.636 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:25:18.651 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:25:19.663 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:25:48.259 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:25:48.261 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:25:48.261 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:25:48.262 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:25:48.262 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:25:48.262 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:25:48.262 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:25:48.279 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:25:48.282 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:25:48.285 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:25:48.287 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:25:48.287 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:25:48.287 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:25:48.289 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:25:48.290 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:26:18.259 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:26:18.262 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:26:18.262 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:26:18.262 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:26:18.262 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:26:18.262 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:26:18.262 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:26:18.292 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:26:18.294 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:26:18.299 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:26:18.301 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:26:18.301 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:26:18.301 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:26:18.304 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:26:18.304 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:26:48.261 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:26:48.263 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:26:48.263 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:26:48.263 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:26:48.264 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:26:48.264 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:26:48.264 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:26:48.279 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:26:48.282 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:26:48.285 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:26:48.287 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:26:48.287 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:26:48.287 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:26:48.289 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:26:48.289 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:27:18.277 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:27:18.281 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:27:18.281 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:27:18.281 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:27:18.282 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:27:18.282 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:27:18.282 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:27:18.304 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:27:18.306 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:27:18.310 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:27:18.311 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:27:18.311 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:27:18.312 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:27:18.313 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:27:18.313 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:27:48.261 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:27:48.263 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:27:48.263 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:27:48.263 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:27:48.263 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:27:48.263 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:27:48.264 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:27:48.283 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:27:48.286 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:27:48.293 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:27:48.296 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:27:48.296 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:27:48.296 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:27:48.303 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:27:48.304 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:28:18.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:28:18.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:28:18.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:28:18.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:28:18.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:28:18.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:28:18.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:28:18.285 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:28:18.286 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:28:18.289 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:28:18.291 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:28:18.291 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:28:18.291 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:28:18.293 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:28:18.293 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:28:48.265 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:28:48.267 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:28:48.267 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:28:48.267 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:28:48.268 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:28:48.268 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:28:48.268 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:28:48.290 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:28:48.292 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:28:48.295 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:28:48.298 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:28:48.298 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:28:48.298 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:28:48.300 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:28:48.300 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:29:49.259 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:29:49.261 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:29:49.261 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:29:49.261 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:29:49.261 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:29:49.261 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:29:49.261 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:29:49.282 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:29:49.286 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:29:49.290 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:29:49.292 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:29:49.292 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:29:49.292 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:29:49.295 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:29:49.295 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:30:02.086 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:30:02.091 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:30:02.093 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:30:02.096 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:30:02.097 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:30:02.097 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:30:02.097 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:30:02.098 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:30:02.098 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:30:02.099 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:30:02.103 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:30:02.103 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:30:02.103 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:30:02.110 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:30:02.110 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:30:03.198 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:30:03.202 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:30:03.242 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:30:03.244 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:30:03.245 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:30:03.245 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:30:03.245 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:30:03.246 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:30:03.246 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:30:03.275 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:30:03.280 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:30:03.286 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:30:03.290 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:30:03.290 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:30:03.291 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:30:03.297 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:30:03.298 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:30:03.786 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:30:03.787 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:30:03.790 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:30:03.794 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:30:03.794 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:30:03.795 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:30:03.795 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:30:03.795 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:30:03.795 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:30:03.797 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:30:03.807 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:30:03.807 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:30:03.807 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:30:03.807 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:30:03.808 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:30:03.812 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:30:03.813 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:30:03.813 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:30:04.198 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:30:04.223 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:30:04.588 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:30:10.058 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:30:10.060 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:30:10.104 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:30:10.108 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:30:10.108 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:30:10.108 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:30:10.108 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:30:10.108 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:30:10.109 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:30:10.144 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:30:10.148 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:30:10.155 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:30:10.159 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:30:10.159 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:30:10.159 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:30:10.165 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:30:10.165 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:30:10.683 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:30:10.692 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:30:10.698 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:30:10.709 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:30:10.714 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:30:10.717 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:30:10.721 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:30:10.722 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:30:10.724 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:30:10.747 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:30:10.778 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:30:10.779 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:30:10.779 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:30:10.779 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:30:10.780 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:30:10.785 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:30:10.786 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:30:10.786 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:30:11.051 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:30:11.071 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:30:13.627 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:30:15.374 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:30:15.376 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:30:15.426 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:30:15.430 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:30:15.430 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:30:15.430 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:30:15.430 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:30:15.433 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:30:15.433 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:30:15.485 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:30:15.491 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:30:15.499 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:30:15.503 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:30:15.505 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:30:15.505 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:30:15.511 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:30:15.512 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:30:15.982 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:30:15.984 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:30:15.984 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:30:15.988 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:30:15.990 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:30:15.991 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:30:15.992 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:30:15.992 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:30:15.993 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:30:16.001 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:30:16.014 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:30:16.015 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:30:16.015 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:30:16.016 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:30:16.016 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:30:16.021 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:30:16.022 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:30:16.023 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:30:16.378 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:30:16.409 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:30:18.766 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:30:18.766 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:30:28.376 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:30:28.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:30:28.378 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:30:28.381 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:30:28.381 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:30:28.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:30:28.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:30:28.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:30:28.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:30:28.383 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:30:28.385 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:30:28.385 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:30:28.385 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:30:28.389 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:30:28.389 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:30:34.466 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:30:34.471 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:30:34.472 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:30:34.476 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:30:34.476 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:30:34.477 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:30:34.477 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:30:34.477 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:30:34.478 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:30:34.480 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:30:34.485 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:30:34.485 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:30:34.485 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:30:34.493 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:30:34.493 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:30:46.269 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:30:46.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:30:46.271 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:30:46.271 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:30:46.271 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:30:46.271 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:30:46.271 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:30:46.288 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:30:46.291 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:30:46.295 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:30:46.297 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:30:46.297 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:30:46.297 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:30:46.300 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:30:46.301 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:31:16.254 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:31:16.256 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:31:16.256 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:31:16.256 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:31:16.256 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:31:16.257 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:31:16.257 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:31:16.274 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:31:16.276 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:31:16.280 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:31:16.282 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:31:16.283 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:31:16.283 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:31:16.286 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:31:16.287 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:31:46.272 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:31:46.276 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:31:46.276 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:31:46.276 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:31:46.276 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:31:46.277 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:31:46.277 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:31:46.302 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:31:46.305 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:31:46.310 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:31:46.312 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:31:46.312 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:31:46.312 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:31:46.316 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:31:46.316 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:32:16.261 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:32:16.264 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:32:16.264 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:32:16.264 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:32:16.264 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:32:16.264 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:32:16.264 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:32:16.279 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:32:16.282 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:32:16.286 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:32:16.287 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:32:16.288 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:32:16.288 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:32:16.294 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:32:16.294 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:32:46.254 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:32:46.255 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:32:46.256 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:32:46.256 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:32:46.256 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:32:46.256 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:32:46.256 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:32:46.270 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:32:46.272 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:32:46.276 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:32:46.279 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:32:46.279 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:32:46.279 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:32:46.283 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:32:46.283 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:33:16.268 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:33:16.269 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:33:16.269 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:33:16.270 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:33:16.270 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:33:16.270 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:33:16.270 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:33:16.284 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:33:16.287 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:33:16.289 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:33:16.290 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:33:16.290 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:33:16.290 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:33:16.293 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:33:16.293 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:33:46.266 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:33:46.269 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:33:46.269 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:33:46.270 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:33:46.270 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:33:46.270 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:33:46.270 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:33:46.292 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:33:46.295 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:33:46.298 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:33:46.299 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:33:46.300 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:33:46.300 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:33:46.303 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:33:46.303 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:34:22.686 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 256 class path changes (0 additions, 256 deletions, 0 modifications)
2025-07-13 01:34:22.709 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 01:34:22.710 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@79906785]]
2025-07-13 01:34:22.710 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 01:34:22.713 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 01:34:23.079 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:34:23.085 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 01:34:23.095 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 01:34:23.285 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 22052 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:34:23.285 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:34:23.524 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:34:23.524 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:34:23.534 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 JPA repository interfaces.
2025-07-13 01:34:23.537 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:34:23.538 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:34:23.547 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-07-13 01:34:23.639 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:34:23.640 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:34:23.641 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:34:23.642 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:34:23.642 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:34:23.642 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:34:23.669 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:34:23.670 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 383 ms
2025-07-13 01:34:23.736 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-07-13 01:34:23.748 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5f3a2b61
2025-07-13 01:34:23.748 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-07-13 01:34:23.814 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:34:23.858 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.026s)
2025-07-13 01:34:23.871 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:34:23.873 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:34:23.899 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:34:23.902 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:34:23.913 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:34:23.933 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:34:23.933 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:34:23.937 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:34:23.937 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-07-13 01:34:23.946 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-07-13 01:34:23.946 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 01:34:23.993 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 01:34:29.270 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 22052 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:34:29.271 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:34:29.747 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:34:29.747 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:34:29.824 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 76 ms. Found 10 JPA repository interfaces.
2025-07-13 01:34:29.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:34:29.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:34:29.996 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:29.997 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:29.997 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:29.998 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:29.998 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:29.998 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:29.999 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:29.999 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:30.000 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:30.000 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:30.001 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
2025-07-13 01:34:30.354 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:34:30.356 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:34:30.358 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:34:30.359 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:34:30.360 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:34:30.360 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:34:30.423 [restartedMain] INFO  o.a.c.c.C.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:34:30.423 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1149 ms
2025-07-13 01:34:30.646 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2025-07-13 01:34:30.672 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection com.mysql.cj.jdbc.ConnectionImpl@454db785
2025-07-13 01:34:30.672 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2025-07-13 01:34:30.729 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:34:30.788 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.032s)
2025-07-13 01:34:30.822 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:34:30.826 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:34:30.944 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:34:30.948 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:34:30.960 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:34:31.316 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:34:31.363 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:34:32.347 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:34:32.351 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:34:32.351 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:34:32.505 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:34:32.645 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:34:32.696 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:34:32.697 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:34:32.747 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:34:32.747 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:34:32.771 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:34:32.787 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:34:32.801 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:34:32.818 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:34:33.067 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:34:33.090 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:34:33.344 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:34:33.455 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:34:33.762 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 01:34:33.778 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:34:33.848 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 28640 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:34:33.850 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:34:33.930 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 01:34:33.930 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 01:34:34.388 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:34:34.421 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:34:34.427 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:34:34.428 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:34:34.428 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@558967af]]
2025-07-13 01:34:34.429 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:34:34.446 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 5.227 seconds (process running for 1167.467)
2025-07-13 01:34:34.448 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:34:34.635 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:34:34.656 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:34:34.682 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:34:34.704 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:34:34.725 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:34:34.738 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:34:34.766 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:34:34.768 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 01:34:35.056 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:34:35.056 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:34:35.198 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 135 ms. Found 10 JPA repository interfaces.
2025-07-13 01:34:35.518 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:34:35.519 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:34:35.542 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:35.544 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:35.544 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:35.545 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:35.545 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:35.545 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:35.546 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:35.546 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:35.546 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:35.546 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:34:35.547 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-07-13 01:34:36.320 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:34:36.323 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:34:36.326 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:34:36.335 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:34:36.338 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:34:36.338 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:34:36.389 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:34:36.391 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2459 ms
2025-07-13 01:34:36.657 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 01:34:36.799 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@66fa3da8
2025-07-13 01:34:36.800 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 01:34:36.846 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:34:36.907 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.037s)
2025-07-13 01:34:36.924 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:34:36.928 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:34:37.010 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:34:37.087 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 01:34:37.128 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:34:37.365 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:34:38.538 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:34:38.590 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:34:39.758 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 01:34:40.385 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:34:40.595 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:34:40.596 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:34:40.810 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:34:41.029 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:34:41.072 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:34:41.073 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:34:41.115 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:34:41.115 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:34:41.160 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:34:41.175 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:34:41.187 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:34:41.199 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:34:41.338 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:34:41.347 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:34:41.717 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:34:41.845 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:34:42.084 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:34:42.641 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:34:42.685 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:34:42.704 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:34:42.705 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:34:42.706 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@5bb7b7a9]]
2025-07-13 01:34:42.707 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:34:42.721 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 9.936 seconds (process running for 10.878)
2025-07-13 01:34:42.762 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:34:42.779 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:34:42.793 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:34:42.808 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:34:42.824 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:34:42.836 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:34:42.849 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:34:42.878 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:34:46.802 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 01:34:46.803 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 01:34:46.805 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 01:34:46.910 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:34:46.911 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:34:46.913 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:34:46.921 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:34:46.922 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:34:46.922 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:34:46.923 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:34:46.923 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:34:46.923 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:34:46.926 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:34:46.930 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:34:46.932 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:34:46.932 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:34:46.935 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:34:46.936 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:34:46.972 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:34:46.974 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:34:46.975 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:34:46.976 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:34:46.976 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:34:46.976 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:34:46.976 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:34:46.998 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:34:47.001 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:34:47.007 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:34:47.010 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:34:47.010 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:34:47.010 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:34:47.013 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:34:47.013 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:34:47.565 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:34:47.567 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:34:47.595 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:34:47.597 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:34:47.597 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:34:47.597 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:34:47.597 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:34:47.597 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:34:47.598 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:34:47.617 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:34:47.620 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:34:47.626 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:34:47.629 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:34:47.629 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:34:47.629 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:34:47.632 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:34:47.632 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:34:48.126 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:34:48.127 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:34:48.127 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:34:48.139 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:34:48.139 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:34:48.139 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:34:48.140 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:34:48.142 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:34:48.142 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:34:48.142 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:34:48.155 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:34:48.155 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:34:48.156 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:34:48.156 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:34:48.157 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:34:48.168 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:34:48.169 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:34:48.169 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:34:48.571 [http-nio-8080-exec-5] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:34:48.611 [http-nio-8080-exec-5] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:34:48.900 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:34:51.653 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:34:51.655 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:34:51.699 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:34:51.703 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:34:51.703 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:34:51.705 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:34:51.705 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:34:51.705 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:34:51.705 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:34:51.734 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:34:51.738 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:34:51.747 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:34:51.751 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:34:51.752 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:34:51.752 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:34:51.758 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:34:51.758 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:34:52.238 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:34:52.242 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:34:52.243 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:34:52.244 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:34:52.245 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:34:52.245 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:34:52.245 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:34:52.246 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:34:52.246 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:34:52.254 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:34:52.268 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:34:52.268 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:34:52.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:34:52.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:34:52.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:34:52.274 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:34:52.274 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:34:52.275 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:34:52.650 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:34:52.679 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:35:11.956 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:35:11.960 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:35:11.960 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:35:11.960 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:35:11.960 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:35:11.961 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:35:11.961 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:35:14.986 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:35:14.992 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:35:14.992 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:35:14.997 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:35:15.001 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:35:15.003 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:35:15.004 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:35:15.006 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:35:15.009 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:35:15.011 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:35:15.015 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:35:15.016 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:35:15.016 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:35:15.024 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:35:15.025 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:35:15.733 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:35:22.263 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:35:22.266 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:35:22.267 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:35:22.267 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:35:22.267 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:35:22.267 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:35:22.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:35:22.289 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:35:22.291 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:35:22.298 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:35:22.301 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:35:22.301 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:35:22.301 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:35:22.305 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:35:22.305 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:35:42.674 [MessageBroker-7] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 01:35:52.267 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:35:52.270 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:35:52.271 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:35:52.271 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:35:52.271 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:35:52.272 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:35:52.272 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:35:52.299 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:35:52.302 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:35:52.307 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:35:52.309 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:35:52.310 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:35:52.310 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:35:52.313 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:35:52.313 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:36:02.641 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-07-13 01:36:02.647 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 01:36:02.648 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@5bb7b7a9]]
2025-07-13 01:36:02.649 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 01:36:02.651 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 01:36:03.585 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:36:03.592 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 01:36:03.607 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 01:36:03.805 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 28640 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:36:03.805 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:36:04.053 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:36:04.053 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:36:04.092 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 39 ms. Found 10 JPA repository interfaces.
2025-07-13 01:36:04.175 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:36:04.176 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:36:04.186 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:04.187 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:04.187 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:04.187 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:04.187 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:04.188 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:04.188 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:04.188 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:04.189 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:04.189 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:04.189 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-07-13 01:36:04.313 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:36:04.314 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:36:04.314 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:36:04.315 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:36:04.315 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:36:04.315 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:36:04.339 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:36:04.340 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 533 ms
2025-07-13 01:36:04.410 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-07-13 01:36:04.421 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5a9671b7
2025-07-13 01:36:04.421 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-07-13 01:36:04.433 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:36:04.464 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.016s)
2025-07-13 01:36:04.478 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:36:04.479 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:36:04.508 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:36:04.510 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:36:04.517 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:36:04.631 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:36:04.643 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:36:04.951 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:36:04.953 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:36:04.953 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:36:05.005 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:36:05.087 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:36:05.111 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:36:05.111 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:36:05.129 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:36:05.129 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:05.139 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:05.146 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:05.152 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:05.160 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:36:05.227 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:36:05.233 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:36:05.309 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:36:05.348 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:36:05.457 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:36:05.675 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:36:05.687 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:36:05.690 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:36:05.690 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:36:05.690 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@42379392]]
2025-07-13 01:36:05.691 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:36:05.699 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 1.92 seconds (process running for 93.856)
2025-07-13 01:36:05.701 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:36:05.718 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:36:05.731 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:36:05.743 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:36:05.757 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:36:05.770 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:36:05.783 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:36:05.814 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:36:05.815 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 01:36:07.116 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-07-13 01:36:07.119 [Thread-7] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 01:36:07.119 [Thread-7] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@42379392]]
2025-07-13 01:36:07.119 [Thread-7] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 01:36:07.120 [Thread-7] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 01:36:07.587 [Thread-7] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:36:07.589 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-07-13 01:36:07.593 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-07-13 01:36:07.790 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 28640 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:36:07.790 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:36:08.138 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:36:08.138 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:36:08.210 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 71 ms. Found 10 JPA repository interfaces.
2025-07-13 01:36:08.350 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:36:08.350 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:36:08.373 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:08.374 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:08.375 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:08.375 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:08.376 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:08.376 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:08.377 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:08.377 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:08.378 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:08.378 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:08.379 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 Redis repository interfaces.
2025-07-13 01:36:08.614 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:36:08.615 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:36:08.615 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:36:08.616 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:36:08.616 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:36:08.617 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:36:08.655 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:36:08.655 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 863 ms
2025-07-13 01:36:08.769 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2025-07-13 01:36:08.783 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection com.mysql.cj.jdbc.ConnectionImpl@470cfaf4
2025-07-13 01:36:08.784 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2025-07-13 01:36:08.828 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:36:08.871 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.023s)
2025-07-13 01:36:08.895 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:36:08.897 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:36:08.951 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:36:08.954 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:36:08.966 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:36:09.171 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:36:09.224 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:36:09.809 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:36:09.810 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:36:09.810 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:36:09.868 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:36:09.927 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:36:09.951 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:36:09.951 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:36:09.976 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:36:09.977 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:09.984 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:09.991 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:09.996 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:10.002 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:36:10.076 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:36:10.084 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:36:10.170 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:36:10.216 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:36:10.361 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:36:10.602 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:36:10.615 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:36:10.618 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:36:10.619 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:36:10.619 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@50686686]]
2025-07-13 01:36:10.619 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:36:10.627 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 2.894 seconds (process running for 98.784)
2025-07-13 01:36:10.629 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:36:10.645 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:36:10.655 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:36:10.666 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:36:10.683 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:36:10.698 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:36:10.709 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:36:10.732 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:36:10.733 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 01:36:22.248 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 01:36:22.248 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 01:36:22.250 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 01:36:22.306 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:36:22.311 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:36:22.311 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:36:22.312 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:36:22.313 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:36:22.313 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:36:22.313 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:36:22.355 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:36:22.359 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:36:22.373 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:36:22.377 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:36:22.378 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:36:22.379 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:36:22.385 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:36:22.385 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:36:28.457 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-07-13 01:36:28.460 [Thread-11] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 01:36:28.460 [Thread-11] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@50686686]]
2025-07-13 01:36:28.460 [Thread-11] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 01:36:28.460 [Thread-11] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 01:36:29.128 [Thread-11] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:36:29.130 [Thread-11] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown initiated...
2025-07-13 01:36:29.134 [Thread-11] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown completed.
2025-07-13 01:36:29.412 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 28640 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:36:29.413 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:36:29.896 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:36:29.896 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:36:29.982 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 84 ms. Found 10 JPA repository interfaces.
2025-07-13 01:36:30.140 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:36:30.140 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:36:30.165 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:30.165 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:30.166 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:30.166 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:30.167 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:30.168 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:30.168 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:30.168 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:30.169 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:30.169 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:30.170 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 29 ms. Found 0 Redis repository interfaces.
2025-07-13 01:36:30.421 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:36:30.421 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:36:30.424 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:36:30.425 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:36:30.425 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:36:30.426 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:36:30.480 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:36:30.480 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1063 ms
2025-07-13 01:36:30.717 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Starting...
2025-07-13 01:36:30.737 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-4 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6072ba7c
2025-07-13 01:36:30.738 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Start completed.
2025-07-13 01:36:30.768 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:36:30.828 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.030s)
2025-07-13 01:36:30.860 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:36:30.862 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:36:30.951 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:36:30.961 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:36:30.974 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:36:31.186 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:36:31.250 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:36:32.026 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:36:32.032 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:36:32.033 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:36:32.182 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:36:32.301 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:36:32.352 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:36:32.353 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:36:32.399 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:36:32.400 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:32.413 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:32.425 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:32.435 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:32.448 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:36:32.579 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:36:32.589 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:36:32.711 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:36:32.757 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:36:32.891 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:36:33.224 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:36:33.242 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:36:33.246 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:36:33.247 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:36:33.247 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@3b41bf78]]
2025-07-13 01:36:33.248 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:36:33.257 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 3.909 seconds (process running for 121.414)
2025-07-13 01:36:33.259 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:36:33.279 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:36:33.292 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:36:33.303 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:36:33.315 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:36:33.326 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:36:33.337 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:36:33.363 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:36:33.364 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 01:36:34.670 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-07-13 01:36:34.672 [Thread-15] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 01:36:34.672 [Thread-15] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@3b41bf78]]
2025-07-13 01:36:34.673 [Thread-15] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 01:36:34.673 [Thread-15] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 01:36:34.951 [Thread-15] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:36:34.951 [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Shutdown initiated...
2025-07-13 01:36:34.953 [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Shutdown completed.
2025-07-13 01:36:35.086 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 28640 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:36:35.087 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:36:35.298 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:36:35.299 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:36:35.343 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 10 JPA repository interfaces.
2025-07-13 01:36:35.433 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:36:35.435 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:36:35.446 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:35.447 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:35.447 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:35.448 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:35.448 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:35.448 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:35.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:35.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:35.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:35.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:36:35.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-07-13 01:36:35.585 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:36:35.586 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:36:35.587 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:36:35.587 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:36:35.587 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:36:35.588 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:36:35.616 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:36:35.616 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 528 ms
2025-07-13 01:36:35.712 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-5 - Starting...
2025-07-13 01:36:35.727 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-5 - Added connection com.mysql.cj.jdbc.ConnectionImpl@612ae2bc
2025-07-13 01:36:35.727 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-5 - Start completed.
2025-07-13 01:36:35.816 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:36:35.858 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.023s)
2025-07-13 01:36:35.877 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:36:35.879 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:36:35.925 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:36:35.927 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:36:35.935 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:36:36.135 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:36:36.167 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:36:36.765 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:36:36.767 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:36:36.767 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:36:36.886 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:36:36.992 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:36:37.043 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:36:37.044 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:36:37.084 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:36:37.084 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:37.099 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:37.108 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:37.123 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:36:37.135 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:36:37.263 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:36:37.275 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:36:37.470 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:36:37.565 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:36:37.738 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:36:38.130 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:36:38.149 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:36:38.153 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:36:38.153 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:36:38.154 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@6bb8aa3]]
2025-07-13 01:36:38.154 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:36:38.167 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 3.105 seconds (process running for 126.324)
2025-07-13 01:36:38.169 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:36:38.186 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:36:38.203 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:36:38.219 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:36:38.236 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:36:38.253 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:36:38.270 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:36:38.304 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:36:38.306 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 01:37:18.041 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 01:37:18.089 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 34452 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:37:18.090 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:37:18.129 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 01:37:18.129 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 01:37:18.822 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:37:18.823 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:37:18.973 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 143 ms. Found 10 JPA repository interfaces.
2025-07-13 01:37:19.337 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:37:19.339 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:37:19.365 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:37:19.366 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:37:19.366 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:37:19.367 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:37:19.367 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:37:19.368 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:37:19.368 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:37:19.368 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:37:19.369 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:37:19.369 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:37:19.370 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 0 Redis repository interfaces.
2025-07-13 01:37:20.088 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:37:20.091 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:37:20.093 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:37:20.102 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:37:20.103 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:37:20.104 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:37:20.157 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:37:20.158 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2028 ms
2025-07-13 01:37:20.398 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 01:37:20.512 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@27320f52
2025-07-13 01:37:20.514 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 01:37:20.550 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:37:20.641 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.049s)
2025-07-13 01:37:20.662 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:37:20.665 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:37:20.777 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:37:20.820 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 01:37:20.851 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:37:21.180 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:37:22.547 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:37:22.593 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:37:23.341 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 01:37:23.785 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:37:23.923 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:37:23.924 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:37:24.092 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:37:24.229 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:37:24.255 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:37:24.256 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:37:24.291 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:37:24.292 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:37:24.326 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:37:24.335 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:37:24.348 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:37:24.365 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:37:24.487 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:37:24.494 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:37:24.733 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:37:24.859 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:37:25.072 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:37:25.546 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:37:25.585 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:37:25.598 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:37:25.600 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:37:25.600 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7b495474]]
2025-07-13 01:37:25.601 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:37:25.614 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 8.199 seconds (process running for 9.078)
2025-07-13 01:37:25.642 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:37:25.656 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:37:25.668 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:37:25.682 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:37:25.694 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:37:25.707 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:37:25.718 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:37:25.744 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:37:27.087 [http-nio-8080-exec-4] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 01:37:27.088 [http-nio-8080-exec-4] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 01:37:27.091 [http-nio-8080-exec-4] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-07-13 01:37:27.308 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:37:27.311 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:37:27.314 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:37:27.335 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:37:27.336 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:37:27.336 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:37:27.337 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:37:27.338 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:37:27.339 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:37:27.344 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:37:27.353 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:37:27.357 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:37:27.357 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:37:27.364 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:37:27.365 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:37:27.959 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:37:27.961 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:37:28.007 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:37:28.011 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:37:28.011 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:37:28.012 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:37:28.013 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:37:28.013 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:37:28.013 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:37:28.045 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:37:28.049 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:37:28.058 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:37:28.063 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:37:28.064 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:37:28.064 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:37:28.069 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:37:28.069 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:37:28.548 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:37:28.549 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:37:28.549 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:37:28.564 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:37:28.573 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:37:28.573 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:37:28.574 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:37:28.574 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:37:28.579 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:37:28.580 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:37:28.582 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:37:28.582 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:37:28.582 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:37:28.582 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:37:28.583 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:37:28.604 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:37:28.605 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:37:28.605 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:37:28.951 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:37:28.976 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:37:29.390 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:37:30.402 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:37:30.405 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:37:30.435 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:37:30.437 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:37:30.438 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:37:30.438 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:37:30.439 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:37:30.439 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:37:30.439 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:37:30.461 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:37:30.464 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:37:30.470 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试
2025-07-13 01:37:30.473 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:37:30.474 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试, tagCount=0
2025-07-13 01:37:30.474 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:37:30.477 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:37:30.478 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试
2025-07-13 01:37:30.978 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:37:30.980 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:37:30.981 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:37:30.986 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:37:30.986 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:37:30.987 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:37:30.987 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:37:30.988 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:37:30.988 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:37:30.995 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:37:31.009 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:37:31.010 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:37:31.010 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:37:31.011 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:37:31.011 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:37:31.017 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:37:31.018 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:37:31.018 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:37:31.395 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:37:31.420 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:37:37.822 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 设置好友备注请求: userId=4, friendId=2, alias=测试001
2025-07-13 01:37:37.824 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 设置好友备注: userId=4, friendId=2, alias=测试001
2025-07-13 01:37:37.836 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功设置好友备注: userId=4, friendId=2, alias=测试001
2025-07-13 01:37:37.895 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 成功设置好友备注: userId=4, friendId=2, alias=测试001
2025-07-13 01:37:37.926 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:37:37.929 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:37:37.936 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:37:37.941 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:37:37.941 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:37:37.941 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:37:37.945 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:37:37.946 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:37:39.993 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:37:59.877 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:37:59.879 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:37:59.879 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:37:59.881 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:37:59.882 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:37:59.882 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:37:59.882 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:37:59.882 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:37:59.883 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:37:59.884 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:37:59.888 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:37:59.888 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:37:59.889 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:37:59.891 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:37:59.892 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:38:00.466 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:38:00.469 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:38:00.469 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:38:00.469 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:38:00.470 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:38:00.470 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:38:00.470 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:38:00.489 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:38:00.491 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:38:00.499 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:38:00.502 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:38:00.502 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:38:00.503 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:38:00.508 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:38:00.508 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:38:02.438 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:38:02.440 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:38:02.461 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:38:02.463 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:38:02.463 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:38:02.464 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:38:02.464 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:38:02.464 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:38:02.464 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:38:02.480 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:38:02.482 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:38:02.488 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:38:02.490 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:38:02.490 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:38:02.490 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:38:02.493 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:38:02.494 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:38:02.981 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:38:02.981 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:38:02.982 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:38:02.985 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:38:02.985 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:38:02.985 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:38:02.985 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:38:02.986 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:38:02.986 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:38:02.988 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:38:02.994 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:38:02.995 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:38:02.995 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:38:02.995 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:38:02.995 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:38:02.999 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:38:02.999 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:38:02.999 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:38:03.449 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:38:03.464 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:38:04.870 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:38:05.781 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:38:05.783 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:38:05.820 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:38:05.824 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:38:05.824 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:38:05.825 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:38:05.827 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:38:05.828 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:38:05.828 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:38:05.860 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:38:05.863 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:38:05.871 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:38:05.874 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:38:05.875 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:38:05.875 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:38:05.880 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:38:05.880 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:38:06.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:38:06.379 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:38:06.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:38:06.382 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:38:06.383 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:38:06.383 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:38:06.383 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:38:06.384 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:38:06.384 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:38:06.389 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:38:06.398 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:38:06.398 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:38:06.398 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:38:06.399 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:38:06.399 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:38:06.404 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:38:06.404 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:38:06.405 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:38:06.786 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:38:06.819 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:38:08.433 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:38:08.433 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:38:18.606 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:38:18.608 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:38:18.608 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:38:18.611 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:38:18.611 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:38:18.612 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:38:18.612 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:38:18.612 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:38:18.612 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:38:18.615 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:38:18.617 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:38:18.617 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:38:18.617 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:38:18.621 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:38:18.621 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:38:20.351 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:38:20.355 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:38:20.355 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:38:20.357 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:38:20.357 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:38:20.357 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:38:20.358 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:38:20.358 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:38:20.358 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:38:20.360 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:38:20.361 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:38:20.362 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:38:20.362 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:38:20.366 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:38:20.368 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:38:23.865 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:38:23.865 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:38:25.582 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 01:38:27.825 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:38:27.827 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:38:27.828 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:38:27.830 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:38:27.830 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:38:27.830 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:38:27.830 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:38:27.830 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:38:27.830 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:38:27.833 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:38:27.835 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:38:27.836 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:38:27.836 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:38:27.840 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:38:27.840 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:38:35.093 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:38:35.095 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:38:35.096 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:38:35.098 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:38:35.098 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:38:35.098 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:38:35.098 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:38:35.098 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:38:35.098 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:38:35.099 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:38:35.101 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:38:35.101 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:38:35.102 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:38:35.105 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:38:35.105 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:38:35.865 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:38:35.867 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:38:35.867 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:38:35.867 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:38:35.867 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:38:35.867 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:38:35.867 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:38:35.913 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:38:35.916 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:38:35.924 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:38:35.926 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:38:35.926 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:38:35.926 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:38:35.930 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:38:35.930 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:39:06.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:39:06.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:39:06.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:39:06.276 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:39:06.276 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:39:06.277 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:39:06.278 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:39:06.353 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:39:06.356 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:39:06.360 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:39:06.368 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:39:06.370 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:39:06.371 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:39:06.386 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:39:06.386 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:39:10.419 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:39:10.422 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:39:10.422 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:39:10.425 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:39:10.425 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:39:10.425 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:39:10.425 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:39:10.426 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:39:10.426 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:39:10.427 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:39:10.430 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:39:10.430 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:39:10.430 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:39:10.435 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:39:10.435 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:39:36.272 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:39:36.274 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:39:36.274 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:39:36.274 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:39:36.275 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:39:36.275 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:39:36.275 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:39:36.299 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:39:36.302 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:39:36.307 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:39:36.309 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:39:36.309 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:39:36.309 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:39:36.312 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:39:36.313 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:40:06.267 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:40:06.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:40:06.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:40:06.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:40:06.270 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:40:06.270 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:40:06.270 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:40:06.302 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:40:06.304 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:40:06.308 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:40:06.310 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:40:06.311 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:40:06.311 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:40:06.313 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:40:06.314 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:40:36.264 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:40:36.266 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:40:36.267 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:40:36.267 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:40:36.267 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:40:36.267 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:40:36.267 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:40:36.291 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:40:36.293 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:40:36.298 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:40:36.299 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:40:36.299 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:40:36.299 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:40:36.302 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:40:36.302 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:41:06.263 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:41:06.266 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:41:06.266 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:41:06.266 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:41:06.266 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:41:06.266 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:41:06.266 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:41:06.292 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:41:06.295 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:41:06.300 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:41:06.302 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:41:06.303 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:41:06.303 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:41:06.308 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:41:06.309 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:41:36.262 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:41:36.265 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:41:36.265 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:41:36.265 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:41:36.266 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:41:36.266 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:41:36.266 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:41:36.288 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:41:36.290 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:41:36.295 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:41:36.297 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:41:36.297 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:41:36.297 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:41:36.299 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:41:36.300 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:42:37.254 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:42:37.256 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:42:37.257 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:42:37.257 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:42:37.258 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:42:37.258 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:42:37.258 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:42:37.283 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:42:37.286 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:42:37.292 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:42:37.294 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:42:37.294 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:42:37.295 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:42:37.298 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:42:37.298 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:44:48.790 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 01:44:48.831 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10708 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:44:48.832 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:44:48.877 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 01:44:48.878 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 01:44:49.652 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:44:49.653 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:44:49.814 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 152 ms. Found 10 JPA repository interfaces.
2025-07-13 01:44:50.143 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:44:50.145 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:44:50.169 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:44:50.170 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:44:50.170 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:44:50.171 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:44:50.171 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:44:50.172 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:44:50.173 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:44:50.173 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:44:50.174 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:44:50.174 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:44:50.174 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2025-07-13 01:44:50.907 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:44:50.909 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:44:50.912 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:44:50.922 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:44:50.924 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:44:50.924 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:44:50.976 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:44:50.977 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2098 ms
2025-07-13 01:44:51.203 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 01:44:51.331 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@66fa3da8
2025-07-13 01:44:51.333 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 01:44:51.419 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:44:51.514 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.052s)
2025-07-13 01:44:51.536 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:44:51.540 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:44:51.623 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:44:51.661 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 01:44:51.696 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:44:51.964 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:44:53.558 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:44:53.627 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:44:54.766 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 01:44:55.446 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:44:55.668 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:44:55.668 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:44:55.869 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:44:56.008 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:44:56.038 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:44:56.038 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:44:56.088 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:44:56.089 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:44:56.143 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:44:56.152 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:44:56.161 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:44:56.173 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:44:56.323 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:44:56.332 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:44:56.534 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:44:56.689 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:44:56.933 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:44:57.568 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:44:57.629 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:44:57.647 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:44:57.649 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:44:57.649 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@6a7ed93f]]
2025-07-13 01:44:57.650 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:44:57.674 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 9.344 seconds (process running for 9.932)
2025-07-13 01:44:57.758 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:44:57.783 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:44:57.838 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:44:57.861 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:44:57.880 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:44:57.911 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:44:57.934 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:44:57.968 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:45:09.415 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 01:45:09.415 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 01:45:09.417 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 01:45:09.550 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:45:09.550 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:45:09.553 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:45:09.566 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:45:09.566 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:45:09.567 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:45:09.567 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:45:09.567 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:45:09.568 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:45:09.571 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:45:09.576 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:45:09.579 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:45:09.579 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:45:09.583 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:45:09.584 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:45:09.626 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:45:09.631 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:45:09.631 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:45:09.631 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:45:09.631 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:45:09.632 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:45:09.632 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:45:09.660 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:45:09.663 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:45:09.673 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:45:09.676 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:45:09.676 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:45:09.677 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:45:09.681 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:45:09.682 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:45:10.284 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:45:10.286 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:45:10.334 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:45:10.338 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:45:10.338 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:45:10.338 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:45:10.339 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:45:10.339 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:45:10.339 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:45:10.365 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:45:10.370 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:45:10.377 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:45:10.380 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:45:10.380 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:45:10.381 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:45:10.385 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:45:10.385 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:45:10.870 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:45:10.870 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:45:10.871 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:45:10.891 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:45:10.891 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:45:10.892 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:45:10.892 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:45:10.892 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:45:10.895 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:45:10.896 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:45:10.910 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:45:10.911 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:45:10.911 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:45:10.911 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:45:10.912 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:45:10.929 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:45:10.929 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:45:10.929 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:45:11.290 [http-nio-8080-exec-5] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:45:11.340 [http-nio-8080-exec-5] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:45:11.901 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:45:18.063 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:45:18.067 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:45:18.154 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:45:18.159 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:45:18.160 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:45:18.161 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:45:18.162 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:45:18.162 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:45:18.163 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:45:18.201 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:45:18.205 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:45:18.218 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:45:18.225 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:45:18.225 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:45:18.226 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:45:18.232 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:45:18.232 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:45:18.720 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:45:18.721 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:45:18.721 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:45:18.731 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:45:18.732 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:45:18.733 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:45:18.733 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:45:18.734 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:45:18.734 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:45:18.738 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:45:18.755 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:45:18.755 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:45:18.756 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:45:18.756 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:45:18.756 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:45:18.765 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:45:18.766 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:45:18.766 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:45:19.052 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:45:19.092 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:45:22.219 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:45:24.174 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:45:24.188 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:45:24.315 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:45:24.322 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:45:24.324 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:45:24.327 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:45:24.330 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:45:24.330 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:45:24.332 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:45:24.403 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:45:24.417 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:45:24.439 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:45:24.452 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:45:24.455 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:45:24.457 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:45:24.473 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:45:24.478 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:45:24.902 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:45:24.904 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:45:24.905 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:45:24.915 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:45:24.916 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:45:24.917 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:45:24.917 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:45:24.918 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:45:24.920 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:45:24.921 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:45:24.949 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:45:24.950 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:45:24.951 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:45:24.953 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:45:24.953 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:45:24.968 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:45:24.970 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:45:24.971 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:45:25.146 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:45:25.198 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:45:36.236 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:45:55.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:45:55.273 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:45:55.273 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:45:55.273 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:45:55.274 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:45:55.274 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:45:55.274 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:45:55.306 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:45:55.309 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:45:55.317 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:45:55.322 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:45:55.322 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:45:55.323 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:45:55.328 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:45:55.328 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:45:57.616 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 01:45:58.824 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:45:58.828 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:45:58.828 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:45:58.833 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:45:58.833 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:45:58.834 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:45:58.834 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:45:58.835 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:45:58.835 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:45:58.838 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:45:58.842 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:45:58.842 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:45:58.843 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:45:58.848 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:45:58.848 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:46:03.721 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:46:03.724 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:46:03.760 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:46:03.762 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:46:03.763 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:46:03.763 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:46:03.763 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:46:03.764 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:46:03.764 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:46:03.791 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:46:03.794 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:46:03.802 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:46:03.805 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:46:03.805 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:46:03.806 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:46:03.809 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:46:03.809 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:46:04.294 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:46:04.295 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:46:04.295 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:46:04.299 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:46:04.299 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:46:04.300 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:46:04.300 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:46:04.300 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:46:04.300 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:46:04.302 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:46:04.312 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:46:04.312 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:46:04.312 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:46:04.312 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:46:04.313 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:46:04.317 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:46:04.317 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:46:04.318 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:46:04.721 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:46:04.748 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:46:06.174 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取收到的好友请求列表: userId=4, status=null
2025-07-13 01:46:06.277 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取发送的好友请求列表: userId=4, status=null
2025-07-13 01:46:06.520 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:46:06.551 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:46:10.115 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:46:10.118 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:46:11.984 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:46:16.301 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:46:16.304 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:46:16.313 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:46:16.316 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:46:16.316 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:46:16.316 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:46:16.320 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:46:16.321 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:46:17.833 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:46:17.836 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:46:17.909 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:46:17.913 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:46:17.913 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:46:17.913 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:46:17.914 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:46:17.914 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:46:17.914 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:46:17.938 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:46:17.943 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:46:17.950 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:46:17.952 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:46:17.953 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:46:17.953 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:46:17.955 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:46:17.956 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:46:18.441 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:46:18.441 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:46:18.442 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:46:18.446 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:46:18.447 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:46:18.447 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:46:18.448 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:46:18.448 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:46:18.448 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:46:18.451 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:46:18.460 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:46:18.460 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:46:18.460 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:46:18.461 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:46:18.461 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:46:18.466 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:46:18.467 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:46:18.468 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:46:18.822 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:46:18.847 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:46:37.454 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:46:37.456 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:46:37.456 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:46:37.458 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:46:37.458 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:46:37.459 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:46:37.459 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:46:37.459 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:46:37.459 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:46:37.460 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:46:37.462 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:46:37.463 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:46:37.463 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:46:37.465 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:46:37.466 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:46:47.716 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:46:47.958 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:46:47.963 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:46:47.963 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:46:47.964 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:46:47.965 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:46:47.965 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:46:47.966 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:46:48.002 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:46:48.006 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:46:48.016 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:46:48.019 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:46:48.019 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:46:48.020 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:46:48.025 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:46:48.025 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:46:56.430 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:46:56.431 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:46:56.468 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:46:56.470 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:46:56.471 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:46:56.472 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:46:56.472 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:46:56.472 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:46:56.472 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:46:56.509 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:46:56.512 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:46:56.519 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:46:56.522 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:46:56.522 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:46:56.523 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:46:56.527 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:46:56.527 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:46:57.015 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:46:57.015 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:46:57.015 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:46:57.020 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:46:57.021 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:46:57.021 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:46:57.021 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:46:57.021 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:46:57.022 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:46:57.027 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:46:57.040 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:46:57.041 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:46:57.041 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:46:57.041 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:46:57.041 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:46:57.047 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:46:57.048 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:46:57.048 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:46:57.423 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:46:57.451 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:47:08.504 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:47:27.263 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:47:27.266 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:47:27.266 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:47:27.266 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:47:27.266 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:47:27.266 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:47:27.267 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:47:27.292 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:47:27.294 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:47:27.299 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:47:27.302 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:47:27.302 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:47:27.302 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:47:27.306 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:47:27.306 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:47:57.276 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:47:57.278 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:47:57.278 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:47:57.279 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:47:57.279 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:47:57.279 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:47:57.279 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:47:57.302 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:47:57.304 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:47:57.310 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:47:57.312 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:47:57.312 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:47:57.312 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:47:57.315 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:47:57.315 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:48:27.267 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:48:27.269 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:48:27.269 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:48:27.269 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:48:27.270 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:48:27.270 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:48:27.270 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:48:27.292 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:48:27.294 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:48:27.299 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:48:27.302 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:48:27.302 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:48:27.303 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:48:27.306 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:48:27.306 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:49:17.098 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 01:49:17.174 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 14564 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:49:17.178 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:49:17.251 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 01:49:17.253 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 01:49:18.140 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:49:18.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:49:18.288 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 140 ms. Found 10 JPA repository interfaces.
2025-07-13 01:49:18.650 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:49:18.652 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:49:18.677 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:49:18.678 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:49:18.678 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:49:18.679 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:49:18.679 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:49:18.680 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:49:18.680 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:49:18.681 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:49:18.682 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:49:18.682 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:49:18.683 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 0 Redis repository interfaces.
2025-07-13 01:49:19.431 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:49:19.434 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:49:19.437 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:49:19.445 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:49:19.448 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:49:19.449 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:49:19.501 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:49:19.503 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2248 ms
2025-07-13 01:49:19.754 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 01:49:19.891 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1ccc382e
2025-07-13 01:49:19.893 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 01:49:19.941 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:49:20.017 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.045s)
2025-07-13 01:49:20.041 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:49:20.046 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:49:20.141 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:49:20.189 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 01:49:20.221 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:49:20.447 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:49:21.768 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:49:21.841 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:49:23.424 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 01:49:24.387 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:49:24.804 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:49:24.805 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:49:25.158 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:49:25.542 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:49:25.598 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:49:25.599 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:49:25.676 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:49:25.677 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:49:25.743 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:49:25.762 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:49:25.781 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:49:25.798 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:49:26.025 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:49:26.043 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:49:26.497 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:49:26.777 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:49:27.315 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:49:28.579 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:49:28.685 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:49:28.724 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:49:28.734 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:49:28.738 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@388e045e]]
2025-07-13 01:49:28.742 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:49:28.903 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 12.431 seconds (process running for 12.987)
2025-07-13 01:49:29.043 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:49:29.056 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 01:49:29.056 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 01:49:29.061 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:49:29.062 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 5 ms
2025-07-13 01:49:29.076 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:49:29.092 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:49:29.109 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:49:29.125 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:49:29.143 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:49:29.195 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:49:29.314 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:49:29.331 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:49:29.331 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:49:29.332 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:49:29.332 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:49:29.332 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:49:29.333 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:49:29.436 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:49:29.442 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:49:29.465 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:49:29.469 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:49:29.471 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:49:29.472 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:49:29.476 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:49:29.476 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:49:36.665 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:49:36.680 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:49:36.686 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:49:36.692 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:49:36.694 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:49:36.697 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:49:36.703 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:49:36.706 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:49:36.706 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:49:36.711 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:49:36.714 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:49:36.715 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:49:36.717 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:49:36.724 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:49:36.725 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:49:57.397 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:49:57.401 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:49:57.401 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:49:57.403 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:49:57.404 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:49:57.404 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:49:57.405 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:49:57.463 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:49:57.468 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:49:57.485 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:49:57.491 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:49:57.491 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:49:57.492 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:49:57.498 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:49:57.499 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:50:07.711 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:50:07.719 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:50:07.720 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:50:07.727 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:50:07.728 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:50:07.729 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:50:07.729 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:50:07.730 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:50:07.731 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:50:07.735 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:50:07.742 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:50:07.742 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:50:07.743 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:50:07.756 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:50:07.757 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:50:10.061 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:50:10.064 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:50:10.064 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:50:10.068 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:50:10.068 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:50:10.069 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:50:10.073 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:50:10.097 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:50:10.097 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:50:10.097 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:50:10.101 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:50:10.101 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:50:10.102 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:50:10.105 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:50:10.105 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:50:12.906 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:50:12.914 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:50:13.089 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:50:13.095 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:50:13.099 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:50:13.102 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:50:13.106 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:50:13.109 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:50:13.116 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:50:13.195 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:50:13.203 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:50:13.218 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:50:13.225 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:50:13.227 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:50:13.227 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:50:13.235 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:50:13.235 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:50:13.724 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:50:13.729 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:50:13.742 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:50:13.783 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:50:13.793 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:50:13.800 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:50:13.802 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:50:13.815 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:50:13.821 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:50:13.826 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:50:13.854 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:50:13.855 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:50:13.857 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:50:13.858 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:50:13.859 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:50:13.880 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:50:13.881 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:50:13.882 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:50:13.917 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:50:13.971 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:50:14.979 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:50:18.009 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:50:18.011 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:50:18.050 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:50:18.054 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:50:18.056 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:50:18.056 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:50:18.057 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:50:18.057 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:50:18.057 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:50:18.084 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:50:18.086 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:50:18.096 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:50:18.100 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:50:18.100 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:50:18.101 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:50:18.105 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:50:18.105 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:50:18.593 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:50:18.594 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:50:18.594 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:50:18.598 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:50:18.599 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:50:18.599 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:50:18.599 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:50:18.600 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:50:18.600 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:50:18.604 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:50:18.617 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:50:18.617 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:50:18.618 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:50:18.618 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:50:18.618 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:50:18.623 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:50:18.624 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:50:18.624 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:50:19.013 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:50:19.053 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:50:21.037 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:50:21.038 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:50:27.577 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:50:28.652 [MessageBroker-4] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 01:50:48.259 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:50:48.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:50:48.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:50:48.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:50:48.263 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:50:48.263 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:50:48.263 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:50:48.287 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:50:48.290 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:50:48.296 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:50:48.299 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:50:48.299 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:50:48.300 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:50:48.305 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:50:48.306 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:51:05.180 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:51:05.184 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:51:05.184 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:51:05.184 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:51:05.185 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:51:05.185 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:51:05.186 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:51:05.200 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:51:05.204 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:51:05.214 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:51:05.218 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:51:05.218 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:51:05.219 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:51:05.223 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:51:05.223 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:51:08.411 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:51:08.415 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:51:08.415 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:51:08.419 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:51:08.419 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:51:08.420 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:51:08.420 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:51:08.420 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:51:08.420 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:51:08.423 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:51:08.428 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:51:08.429 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:51:08.431 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:51:08.437 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:51:08.438 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:51:14.536 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:51:14.540 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:51:14.540 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:51:14.543 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:51:14.543 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:51:14.544 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:51:14.545 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:51:14.545 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:51:14.545 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:51:14.549 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:51:14.552 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:51:14.553 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:51:14.553 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:51:14.561 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:51:14.561 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:51:18.087 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:51:18.090 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:51:18.090 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:51:18.091 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:51:18.091 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:51:18.091 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:51:18.091 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:51:18.112 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:51:18.116 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:51:18.124 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:51:18.128 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:51:18.129 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:51:18.129 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:51:18.132 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:51:18.132 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:51:26.114 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:51:26.116 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:51:26.141 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:51:26.143 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:51:26.143 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:51:26.143 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:51:26.143 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:51:26.143 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:51:26.144 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:51:26.163 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:51:26.165 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:51:26.169 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:51:26.172 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:51:26.172 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:51:26.172 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:51:26.175 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:51:26.175 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:51:26.661 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:51:26.662 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:51:26.662 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:51:26.665 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:51:26.665 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:51:26.665 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:51:26.665 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:51:26.665 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:51:26.665 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:51:26.668 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:51:26.675 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:51:26.676 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:51:26.676 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:51:26.676 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:51:26.676 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:51:26.679 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:51:26.680 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:51:26.680 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:51:27.123 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:51:27.146 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:51:56.256 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:51:56.258 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:51:56.258 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:51:56.258 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:51:56.259 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:51:56.259 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:51:56.259 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:51:56.280 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:51:56.283 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:51:56.290 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:51:56.292 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:51:56.293 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:51:56.293 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:51:56.296 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:51:56.296 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:52:26.266 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:52:26.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:52:26.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:52:26.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:52:26.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:52:26.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:52:26.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:52:26.289 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:52:26.292 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:52:26.298 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:52:26.300 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:52:26.300 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:52:26.300 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:52:26.303 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:52:26.303 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:52:56.265 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:52:56.268 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:52:56.268 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:52:56.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:52:56.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:52:56.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:52:56.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:52:56.299 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:52:56.302 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:52:56.309 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:52:56.311 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:52:56.313 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:52:56.313 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:52:56.316 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:52:56.317 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:53:34.748 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 01:53:34.785 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 15860 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:53:34.786 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:53:34.821 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 01:53:34.821 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 01:53:35.483 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:53:35.484 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:53:35.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 147 ms. Found 10 JPA repository interfaces.
2025-07-13 01:53:35.999 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:53:36.000 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:53:36.030 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:53:36.030 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:53:36.030 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:53:36.031 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:53:36.032 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:53:36.033 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:53:36.033 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:53:36.034 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:53:36.035 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:53:36.036 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:53:36.037 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 29 ms. Found 0 Redis repository interfaces.
2025-07-13 01:53:37.044 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:53:37.047 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:53:37.052 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:53:37.064 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:53:37.066 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:53:37.067 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:53:37.151 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:53:37.153 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2330 ms
2025-07-13 01:53:37.563 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 01:53:37.780 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@27320f52
2025-07-13 01:53:37.782 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 01:53:37.861 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:53:37.963 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.064s)
2025-07-13 01:53:37.996 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:53:38.001 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:53:38.116 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:53:38.172 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 01:53:38.206 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:53:38.576 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:53:39.577 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:53:39.619 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:53:40.433 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 01:53:40.909 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:53:41.053 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:53:41.054 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:53:41.238 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:53:41.378 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:53:41.404 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:53:41.405 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:53:41.440 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:53:41.440 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:53:41.473 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:53:41.483 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:53:41.492 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:53:41.505 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:53:41.639 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:53:41.646 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:53:41.921 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:53:42.097 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:53:42.449 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:53:43.212 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:53:43.327 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:53:43.384 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:53:43.389 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:53:43.419 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7136f2f3]]
2025-07-13 01:53:43.420 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:53:43.488 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 9.081 seconds (process running for 9.435)
2025-07-13 01:53:43.570 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:53:43.599 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:53:43.629 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:53:43.652 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:53:43.677 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:53:43.698 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:53:43.723 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:53:43.782 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:53:51.912 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 01:53:51.913 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 01:53:51.915 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-13 01:53:56.351 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:53:56.364 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:53:56.365 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:53:56.365 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:53:56.366 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:53:56.366 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:53:56.367 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:53:56.433 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:53:56.438 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:53:56.461 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:53:56.466 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:53:56.469 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:53:56.469 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:53:56.476 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:53:56.477 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:53:56.596 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:53:56.601 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:53:56.607 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:53:56.613 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:53:56.615 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:53:56.615 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:53:56.616 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:53:56.619 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:53:56.939 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:53:56.939 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:53:56.940 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:53:56.940 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:53:56.940 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:53:56.948 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:53:56.949 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:53:57.487 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:53:57.490 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:53:57.535 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:53:57.539 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:53:57.540 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:53:57.541 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:53:57.541 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:53:57.542 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:53:57.542 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:53:57.574 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:53:57.577 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:53:57.587 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:53:57.591 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:53:57.592 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:53:57.593 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:53:57.598 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:53:57.598 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:53:58.087 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:53:58.087 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:53:58.089 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:53:58.112 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:53:58.113 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:53:58.113 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:53:58.114 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:53:58.117 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:53:58.117 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:53:58.118 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:53:58.136 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:53:58.136 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:53:58.137 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:53:58.137 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:53:58.137 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:53:58.157 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:53:58.158 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:53:58.159 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:53:58.500 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:53:58.571 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:53:58.776 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:54:03.007 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:54:03.009 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 01:54:06.390 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:54:24.267 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:54:24.272 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:54:24.272 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:54:24.274 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:54:24.274 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:54:24.274 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:54:24.275 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:54:27.588 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:54:27.593 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:54:27.593 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:54:27.593 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:54:27.593 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:54:27.594 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:54:27.594 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:54:30.328 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:54:30.332 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:54:30.416 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:54:30.422 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:54:30.423 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:54:30.423 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:54:30.424 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:54:30.426 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:54:30.430 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:54:30.481 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:54:30.486 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:54:30.500 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:54:30.506 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:54:30.506 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:54:30.506 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:54:30.514 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:54:30.515 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:54:30.970 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:54:30.971 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:54:30.971 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:54:30.976 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:54:30.977 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:54:30.977 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:54:30.977 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:54:30.977 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:54:30.978 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:54:30.982 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:54:30.995 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:54:30.995 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:54:30.995 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:54:30.996 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:54:30.996 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:54:31.002 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:54:31.002 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:54:31.002 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:54:31.300 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:54:31.332 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:54:32.696 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 01:54:43.264 [MessageBroker-4] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 01:54:47.931 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:54:47.937 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:54:47.937 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:54:47.938 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:54:47.938 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:54:47.938 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:54:47.939 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:55:01.285 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:55:01.291 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:55:01.291 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:55:01.292 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:55:01.293 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:55:01.293 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:55:01.294 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:55:31.306 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:55:31.311 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:55:31.312 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:55:31.312 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:55:31.313 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:55:31.313 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:55:31.314 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:56:01.315 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:56:01.325 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:56:01.325 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:56:01.326 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:56:01.327 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:56:01.327 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:56:01.327 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:59:18.941 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 01:59:18.993 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 30136 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 01:59:18.994 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 01:59:19.045 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 01:59:19.046 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 01:59:20.052 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:59:20.052 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 01:59:20.244 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 183 ms. Found 10 JPA repository interfaces.
2025-07-13 01:59:20.848 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 01:59:20.851 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 01:59:20.898 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:59:20.900 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:59:20.901 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:59:20.903 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:59:20.903 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:59:20.906 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:59:20.907 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:59:20.908 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:59:20.909 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:59:20.910 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 01:59:20.911 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 49 ms. Found 0 Redis repository interfaces.
2025-07-13 01:59:22.291 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 01:59:22.295 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 01:59:22.299 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 01:59:22.316 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 01:59:22.317 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 01:59:22.318 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 01:59:22.389 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 01:59:22.391 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3343 ms
2025-07-13 01:59:22.707 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 01:59:22.908 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1ccc382e
2025-07-13 01:59:22.910 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 01:59:22.986 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 01:59:23.099 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.063s)
2025-07-13 01:59:23.132 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 01:59:23.137 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 01:59:23.244 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 01:59:23.299 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 01:59:23.331 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 01:59:23.575 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 01:59:25.020 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 01:59:25.069 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 01:59:25.823 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 01:59:26.212 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 01:59:26.350 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 01:59:26.350 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 01:59:26.517 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 01:59:26.678 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 01:59:26.703 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 01:59:26.703 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 01:59:26.742 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 01:59:26.743 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:59:26.779 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:59:26.790 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:59:26.799 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 01:59:26.809 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 01:59:26.918 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 01:59:26.928 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 01:59:27.157 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 01:59:27.309 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 01:59:27.595 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 01:59:28.219 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 01:59:28.274 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 01:59:28.292 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 01:59:28.294 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 01:59:28.295 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@493db20e]]
2025-07-13 01:59:28.296 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 01:59:28.323 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 9.748 seconds (process running for 10.099)
2025-07-13 01:59:28.424 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 01:59:28.448 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 01:59:28.483 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 01:59:28.502 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 01:59:28.533 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 01:59:28.548 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 01:59:28.563 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 01:59:28.606 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 01:59:43.236 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 01:59:43.237 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 01:59:43.242 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-07-13 01:59:43.496 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:59:43.516 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:59:43.516 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:59:43.517 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:59:43.517 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:59:43.518 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:59:43.518 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:59:43.613 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:59:43.618 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:59:43.619 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:59:43.620 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:59:43.621 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:59:43.621 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:59:43.621 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:59:44.172 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 01:59:44.175 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 01:59:44.250 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 01:59:44.256 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 01:59:44.256 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 01:59:44.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 01:59:44.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 01:59:44.258 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 01:59:44.258 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 01:59:44.369 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 01:59:44.376 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 01:59:44.413 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 01:59:44.420 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 01:59:44.422 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 01:59:44.423 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 01:59:44.432 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 01:59:44.433 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 01:59:44.854 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:59:44.856 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 01:59:44.866 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 01:59:44.900 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 01:59:44.901 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 01:59:44.902 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 01:59:44.903 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 01:59:44.905 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 01:59:44.909 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 01:59:44.913 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 01:59:44.939 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 01:59:44.940 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:59:44.941 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:59:44.941 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 01:59:44.943 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 01:59:44.968 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 01:59:44.969 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 01:59:44.969 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 01:59:45.072 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 01:59:45.130 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 01:59:46.250 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:00:00.013 [MessageBroker-6] INFO  c.i.i.u.s.DataConsistencyService - 开始执行数据一致性检查
2025-07-13 02:00:00.013 [MessageBroker-1] INFO  c.i.i.u.t.DataConsistencyMonitorTask - 开始执行每天数据一致性检查和自动修复
2025-07-13 02:00:00.013 [MessageBroker-4] INFO  c.i.i.user.task.FileCleanupTask - 开始执行定时文件清理任务，清理30天前的文件
2025-07-13 02:00:00.018 [MessageBroker-1] INFO  c.i.i.u.s.DataConsistencyService - 开始执行数据一致性检查
2025-07-13 02:00:00.025 [MessageBroker-2] INFO  c.i.i.u.t.TemporaryFileCleanupTask - 开始执行过期临时文件清理任务
2025-07-13 02:00:00.029 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:00:00.029 [MessageBroker-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始清理30天前的已删除文件
2025-07-13 02:00:00.039 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:00:00.060 [MessageBroker-2] INFO  c.i.i.u.t.TemporaryFileCleanupTask - 没有发现过期的临时文件
2025-07-13 02:00:00.146 [MessageBroker-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 清理完成，MinIO删除: 0个文件，数据库删除: 0条记录
2025-07-13 02:00:00.189 [MessageBroker-4] INFO  c.i.i.user.task.FileCleanupTask - 定时文件清理任务完成，清理了 0 个过期文件
2025-07-13 02:00:00.222 [MessageBroker-1] INFO  c.i.i.u.s.DataConsistencyService - 数据一致性检查完成，发现 0 个不一致项
2025-07-13 02:00:00.222 [MessageBroker-6] INFO  c.i.i.u.s.DataConsistencyService - 数据一致性检查完成，发现 0 个不一致项
2025-07-13 02:00:00.223 [MessageBroker-1] INFO  c.i.i.u.t.DataConsistencyMonitorTask - 每天数据一致性检查通过，无需修复
2025-07-13 02:00:00.224 [MessageBroker-1] INFO  c.i.i.u.t.DataConsistencyMonitorTask - 每天数据一致性检查和自动修复完成
2025-07-13 02:00:09.216 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:00:09.220 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:00:09.264 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:00:09.267 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:00:09.267 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:00:09.267 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:00:09.267 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:00:09.268 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:00:09.268 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:00:09.297 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:00:09.301 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:00:09.310 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:00:09.314 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:00:09.314 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:00:09.315 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:00:09.320 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:00:09.320 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:00:09.810 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:00:09.810 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:00:09.810 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:00:09.817 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:00:09.817 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:00:09.817 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:00:09.817 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:00:09.818 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:00:09.818 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:00:09.822 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:00:09.832 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:00:09.832 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:00:09.833 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:00:09.833 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:00:09.833 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:00:09.839 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:00:09.840 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:00:09.840 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:00:10.223 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:00:10.256 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:00:14.740 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:00:14.740 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:00:26.967 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:00:26.973 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:00:26.973 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:00:26.980 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:00:26.981 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:00:26.981 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:00:26.982 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:00:26.982 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:00:26.983 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:00:26.986 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:00:26.990 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:00:26.990 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:00:26.991 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:00:26.994 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:00:26.994 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:00:28.276 [MessageBroker-7] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 15, active threads = 1, queued tasks = 8, completed tasks = 6]
2025-07-13 02:00:40.255 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:00:40.259 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:00:40.259 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:00:40.260 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:00:40.260 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:00:40.260 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:00:40.260 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:00:40.281 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:00:40.283 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:00:40.293 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:00:40.297 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:00:40.297 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:00:40.297 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:00:40.301 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:00:40.301 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:01:10.254 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:01:10.256 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:01:10.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:01:10.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:01:10.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:01:10.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:01:10.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:01:10.275 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:01:10.277 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:01:10.283 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:01:10.287 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:01:10.287 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:01:10.289 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:01:10.292 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:01:10.292 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:01:40.260 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:01:40.263 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:01:40.263 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:01:40.263 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:01:40.263 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:01:40.264 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:01:40.264 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:01:40.284 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:01:40.287 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:01:40.294 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:01:40.298 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:01:40.298 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:01:40.298 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:01:40.303 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:01:40.303 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:02:10.272 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:02:10.277 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:02:10.277 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:02:10.277 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:02:10.278 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:02:10.278 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:02:10.278 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:02:10.310 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:02:10.313 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:02:10.320 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:02:10.322 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:02:10.323 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:02:10.323 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:02:10.326 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:02:10.327 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:02:40.262 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:02:40.264 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:02:40.264 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:02:40.264 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:02:40.265 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:02:40.265 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:02:40.265 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:02:40.284 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:02:40.287 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:02:40.294 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:02:40.296 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:02:40.296 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:02:40.296 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:02:40.298 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:02:40.299 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:03:10.268 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:03:10.270 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:03:10.270 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:03:10.271 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:03:10.271 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:03:10.271 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:03:10.271 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:03:10.291 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:03:10.294 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:03:10.300 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:03:10.302 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:03:10.302 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:03:10.302 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:03:10.305 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:03:10.306 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:03:40.259 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:03:40.260 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:03:40.260 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:03:40.260 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:03:40.261 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:03:40.261 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:03:40.261 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:03:40.277 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:03:40.280 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:03:40.285 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:03:40.288 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:03:40.288 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:03:40.288 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:03:40.291 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:03:40.291 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:03:57.793 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 02:03:57.793 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@493db20e]]
2025-07-13 02:03:57.793 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 02:03:58.112 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 02:03:58.114 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 02:03:58.119 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 02:04:17.464 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 02:04:17.503 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 14248 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 02:04:17.504 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 02:04:17.543 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 02:04:17.543 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 02:04:18.203 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 02:04:18.203 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 02:04:18.326 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 117 ms. Found 10 JPA repository interfaces.
2025-07-13 02:04:18.630 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 02:04:18.632 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 02:04:18.656 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:04:18.657 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:04:18.657 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:04:18.658 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:04:18.658 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:04:18.659 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:04:18.659 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:04:18.659 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:04:18.660 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:04:18.660 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:04:18.660 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
2025-07-13 02:04:19.591 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 02:04:19.595 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 02:04:19.599 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 02:04:19.611 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 02:04:19.614 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 02:04:19.615 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 02:04:19.689 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 02:04:19.691 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2147 ms
2025-07-13 02:04:20.127 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 02:04:20.317 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@36fecfd8
2025-07-13 02:04:20.320 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 02:04:20.405 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 02:04:20.512 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.059s)
2025-07-13 02:04:20.542 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 02:04:20.547 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 02:04:20.648 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 02:04:20.693 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 02:04:20.722 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 02:04:20.948 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 02:04:21.902 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 02:04:21.940 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 02:04:22.594 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 02:04:23.011 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 02:04:23.161 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 02:04:23.161 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 02:04:23.340 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 02:04:23.475 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 02:04:23.501 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 02:04:23.501 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 02:04:23.534 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 02:04:23.535 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 02:04:23.569 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 02:04:23.577 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 02:04:23.586 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 02:04:23.595 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 02:04:23.687 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 02:04:23.693 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 02:04:23.866 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 02:04:23.986 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 02:04:24.190 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 02:04:24.679 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 02:04:24.726 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 02:04:24.760 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 02:04:24.762 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 02:04:24.763 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@6b9b1826]]
2025-07-13 02:04:24.764 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 02:04:24.835 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 7.716 seconds (process running for 8.074)
2025-07-13 02:04:24.930 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 02:04:24.971 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 02:04:24.993 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 02:04:25.016 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 02:04:25.042 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 02:04:25.067 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 02:04:25.088 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 02:04:25.145 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 02:04:28.247 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 02:04:28.247 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 02:04:28.249 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 02:04:28.357 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:04:28.357 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:04:28.359 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:04:28.368 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:04:28.368 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:04:28.368 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:04:28.369 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:04:28.369 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:04:28.369 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:04:28.373 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:04:28.377 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:04:28.378 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:04:28.378 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:04:28.382 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:04:28.382 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:04:28.413 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:04:28.417 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:04:28.417 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:04:28.417 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:04:28.417 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:04:28.417 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:04:28.418 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:04:28.439 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:04:28.441 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:04:28.448 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:04:28.451 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:04:28.451 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:04:28.451 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:04:28.454 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:04:28.454 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:04:29.260 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:04:29.262 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:04:29.295 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:04:29.297 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:04:29.298 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:04:29.299 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:04:29.299 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:04:29.299 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:04:29.300 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:04:29.321 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:04:29.325 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:04:29.331 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:04:29.334 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:04:29.334 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:04:29.334 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:04:29.338 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:04:29.338 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:04:29.828 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:04:29.832 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:04:29.832 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:04:29.844 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:04:29.845 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:04:29.845 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:04:29.845 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:04:29.846 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:04:29.846 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:04:29.850 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:04:29.862 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:04:29.863 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:04:29.863 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:04:29.863 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:04:29.863 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:04:29.872 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:04:29.872 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:04:29.872 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:04:30.253 [http-nio-8080-exec-5] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:04:30.277 [http-nio-8080-exec-5] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:04:34.402 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:04:34.402 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:04:47.428 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:04:47.428 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:05:00.277 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:05:00.280 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:05:00.280 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:05:00.281 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:05:00.281 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:05:00.282 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:05:00.282 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:05:00.311 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:05:00.314 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:05:00.321 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:05:00.324 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:05:00.325 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:05:00.325 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:05:00.329 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:05:00.330 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:05:02.420 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:05:02.424 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:05:02.425 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:05:02.428 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:05:02.428 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:05:02.429 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:05:02.429 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:05:02.429 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:05:02.430 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:05:02.432 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:05:02.435 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:05:02.435 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:05:02.436 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:05:02.440 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:05:02.441 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:05:09.031 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:05:09.031 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:05:24.713 [MessageBroker-4] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 02:05:30.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:05:30.276 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:05:30.276 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:05:30.276 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:05:30.277 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:05:30.277 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:05:30.278 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:05:30.324 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:05:30.328 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:05:30.340 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:05:30.344 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:05:30.345 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:05:30.345 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:05:30.352 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:05:30.352 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:06:00.270 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:06:00.273 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:06:00.274 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:06:00.274 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:06:00.274 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:06:00.274 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:06:00.274 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:06:00.298 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:06:00.301 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:06:00.308 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:06:00.310 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:06:00.310 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:06:00.310 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:06:00.313 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:06:00.313 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:06:30.273 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:06:30.279 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:06:30.279 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:06:30.280 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:06:30.280 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:06:30.280 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:06:30.280 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:06:30.311 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:06:30.313 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:06:30.318 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:06:30.320 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:06:30.320 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:06:30.320 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:06:30.323 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:06:30.323 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:07:00.266 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:07:00.269 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:07:00.269 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:07:00.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:07:00.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:07:00.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:07:00.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:07:00.297 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:07:00.301 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:07:00.307 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:07:00.309 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:07:00.309 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:07:00.309 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:07:00.314 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:07:00.314 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:07:30.267 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:07:30.269 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:07:30.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:07:30.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:07:30.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:07:30.271 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:07:30.271 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:07:30.294 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:07:30.296 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:07:30.300 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:07:30.302 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:07:30.302 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:07:30.302 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:07:30.305 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:07:30.305 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:08:00.267 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:08:00.269 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:08:00.270 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:08:00.270 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:08:00.270 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:08:00.270 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:08:00.270 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:08:00.293 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:08:00.296 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:08:00.300 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:08:00.302 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:08:00.302 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:08:00.302 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:08:00.305 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:08:00.305 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:08:52.275 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:08:52.278 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:08:52.278 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:08:52.278 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:08:52.278 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:08:52.278 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:08:52.279 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:08:52.310 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:08:52.312 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:08:52.317 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:08:52.319 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:08:52.320 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:08:52.320 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:08:52.322 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:08:52.323 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:09:52.261 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:09:52.263 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:09:52.263 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:09:52.263 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:09:52.263 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:09:52.263 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:09:52.263 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:09:52.289 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:09:52.291 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:09:52.296 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:09:52.298 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:09:52.299 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:09:52.299 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:09:52.302 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:09:52.302 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:16:20.931 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:16:20.938 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:16:20.938 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:16:20.939 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:16:20.939 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:16:20.939 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:16:20.939 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:16:21.476 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:16:21.479 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:16:21.487 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:16:21.490 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:16:21.490 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:16:21.490 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:16:21.495 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:16:21.496 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:16:39.503 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:16:39.506 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:16:39.506 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:16:39.509 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:16:39.509 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:16:39.509 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:16:39.509 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:16:39.509 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:16:39.510 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:16:39.511 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:16:39.513 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:16:39.514 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:16:39.514 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:16:39.518 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:16:39.518 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:16:39.530 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:16:39.533 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:16:39.533 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:16:39.533 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:16:39.534 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:16:39.534 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:16:39.534 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:16:39.556 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:16:39.560 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:16:39.567 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:16:39.569 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:16:39.569 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:16:39.569 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:16:39.572 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:16:39.572 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:16:42.508 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:16:42.508 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:16:44.234 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:16:57.754 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:16:57.755 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:16:57.756 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:16:57.758 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:16:57.758 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:16:57.758 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:16:57.758 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:16:57.758 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:16:57.758 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:16:57.760 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:16:57.761 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:16:57.761 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:16:57.761 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:16:57.765 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:16:57.765 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:16:59.330 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:16:59.332 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:16:59.332 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:16:59.333 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:16:59.333 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:16:59.333 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:16:59.333 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:16:59.349 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:16:59.352 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:16:59.357 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:16:59.359 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:16:59.359 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:16:59.359 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:16:59.362 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:16:59.362 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:16:59.523 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:16:59.523 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:17:30.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:17:30.272 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:17:30.272 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:17:30.272 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:17:30.272 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:17:30.273 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:17:30.273 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:17:30.292 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:17:30.294 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:17:30.299 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:17:30.301 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:17:30.301 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:17:30.301 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:17:30.304 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:17:30.304 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:18:31.265 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:18:31.267 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:18:31.267 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:18:31.267 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:18:31.268 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:18:31.268 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:18:31.268 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:18:31.286 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:18:31.288 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:18:31.294 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:18:31.296 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:18:31.296 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:18:31.296 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:18:31.299 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:18:31.300 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:19:32.259 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:19:32.261 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:19:32.261 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:19:32.261 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:19:32.261 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:19:32.261 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:19:32.262 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:19:32.290 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:19:32.292 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:19:32.298 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:19:32.300 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:19:32.300 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:19:32.300 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:19:32.302 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:19:32.302 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:20:33.279 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:20:33.286 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:20:33.286 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:20:33.286 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:20:33.287 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:20:33.288 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:20:33.288 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:20:33.326 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:20:33.328 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:20:33.334 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:20:33.336 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:20:33.336 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:20:33.336 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:20:33.339 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:20:33.339 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:21:33.199 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:21:33.201 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:21:33.201 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:21:33.204 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:21:33.204 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:21:33.204 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:21:33.204 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:21:33.204 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:21:33.204 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:21:33.205 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:21:33.206 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:21:33.206 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:21:33.206 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:21:33.210 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:21:33.210 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:21:33.219 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:21:33.222 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:21:33.222 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:21:33.222 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:21:33.222 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:21:33.222 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:21:33.222 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:21:33.236 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:21:33.238 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:21:33.242 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:21:33.243 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:21:33.243 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:21:33.243 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:21:33.246 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:21:33.246 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:21:34.073 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:21:34.073 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:21:34.095 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:21:34.097 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:21:34.097 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:21:34.097 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:21:34.097 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:21:34.097 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:21:34.097 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:21:34.114 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:21:34.116 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:21:34.121 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:21:34.124 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:21:34.124 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:21:34.124 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:21:34.127 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:21:34.127 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:21:34.624 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:21:34.627 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:21:34.627 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:21:34.632 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:21:34.632 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:21:34.633 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:21:34.633 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:21:34.633 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:21:34.633 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:21:34.642 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:21:34.652 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:21:34.652 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:21:34.652 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:21:34.652 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:21:34.653 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:21:34.658 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:21:34.659 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:21:34.659 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:21:35.078 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:21:35.100 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:21:36.589 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:21:36.589 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:21:38.475 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:21:41.142 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:21:41.142 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:22:04.266 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:22:04.269 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:22:04.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:22:04.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:22:04.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:22:04.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:22:04.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:22:04.285 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:22:04.287 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:22:04.291 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:22:04.294 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:22:04.294 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:22:04.295 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:22:04.298 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:22:04.298 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:22:34.255 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:22:34.256 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:22:34.256 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:22:34.257 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:22:34.257 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:22:34.257 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:22:34.257 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:22:34.274 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:22:34.276 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:22:34.280 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:22:34.282 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:22:34.282 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:22:34.282 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:22:34.285 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:22:34.285 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:23:04.271 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:23:04.272 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:23:04.272 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:23:04.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:23:04.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:23:04.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:23:04.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:23:04.296 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:23:04.299 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:23:04.304 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:23:04.306 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:23:04.306 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:23:04.306 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:23:04.309 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:23:04.309 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:23:34.263 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:23:34.265 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:23:34.265 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:23:34.265 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:23:34.266 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:23:34.266 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:23:34.266 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:23:34.289 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:23:34.292 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:23:34.297 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:23:34.299 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:23:34.300 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:23:34.300 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:23:34.303 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:23:34.304 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:24:04.267 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:24:04.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:24:04.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:24:04.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:24:04.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:24:04.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:24:04.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:24:04.294 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:24:04.296 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:24:04.300 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:24:04.303 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:24:04.303 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:24:04.303 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:24:04.306 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:24:04.306 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:24:09.578 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 02:24:09.578 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@6b9b1826]]
2025-07-13 02:24:09.578 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 02:24:09.849 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 02:24:09.851 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 02:24:09.857 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 02:24:28.032 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 02:24:28.107 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 27896 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 02:24:28.108 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 02:24:28.186 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 02:24:28.187 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 02:24:29.221 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 02:24:29.221 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 02:24:29.352 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 126 ms. Found 10 JPA repository interfaces.
2025-07-13 02:24:29.654 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 02:24:29.657 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 02:24:29.680 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:24:29.680 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:24:29.681 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:24:29.681 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:24:29.682 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:24:29.682 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:24:29.683 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:24:29.683 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:24:29.683 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:24:29.684 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 02:24:29.685 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
2025-07-13 02:24:30.412 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 02:24:30.416 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 02:24:30.420 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 02:24:30.429 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 02:24:30.431 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 02:24:30.431 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 02:24:30.481 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 02:24:30.482 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2293 ms
2025-07-13 02:24:30.702 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 02:24:30.819 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@27320f52
2025-07-13 02:24:30.821 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 02:24:30.885 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 02:24:30.964 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.045s)
2025-07-13 02:24:30.989 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 02:24:30.993 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 02:24:31.060 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 02:24:31.094 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 02:24:31.122 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 02:24:31.321 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 02:24:32.182 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 02:24:32.223 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 02:24:32.896 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 02:24:33.358 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 02:24:33.586 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 02:24:33.587 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 02:24:33.929 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 02:24:34.140 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 02:24:34.178 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 02:24:34.179 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 02:24:34.230 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 02:24:34.231 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 02:24:34.281 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 02:24:34.294 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 02:24:34.306 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 02:24:34.321 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 02:24:34.472 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 02:24:34.483 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 02:24:34.733 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 02:24:34.971 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 02:24:35.562 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 02:24:36.490 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 02:24:36.535 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 02:24:36.556 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 02:24:36.570 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 02:24:36.570 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@1d5b29eb]]
2025-07-13 02:24:36.571 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 02:24:36.605 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 9.285 seconds (process running for 9.927)
2025-07-13 02:24:36.686 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 02:24:36.686 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 02:24:36.687 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 02:24:36.689 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 02:24:36.705 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 02:24:36.718 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 02:24:36.731 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 02:24:36.744 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 02:24:36.757 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 02:24:36.770 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 02:24:36.807 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 02:24:36.820 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:24:36.831 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:24:36.832 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:24:36.832 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:24:36.832 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:24:36.833 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:24:36.833 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:24:36.886 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:24:36.889 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:24:36.901 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:24:36.904 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:24:36.905 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:24:36.905 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:24:36.907 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:24:36.908 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:24:45.607 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:24:45.610 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:24:45.610 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:24:45.612 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:24:45.612 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:24:45.613 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:24:45.613 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:24:45.613 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:24:45.613 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:24:45.616 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:24:45.619 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:24:45.619 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:24:45.619 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:24:45.623 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:24:45.623 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:24:48.194 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:24:48.195 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:24:48.227 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:24:48.230 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:24:48.231 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:24:48.231 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:24:48.232 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:24:48.232 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:24:48.232 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:24:48.257 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:24:48.261 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:24:48.270 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:24:48.273 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:24:48.273 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:24:48.273 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:24:48.276 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:24:48.277 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:24:48.754 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:24:48.755 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:24:48.755 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:24:48.764 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:24:48.764 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:24:48.765 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:24:48.765 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:24:48.766 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:24:48.766 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:24:48.767 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:24:48.775 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:24:48.775 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:24:48.775 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:24:48.775 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:24:48.776 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:24:48.784 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:24:48.784 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:24:48.784 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:24:49.189 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:24:49.216 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:24:50.554 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:24:50.557 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:24:55.751 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:24:55.751 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:25:13.748 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:25:13.752 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:25:13.752 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:25:13.756 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:25:13.756 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:25:13.757 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:25:13.758 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:25:13.758 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:25:13.759 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:25:13.762 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:25:13.766 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:25:13.767 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:25:13.767 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:25:13.774 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:25:13.774 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:25:18.187 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:25:18.193 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:25:18.193 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:25:18.200 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:25:18.201 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:25:18.201 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:25:18.201 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:25:18.201 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:25:18.201 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:25:18.203 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:25:18.206 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:25:18.207 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:25:18.207 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:25:18.211 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:25:18.212 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:25:18.263 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:25:18.266 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:25:18.267 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:25:18.267 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:25:18.267 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:25:18.267 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:25:18.267 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:25:18.289 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:25:18.291 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:25:18.297 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:25:18.300 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:25:18.300 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:25:18.300 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:25:18.304 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:25:18.305 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:25:19.391 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:25:19.394 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:25:19.394 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:25:19.397 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:25:19.397 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:25:19.397 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:25:19.397 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:25:19.397 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:25:19.397 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:25:19.399 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:25:19.402 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:25:19.402 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:25:19.402 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:25:19.405 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:25:19.406 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:25:27.591 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:25:27.591 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:25:36.521 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 02:25:39.033 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:25:39.033 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:25:49.274 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:25:49.276 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:25:49.277 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:25:49.277 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:25:49.277 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:25:49.277 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:25:49.277 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:25:49.303 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:25:49.306 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:25:49.310 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:25:49.313 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:25:49.313 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:25:49.313 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:25:49.316 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:25:49.316 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:26:19.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:26:19.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:26:19.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:26:19.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:26:19.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:26:19.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:26:19.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:26:19.300 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:26:19.304 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:26:19.310 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:26:19.312 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:26:19.312 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:26:19.312 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:26:19.316 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:26:19.316 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:26:49.272 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:26:49.276 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:26:49.276 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:26:49.276 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:26:49.277 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:26:49.278 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:26:49.278 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:26:49.305 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:26:49.308 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:26:49.315 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:26:49.317 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:26:49.317 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:26:49.317 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:26:49.321 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:26:49.321 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:27:19.265 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:27:19.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:27:19.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:27:19.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:27:19.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:27:19.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:27:19.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:27:19.299 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:27:19.302 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:27:19.308 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:27:19.310 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:27:19.310 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:27:19.310 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:27:19.314 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:27:19.314 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:27:49.259 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:27:49.261 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:27:49.261 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:27:49.261 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:27:49.261 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:27:49.261 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:27:49.261 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:27:49.288 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:27:49.290 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:27:49.297 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:27:49.299 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:27:49.300 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:27:49.300 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:27:49.303 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:27:49.303 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:28:19.277 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:28:19.279 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:28:19.280 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:28:19.280 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:28:19.280 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:28:19.280 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:28:19.280 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:28:19.307 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:28:19.309 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:28:19.314 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:28:19.315 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:28:19.316 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:28:19.316 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:28:19.319 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:28:19.319 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:28:52.282 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:28:52.284 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:28:52.284 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:28:52.284 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:28:52.285 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:28:52.285 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:28:52.285 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:28:52.311 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:28:52.314 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:28:52.319 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:28:52.321 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:28:52.321 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:28:52.321 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:28:52.323 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:28:52.323 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:29:52.292 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:29:52.296 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:29:52.296 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:29:52.297 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:29:52.298 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:29:52.298 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:29:52.298 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:29:52.328 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:29:52.331 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:29:52.336 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:29:52.338 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:29:52.338 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:29:52.338 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:29:52.341 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:29:52.341 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:30:11.976 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:30:11.979 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:30:11.979 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:30:11.982 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:30:11.983 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:30:11.983 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:30:11.984 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:30:11.984 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:30:11.984 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:30:11.987 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:30:11.989 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:30:11.989 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:30:11.990 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:30:11.995 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:30:11.996 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:30:13.077 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:30:13.078 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:30:13.167 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:30:13.169 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:30:13.170 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:30:13.170 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:30:13.170 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:30:13.170 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:30:13.170 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:30:13.235 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:30:13.239 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:30:13.246 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:30:13.250 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:30:13.250 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:30:13.250 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:30:13.254 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:30:13.254 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:30:13.735 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:30:13.735 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:30:13.735 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:30:13.740 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:30:13.740 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:30:13.740 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:30:13.740 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:30:13.740 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:30:13.740 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:30:13.747 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:30:13.760 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:30:13.760 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:30:13.760 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:30:13.761 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:30:13.761 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:30:13.764 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:30:13.764 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:30:13.766 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:30:14.073 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:30:14.101 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:30:16.347 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:30:16.347 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:30:23.163 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:30:23.165 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:30:23.197 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:30:23.200 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:30:23.200 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:30:23.201 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:30:23.201 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:30:23.201 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:30:23.201 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:30:23.228 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:30:23.231 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:30:23.238 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:30:23.241 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:30:23.241 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:30:23.241 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:30:23.245 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:30:23.245 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:30:23.727 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:30:23.728 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:30:23.730 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:30:23.736 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:30:23.741 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:30:23.742 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:30:23.742 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:30:23.743 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:30:23.745 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:30:23.745 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:30:23.759 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:30:23.760 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:30:23.760 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:30:23.760 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:30:23.760 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:30:23.768 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:30:23.769 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:30:23.769 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:30:24.159 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:30:24.184 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:30:26.177 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:30:26.177 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:30:32.235 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:30:32.236 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:30:32.266 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:30:32.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:30:32.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:30:32.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:30:32.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:30:32.271 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:30:32.271 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:30:32.302 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:30:32.305 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:30:32.312 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:30:32.316 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:30:32.317 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:30:32.318 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:30:32.320 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:30:32.321 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:30:32.800 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:30:32.802 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:30:32.806 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:30:32.812 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:30:32.816 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:30:32.817 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:30:32.818 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:30:32.818 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:30:32.819 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:30:32.819 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:30:32.827 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:30:32.827 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:30:32.828 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:30:32.828 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:30:32.828 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:30:32.833 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:30:32.833 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:30:32.834 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:30:33.252 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:30:33.281 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:30:39.634 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:30:39.636 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:30:39.637 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:30:39.637 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:30:39.637 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:30:39.637 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:30:39.637 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:30:47.120 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:30:47.121 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:30:49.553 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:30:49.555 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:30:49.555 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:30:49.560 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:30:49.565 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:30:49.567 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:30:49.568 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:30:49.569 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:30:49.570 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:30:49.570 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:30:49.573 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:30:49.574 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:30:49.574 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:30:49.578 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:30:49.579 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:30:52.616 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:30:52.618 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:30:52.650 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:30:52.652 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:30:52.653 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:30:52.654 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:30:52.654 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:30:52.654 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:30:52.654 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:30:52.688 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:30:52.691 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:30:52.704 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:30:52.708 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:30:52.709 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:30:52.709 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:30:52.715 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:30:52.716 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:30:53.269 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:30:53.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:30:53.270 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:30:53.274 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:30:53.274 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:30:53.274 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:30:53.274 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:30:53.274 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:30:53.275 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:30:53.276 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:30:53.284 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:30:53.284 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:30:53.284 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:30:53.284 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:30:53.284 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:30:53.288 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:30:53.288 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:30:53.289 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:30:54.252 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:30:54.270 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:31:23.256 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:31:23.258 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:31:23.258 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:31:23.258 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:31:23.258 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:31:23.258 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:31:23.259 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:31:53.260 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:31:53.263 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:31:53.263 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:31:53.263 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:31:53.264 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:31:53.264 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:31:53.264 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:32:23.264 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:32:23.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:32:23.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:32:23.267 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:32:23.267 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:32:23.267 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:32:23.267 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:32:52.450 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:32:52.452 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:32:52.452 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:32:52.452 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:32:52.452 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:32:52.452 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:32:52.452 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:32:52.674 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:32:52.675 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:32:52.675 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:32:52.675 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:32:52.675 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:32:52.675 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:32:52.675 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:32:53.565 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:32:53.566 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:32:53.603 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:32:53.604 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:32:53.605 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:32:53.605 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:32:53.605 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:32:53.605 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:32:53.605 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:32:53.622 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:32:53.625 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:32:53.631 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:32:53.633 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:32:53.633 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:32:53.633 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:32:53.635 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:32:53.635 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:32:54.135 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:32:54.135 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:32:54.135 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:32:54.138 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:32:54.138 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:32:54.138 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:32:54.139 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:32:54.139 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:32:54.139 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:32:54.144 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:32:54.152 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:32:54.153 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:32:54.153 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:32:54.153 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:32:54.153 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:32:54.157 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:32:54.158 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:32:54.158 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:32:54.567 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:32:54.584 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:32:56.611 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:32:56.611 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:32:57.780 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:33:06.537 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:33:09.454 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:33:09.454 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:33:24.276 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:33:24.278 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:33:24.278 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:33:24.279 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:33:24.279 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:33:24.279 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:33:24.279 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:33:24.304 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:33:24.307 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:33:24.313 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:33:24.315 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:33:24.315 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:33:24.315 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:33:24.318 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:33:24.318 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:33:45.138 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:33:45.141 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:33:45.141 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:33:45.143 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:33:45.143 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:33:45.143 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:33:45.143 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:33:45.143 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:33:45.143 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:33:45.146 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:33:45.149 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:33:45.149 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:33:45.150 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:33:45.152 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:33:45.152 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:33:54.252 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:33:54.254 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:33:54.254 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:33:54.254 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:33:54.255 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:33:54.255 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:33:54.255 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:33:54.274 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:33:54.276 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:33:54.281 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:33:54.283 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:33:54.283 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:33:54.283 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:33:54.287 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:33:54.287 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:34:24.261 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:34:24.265 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:34:24.266 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:34:24.266 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:34:24.266 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:34:24.266 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:34:24.266 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:34:24.290 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:34:24.292 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:34:24.298 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:34:24.300 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:34:24.300 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:34:24.300 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:34:24.304 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:34:24.304 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:34:54.262 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:34:54.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:34:54.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:34:54.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:34:54.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:34:54.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:34:54.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:34:54.281 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:34:54.283 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:34:54.288 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:34:54.290 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:34:54.290 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:34:54.290 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:34:54.294 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:34:54.294 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:35:24.268 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:35:24.269 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:35:24.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:35:24.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:35:24.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:35:24.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:35:24.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:35:24.287 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:35:24.290 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:35:24.296 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:35:24.299 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:35:24.300 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:35:24.300 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:35:24.304 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:35:24.304 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:35:54.270 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:35:54.271 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:35:54.272 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:35:54.272 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:35:54.272 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:35:54.272 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:35:54.272 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:35:54.289 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:35:54.291 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:35:54.294 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:35:54.296 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:35:54.296 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:35:54.297 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:35:54.299 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:35:54.299 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:36:24.266 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:36:24.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:36:24.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:36:24.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:36:24.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:36:24.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:36:24.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:36:24.291 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:36:24.296 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:36:24.302 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:36:24.304 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:36:24.305 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:36:24.305 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:36:24.308 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:36:24.309 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:36:28.311 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:36:28.313 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:36:28.313 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:36:28.314 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:36:28.314 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:36:28.315 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:36:28.315 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:36:28.315 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:36:28.315 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:36:28.316 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:36:28.318 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:36:28.318 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:36:28.318 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:36:28.322 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:36:28.322 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:36:29.155 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:36:29.156 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:36:29.188 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:36:29.190 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:36:29.191 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:36:29.191 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:36:29.191 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:36:29.191 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:36:29.191 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:36:29.212 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:36:29.215 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:36:29.221 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:36:29.225 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:36:29.225 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:36:29.225 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:36:29.230 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:36:29.230 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:36:29.717 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:36:29.717 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:36:29.717 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:36:29.722 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:36:29.723 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:36:29.723 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:36:29.723 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:36:29.723 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:36:29.723 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:36:29.726 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:36:29.732 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:36:29.732 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:36:29.733 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:36:29.733 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:36:29.733 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:36:29.737 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:36:29.738 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:36:29.738 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:36:30.160 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:36:30.174 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:36:31.402 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:36:31.402 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:36:36.427 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:36:36.427 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:36:59.256 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:36:59.258 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:36:59.258 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:36:59.259 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:36:59.259 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:36:59.259 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:36:59.259 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:36:59.280 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:36:59.282 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:36:59.286 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:36:59.287 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:36:59.288 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:36:59.288 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:36:59.291 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:36:59.292 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:37:06.269 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:37:06.271 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:37:06.271 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:37:06.272 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:37:06.272 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:37:06.273 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:37:06.273 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:37:06.273 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:37:06.273 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:37:06.274 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:37:06.276 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:37:06.276 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:37:06.276 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:37:06.279 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:37:06.279 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:37:09.122 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:37:12.329 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:37:12.330 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:37:29.264 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:37:29.265 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:37:29.265 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:37:29.265 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:37:29.265 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:37:29.265 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:37:29.265 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:37:29.280 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:37:29.285 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:37:29.291 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:37:29.293 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:37:29.293 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:37:29.294 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:37:29.300 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:37:29.300 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:37:59.261 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:37:59.263 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:37:59.263 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:37:59.263 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:37:59.263 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:37:59.264 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:37:59.264 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:37:59.290 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:37:59.292 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:37:59.296 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:37:59.297 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:37:59.297 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:37:59.297 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:37:59.301 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:37:59.301 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:38:29.259 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:38:29.260 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:38:29.261 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:38:29.261 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:38:29.261 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:38:29.261 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:38:29.261 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:38:29.281 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:38:29.282 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:38:29.287 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:38:29.289 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:38:29.290 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:38:29.290 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:38:29.293 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:38:29.293 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:38:59.264 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:38:59.269 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:38:59.269 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:38:59.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:38:59.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:38:59.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:38:59.270 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:38:59.296 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:38:59.298 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:38:59.304 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:38:59.307 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:38:59.307 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:38:59.307 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:38:59.311 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:38:59.311 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:39:29.256 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:39:29.257 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:39:29.257 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:39:29.258 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:39:29.258 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:39:29.258 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:39:29.259 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:39:29.285 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:39:29.288 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:39:29.292 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:39:29.293 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:39:29.293 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:39:29.293 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:39:29.296 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:39:29.297 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:39:59.254 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:39:59.256 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:39:59.257 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:39:59.257 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:39:59.257 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:39:59.257 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:39:59.257 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:39:59.277 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:39:59.279 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:39:59.282 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:39:59.284 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:39:59.284 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:39:59.284 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:39:59.286 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:39:59.286 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:40:52.288 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:40:52.292 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:40:52.293 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:40:52.294 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:40:52.295 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:40:52.296 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:40:52.296 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:40:52.334 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:40:52.337 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:40:52.344 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:40:52.348 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:40:52.348 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:40:52.349 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:40:52.353 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:40:52.354 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:41:52.260 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:41:52.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:41:52.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:41:52.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:41:52.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:41:52.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:41:52.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:41:52.282 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:41:52.283 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:41:52.289 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:41:52.291 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:41:52.291 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:41:52.291 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:41:52.293 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:41:52.294 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:42:52.304 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:42:52.310 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:42:52.311 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:42:52.311 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:42:52.312 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:42:52.312 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:42:52.312 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:42:52.354 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:42:52.358 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:42:52.370 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:42:52.373 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:42:52.374 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:42:52.374 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:42:52.380 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:42:52.380 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:43:46.818 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:43:46.820 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:43:46.821 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:43:46.823 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:43:46.824 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:43:46.824 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:43:46.824 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:43:46.824 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:43:46.824 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:43:46.826 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:43:46.828 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:43:46.829 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:43:46.829 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:43:46.833 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:43:46.833 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:43:46.847 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:43:46.849 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:43:46.849 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:43:46.850 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:43:46.850 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:43:46.850 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:43:46.850 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:43:46.871 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:43:46.874 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:43:46.880 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:43:46.882 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:43:46.883 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:43:46.883 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:43:46.886 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:43:46.886 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:43:48.938 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:43:48.938 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:43:50.389 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:43:50.393 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:43:50.462 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:43:50.466 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:43:50.466 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:43:50.467 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:43:50.467 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:43:50.468 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:43:50.468 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:43:50.501 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:43:50.505 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:43:50.513 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:43:50.517 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:43:50.517 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:43:50.517 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:43:50.522 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:43:50.523 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:43:51.017 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:43:51.018 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:43:51.018 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:43:51.032 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:43:51.032 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:43:51.032 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:43:51.033 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:43:51.033 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:43:51.034 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:43:51.035 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:43:51.052 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:43:51.052 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:43:51.052 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:43:51.053 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:43:51.053 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:43:51.060 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:43:51.061 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:43:51.062 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:43:51.389 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:43:51.419 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:43:55.450 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:43:55.450 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:44:21.264 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:44:21.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:44:21.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:44:21.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:44:21.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:44:21.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:44:21.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:44:21.280 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:44:21.285 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:44:21.291 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:44:21.294 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:44:21.294 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:44:21.294 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:44:21.297 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:44:21.297 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:44:51.261 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:44:51.263 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:44:51.264 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:44:51.264 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:44:51.264 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:44:51.264 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:44:51.264 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:44:51.278 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:44:51.282 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:44:51.287 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:44:51.289 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:44:51.289 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:44:51.289 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:44:51.293 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:44:51.293 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:45:21.268 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:45:21.270 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:45:21.270 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:45:21.271 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:45:21.271 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:45:21.271 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:45:21.271 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:45:21.288 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:45:21.290 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:45:21.294 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:45:21.296 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:45:21.296 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:45:21.296 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:45:21.299 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:45:21.299 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:45:51.263 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:45:51.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:45:51.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:45:51.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:45:51.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:45:51.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:45:51.266 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:45:51.286 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:45:51.288 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:45:51.293 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:45:51.295 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:45:51.296 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:45:51.296 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:45:51.299 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:45:51.299 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:46:21.262 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:46:21.263 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:46:21.264 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:46:21.264 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:46:21.264 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:46:21.264 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:46:21.264 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:46:21.278 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:46:21.280 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:46:21.285 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:46:21.287 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:46:21.287 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:46:21.287 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:46:21.289 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:46:21.289 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:46:51.268 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:46:51.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:46:51.271 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:46:51.271 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:46:51.271 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:46:51.271 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:46:51.271 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:46:51.291 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:46:51.294 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:46:51.299 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:46:51.301 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:46:51.301 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:46:51.301 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:46:51.303 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:46:51.303 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:47:21.266 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:47:21.268 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:47:21.268 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:47:21.269 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:47:21.269 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:47:21.269 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:47:21.269 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:47:21.290 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:47:21.293 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:47:21.296 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:47:21.297 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:47:21.297 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:47:21.297 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:47:21.300 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:47:21.300 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:47:51.434 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:47:51.436 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:47:51.436 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:47:51.439 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:47:51.439 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:47:51.439 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:47:51.439 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:47:51.439 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:47:51.439 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:47:51.440 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:47:51.443 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:47:51.443 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:47:51.443 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:47:51.447 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:47:51.447 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:47:51.459 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:47:51.460 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:47:51.460 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:47:51.460 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:47:51.461 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:47:51.461 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:47:51.461 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:47:51.476 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:47:51.478 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:47:51.483 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:47:51.484 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:47:51.484 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:47:51.484 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:47:51.487 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:47:51.487 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:48:11.465 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:48:11.467 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:48:11.467 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:48:11.468 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:48:11.468 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:48:11.468 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:48:11.469 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:48:11.469 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:48:11.469 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:48:11.470 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:48:11.471 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:48:11.471 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:48:11.472 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:48:11.474 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:48:11.474 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:48:21.255 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:48:21.257 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:48:21.257 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:48:21.258 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:48:21.258 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:48:21.258 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:48:21.258 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:48:21.273 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:48:21.275 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:48:21.278 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:48:21.280 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:48:21.280 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:48:21.280 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:48:21.284 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:48:21.284 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:48:51.262 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:48:51.264 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:48:51.264 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:48:51.264 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:48:51.264 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:48:51.264 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:48:51.265 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:48:51.286 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:48:51.288 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:48:51.292 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:48:51.294 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:48:51.294 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:48:51.294 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:48:51.297 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:48:51.297 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:49:52.265 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:49:52.268 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:49:52.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:49:52.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:49:52.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:49:52.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:49:52.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:49:52.289 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:49:52.292 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:49:52.297 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:49:52.298 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:49:52.299 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:49:52.299 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:49:52.301 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:49:52.302 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:50:52.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:50:52.273 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:50:52.273 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:50:52.273 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:50:52.274 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:50:52.274 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:50:52.274 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:50:52.293 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:50:52.296 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:50:52.300 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:50:52.302 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:50:52.302 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:50:52.303 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:50:52.307 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:50:52.307 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:51:52.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:51:52.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:51:52.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:51:52.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:51:52.276 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:51:52.276 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:51:52.276 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:51:52.298 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:51:52.301 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:51:52.305 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:51:52.308 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:51:52.308 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:51:52.309 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:51:52.311 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:51:52.312 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:52:52.259 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:52:52.260 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:52:52.261 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:52:52.261 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:52:52.261 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:52:52.261 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:52:52.261 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:52:52.280 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:52:52.283 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:52:52.287 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:52:52.290 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:52:52.290 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:52:52.290 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:52:52.295 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:52:52.296 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:56:38.657 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:56:38.667 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:56:38.668 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:56:38.669 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:56:38.672 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:56:38.672 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:56:38.672 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:56:39.119 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:56:39.122 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:56:39.128 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:56:39.131 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:56:39.132 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:56:39.132 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:56:39.138 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:56:39.138 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:56:52.268 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:56:52.274 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:56:52.274 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:56:52.274 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:56:52.274 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:56:52.275 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:56:52.275 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:56:52.293 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:56:52.295 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:56:52.312 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:56:52.314 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:56:52.314 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:56:52.314 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:56:52.319 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:56:52.319 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:56:57.509 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:56:57.511 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:56:57.512 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:56:57.514 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:56:57.515 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:56:57.515 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:56:57.515 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:56:57.515 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:56:57.515 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:56:57.516 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:56:57.516 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:56:57.516 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:56:57.516 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:56:57.518 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:56:57.518 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:56:58.835 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:56:58.836 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:56:58.858 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:56:58.860 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:56:58.860 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:56:58.860 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:56:58.860 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:56:58.860 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:56:58.860 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:56:58.875 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:56:58.877 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:56:58.881 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:56:58.883 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:56:58.883 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:56:58.883 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:56:58.886 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:56:58.886 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:56:59.397 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:56:59.397 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:56:59.399 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:56:59.408 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:56:59.408 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:56:59.409 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:56:59.409 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:56:59.409 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:56:59.409 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:56:59.410 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:56:59.419 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:56:59.419 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:56:59.419 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:56:59.419 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:56:59.419 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:56:59.424 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:56:59.424 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:56:59.425 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:56:59.840 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:56:59.853 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:57:00.797 [MessageBroker-15] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 20, active threads = 2, queued tasks = 7, completed tasks = 60]
2025-07-13 02:57:02.904 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:57:02.905 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:57:02.905 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:57:02.906 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:57:02.906 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:57:02.906 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:57:02.906 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:57:03.845 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 02:57:03.846 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 02:57:03.868 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:57:03.870 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:57:03.870 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:57:03.870 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:57:03.870 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:57:03.870 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:57:03.870 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:57:03.887 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:57:03.890 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:57:03.896 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:57:03.898 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:57:03.899 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:57:03.899 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:57:03.902 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:57:03.902 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:57:04.405 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:57:04.406 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 02:57:04.406 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 02:57:04.411 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 02:57:04.411 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 02:57:04.411 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 02:57:04.412 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 02:57:04.412 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 02:57:04.412 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 02:57:04.416 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 02:57:04.426 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 02:57:04.426 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:57:04.426 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:57:04.426 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 02:57:04.427 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 02:57:04.429 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 02:57:04.430 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 02:57:04.430 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 02:57:04.845 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 02:57:04.860 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 02:57:10.494 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:57:10.494 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:57:33.905 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:57:33.907 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:57:33.908 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:57:33.908 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:57:33.908 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:57:33.908 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:57:33.908 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:57:33.926 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:57:33.930 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:57:33.937 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:57:33.938 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:57:33.939 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:57:33.939 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:57:33.945 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:57:33.945 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:57:38.219 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:57:38.221 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:58:04.262 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:58:04.263 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:58:04.264 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:58:04.264 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:58:04.264 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:58:04.264 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:58:04.264 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:58:04.280 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:58:04.282 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:58:04.287 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:58:04.289 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:58:04.289 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:58:04.289 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:58:04.292 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:58:04.292 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:58:30.784 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:58:30.786 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:58:30.786 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:58:30.787 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:58:30.788 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:58:30.788 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:58:30.788 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:58:30.788 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:58:30.788 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:58:30.790 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:58:30.791 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:58:30.791 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:58:30.791 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:58:30.793 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:58:30.794 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:58:33.897 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:58:33.900 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:58:33.900 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:58:33.901 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:58:33.901 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:58:33.901 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:58:33.901 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:58:33.922 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:58:33.925 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:58:33.928 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:58:33.931 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:58:33.931 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:58:33.931 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:58:33.934 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:58:33.934 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:58:38.168 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[]
2025-07-13 02:58:38.201 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:58:38.204 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:58:38.208 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:58:38.210 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:58:38.211 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:58:38.211 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:58:38.214 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:58:38.214 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:58:53.118 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:58:53.120 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:58:53.121 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:58:53.123 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:58:53.123 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:58:53.124 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:58:53.124 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:58:53.124 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:58:53.124 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:58:53.125 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:58:53.127 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:58:53.127 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:58:53.127 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:58:53.131 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:58:53.132 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:59:04.262 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:59:04.268 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:59:04.268 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:59:04.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:59:04.272 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:59:04.272 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:59:04.272 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:59:04.308 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:59:04.311 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:59:04.318 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:59:04.321 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:59:04.321 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:59:04.322 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:59:04.325 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:59:04.326 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:59:12.934 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:59:12.936 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:59:12.936 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:59:12.939 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:59:12.939 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:59:12.939 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:59:12.939 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:59:12.940 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:59:12.940 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:59:12.940 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:59:12.941 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:59:12.942 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:59:12.942 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:59:12.944 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:59:12.944 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 02:59:14.765 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 02:59:14.765 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 02:59:34.278 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 02:59:34.283 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 02:59:34.283 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 02:59:34.284 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 02:59:34.284 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 02:59:34.284 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 02:59:34.284 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 02:59:34.310 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 02:59:34.313 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 02:59:34.317 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 02:59:34.318 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 02:59:34.318 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 02:59:34.318 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 02:59:34.321 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 02:59:34.321 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:00:00.001 [MessageBroker-17] INFO  c.i.i.user.task.FileCleanupTask - 开始执行深度文件清理任务，清理90天前的文件
2025-07-13 03:00:00.002 [MessageBroker-7] INFO  c.i.i.u.s.DataConsistencyService - 开始执行数据一致性检查
2025-07-13 03:00:00.009 [MessageBroker-2] INFO  c.i.i.u.t.TemporaryFileCleanupTask - 开始执行过期临时文件清理任务
2025-07-13 03:00:00.009 [MessageBroker-17] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始清理90天前的已删除文件
2025-07-13 03:00:00.009 [MessageBroker-20] INFO  c.i.i.u.t.TemporaryFileCleanupTask - 开始执行公共桶过期临时文件清理任务
2025-07-13 03:00:00.031 [MessageBroker-2] INFO  c.i.i.u.t.TemporaryFileCleanupTask - 没有发现过期的临时文件
2025-07-13 03:00:00.046 [MessageBroker-20] INFO  c.i.i.u.t.TemporaryFileCleanupTask - 公共桶过期临时文件清理任务完成，总计清理: 0 个文件
2025-07-13 03:00:00.073 [MessageBroker-17] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 清理完成，MinIO删除: 0个文件，数据库删除: 0条记录
2025-07-13 03:00:00.076 [MessageBroker-17] INFO  c.i.i.user.task.FileCleanupTask - 深度文件清理任务完成，清理了 0 个过期文件
2025-07-13 03:00:00.112 [MessageBroker-7] INFO  c.i.i.u.s.DataConsistencyService - 数据一致性检查完成，发现 0 个不一致项
2025-07-13 03:00:04.269 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:00:04.275 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:00:04.275 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:00:04.275 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:00:04.275 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:00:04.275 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:00:04.275 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:00:04.300 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:00:04.303 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:00:04.310 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:00:04.313 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:00:04.314 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:00:04.314 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:00:04.318 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:00:04.319 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:00:34.276 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:00:34.280 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:00:34.280 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:00:34.280 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:00:34.281 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:00:34.281 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:00:34.281 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:00:34.298 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:00:34.300 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:00:34.305 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:00:34.307 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:00:34.307 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:00:34.307 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:00:34.310 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:00:34.310 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:01:35.267 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:01:35.272 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:01:35.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:01:35.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:01:35.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:01:35.274 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:01:35.274 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:01:35.315 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:01:35.319 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:01:35.328 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:01:35.331 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:01:35.331 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:01:35.331 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:01:35.337 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:01:35.337 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:02:36.269 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:02:36.271 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:02:36.271 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:02:36.271 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:02:36.271 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:02:36.272 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:02:36.272 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:02:36.292 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:02:36.294 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:02:36.299 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:02:36.301 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:02:36.301 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:02:36.301 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:02:36.304 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:02:36.305 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:03:37.321 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:03:37.327 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:03:37.328 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:03:37.328 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:03:37.329 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:03:37.329 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:03:37.329 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:03:37.375 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:03:37.380 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:03:37.394 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:03:37.398 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:03:37.399 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:03:37.399 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:03:37.404 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:03:37.405 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:04:38.281 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:04:38.285 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:04:38.285 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:04:38.285 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:04:38.285 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:04:38.286 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:04:38.286 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:04:38.321 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:04:38.324 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:04:38.332 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:04:38.335 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:04:38.336 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:04:38.336 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:04:38.340 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:04:38.340 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:04:47.337 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 03:04:47.338 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@1d5b29eb]]
2025-07-13 03:04:47.338 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 03:04:47.840 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 03:04:47.853 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 03:04:47.857 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 03:05:14.361 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 03:05:14.404 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 18200 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 03:05:14.405 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 03:05:14.457 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 03:05:14.458 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 03:05:15.309 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 03:05:15.310 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 03:05:15.509 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 164 ms. Found 10 JPA repository interfaces.
2025-07-13 03:05:16.200 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 03:05:16.202 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 03:05:16.258 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 03:05:16.259 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 03:05:16.260 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 03:05:16.262 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 03:05:16.263 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 03:05:16.265 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 03:05:16.265 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 03:05:16.266 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 03:05:16.267 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 03:05:16.268 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 03:05:16.268 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 47 ms. Found 0 Redis repository interfaces.
2025-07-13 03:05:17.947 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 03:05:17.955 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 03:05:17.983 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 03:05:18.021 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 03:05:18.027 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 03:05:18.028 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 03:05:18.174 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 03:05:18.176 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3717 ms
2025-07-13 03:05:18.636 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 03:05:18.829 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5dafd0f
2025-07-13 03:05:18.832 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 03:05:18.913 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 03:05:19.005 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.052s)
2025-07-13 03:05:19.027 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 03:05:19.033 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 03:05:19.148 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 03:05:19.225 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 03:05:19.269 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 03:05:19.550 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 03:05:20.699 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 03:05:20.782 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 03:05:22.070 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 03:05:23.231 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 03:05:23.629 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 03:05:23.630 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 03:05:23.931 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 03:05:24.151 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 03:05:24.197 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 03:05:24.198 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 03:05:24.245 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 03:05:24.245 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 03:05:24.297 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 03:05:24.308 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 03:05:24.320 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 03:05:24.332 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 03:05:24.487 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 03:05:24.496 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 03:05:24.796 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 03:05:25.007 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 03:05:25.468 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 03:05:26.166 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 03:05:26.222 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 03:05:26.244 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 03:05:26.246 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 03:05:26.247 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@72db770e]]
2025-07-13 03:05:26.248 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 03:05:26.267 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 12.337 seconds (process running for 12.842)
2025-07-13 03:05:26.315 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 03:05:26.344 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 03:05:26.653 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 03:05:26.667 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 03:05:26.682 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 03:05:26.713 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 03:05:26.727 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 03:05:26.758 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 03:05:30.129 [http-nio-8080-exec-3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 03:05:30.130 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 03:05:30.133 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-07-13 03:05:30.386 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:05:30.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:05:30.392 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:05:30.420 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:05:30.420 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:05:30.421 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:05:30.422 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:05:30.422 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:05:30.423 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:05:30.425 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:05:30.431 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:05:30.434 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:05:30.435 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:05:30.444 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:05:30.445 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:05:30.532 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:05:30.538 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:05:30.539 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:05:30.540 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:05:30.540 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:05:30.541 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:05:30.542 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:05:30.596 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:05:30.601 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:05:30.615 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:05:30.621 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:05:30.621 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:05:30.622 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:05:30.629 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:05:30.630 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:05:31.523 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:05:31.525 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:05:31.580 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:05:31.583 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:05:31.584 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:05:31.584 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:05:31.584 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:05:31.584 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:05:31.585 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:05:31.617 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:05:31.621 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:05:31.631 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:05:31.635 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:05:31.635 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:05:31.635 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:05:31.641 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:05:31.642 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:05:32.114 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:05:32.115 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:05:32.115 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:05:32.127 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:05:32.127 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:05:32.127 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:05:32.127 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:05:32.129 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:05:32.130 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:05:32.132 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:05:32.146 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:05:32.146 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:05:32.147 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:05:32.147 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:05:32.147 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:05:32.161 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:05:32.161 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:05:32.161 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:05:32.516 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:05:32.554 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:05:40.480 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:05:40.482 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:05:40.519 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:05:40.522 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:05:40.522 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:05:40.523 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:05:40.523 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:05:40.523 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:05:40.523 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:05:40.554 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:05:40.557 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:05:40.566 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:05:40.569 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:05:40.570 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:05:40.570 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:05:40.574 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:05:40.575 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:05:41.063 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:05:41.064 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:05:41.064 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:05:41.074 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:05:41.075 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:05:41.075 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:05:41.075 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:05:41.075 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:05:41.076 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:05:41.077 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:05:41.089 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:05:41.089 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:05:41.089 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:05:41.090 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:05:41.090 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:05:41.096 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:05:41.096 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:05:41.096 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:05:41.492 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:05:41.522 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:06:11.277 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:06:11.281 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:06:11.282 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:06:11.282 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:06:11.282 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:06:11.283 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:06:11.283 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:06:11.313 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:06:11.317 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:06:11.327 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:06:11.330 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:06:11.330 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:06:11.331 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:06:11.335 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:06:11.335 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:06:26.211 [MessageBroker-4] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 03:06:41.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:06:41.264 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:06:41.264 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:06:41.264 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:06:41.264 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:06:41.265 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:06:41.265 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:06:41.288 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:06:41.291 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:06:41.299 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:06:41.319 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:06:41.320 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:06:41.320 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:06:41.329 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:06:41.330 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:07:11.266 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:07:11.268 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:07:11.268 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:07:11.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:07:11.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:07:11.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:07:11.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:07:11.293 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:07:11.296 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:07:11.301 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:07:11.306 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:07:11.306 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:07:11.306 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:07:11.309 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:07:11.309 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:07:41.274 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:07:41.277 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:07:41.277 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:07:41.278 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:07:41.278 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:07:41.278 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:07:41.278 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:07:41.299 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:07:41.303 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:07:41.311 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:07:41.314 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:07:41.314 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:07:41.314 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:07:41.316 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:07:41.316 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:08:11.262 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:08:11.263 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:08:11.264 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:08:11.264 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:08:11.264 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:08:11.264 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:08:11.264 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:08:11.290 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:08:11.292 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:08:11.297 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:08:11.299 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:08:11.299 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:08:11.299 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:08:11.308 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:08:11.308 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:08:41.272 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:08:41.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:08:41.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:08:41.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:08:41.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:08:41.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:08:41.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:08:41.292 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:08:41.295 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:08:41.299 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:08:41.300 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:08:41.300 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:08:41.300 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:08:41.303 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:08:41.303 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:09:11.282 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:09:11.287 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:09:11.287 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:09:11.287 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:09:11.288 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:09:11.288 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:09:11.288 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:09:11.331 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:09:11.335 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:09:11.350 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:09:11.356 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:09:11.356 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:09:11.356 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:09:11.363 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:09:11.364 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:09:47.697 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:09:47.701 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:09:47.701 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:09:47.703 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:09:47.703 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:09:47.703 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:09:47.703 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:09:47.703 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:09:47.703 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:09:47.706 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:09:47.708 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:09:47.708 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:09:47.709 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:09:47.713 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:09:47.714 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:09:47.726 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:09:47.729 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:09:47.729 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:09:47.729 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:09:47.729 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:09:47.730 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:09:47.730 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:09:47.750 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:09:47.752 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:09:47.757 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:09:47.759 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:09:47.760 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:09:47.760 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:09:47.763 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:09:47.763 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:09:48.874 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:09:48.875 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:09:48.898 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:09:48.900 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:09:48.900 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:09:48.900 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:09:48.900 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:09:48.900 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:09:48.900 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:09:48.916 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:09:48.920 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:09:48.926 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:09:48.929 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:09:48.929 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:09:48.929 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:09:48.932 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:09:48.932 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:09:49.427 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:09:49.428 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:09:49.429 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:09:49.431 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:09:49.432 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:09:49.432 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:09:49.432 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:09:49.432 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:09:49.432 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:09:49.435 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:09:49.443 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:09:49.443 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:09:49.444 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:09:49.444 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:09:49.444 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:09:49.447 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:09:49.448 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:09:49.448 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:09:49.881 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:09:49.901 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:10:19.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:10:19.276 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:10:19.276 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:10:19.276 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:10:19.276 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:10:19.276 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:10:19.276 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:10:19.294 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:10:19.297 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:10:19.303 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:10:19.305 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:10:19.305 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:10:19.305 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:10:19.309 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:10:19.310 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:10:25.472 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:10:25.475 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:10:25.475 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:10:25.477 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:10:25.477 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:10:25.478 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:10:25.478 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:10:25.478 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:10:25.478 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:10:25.481 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:10:25.482 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:10:25.482 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:10:25.482 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:10:25.487 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:10:25.487 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:10:49.273 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:10:49.276 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:10:49.276 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:10:49.276 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:10:49.276 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:10:49.276 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:10:49.276 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:10:49.299 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:10:49.302 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:10:49.307 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:10:49.309 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:10:49.309 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:10:49.309 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:10:49.312 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:10:49.312 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:11:19.253 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:11:19.255 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:11:19.255 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:11:19.256 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:11:19.256 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:11:19.256 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:11:19.256 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:11:19.272 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:11:19.274 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:11:19.279 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:11:19.281 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:11:19.282 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:11:19.282 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:11:19.284 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:11:19.284 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:11:49.278 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:11:49.283 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:11:49.283 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:11:49.283 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:11:49.284 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:11:49.284 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:11:49.284 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:11:49.320 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:11:49.325 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:11:49.335 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:11:49.338 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:11:49.339 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:11:49.339 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:11:49.345 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:11:49.346 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:12:19.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:12:19.279 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:12:19.279 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:12:19.279 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:12:19.279 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:12:19.280 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:12:19.280 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:12:19.313 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:12:19.316 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:12:19.325 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:12:19.329 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:12:19.329 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:12:19.330 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:12:19.335 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:12:19.336 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:12:49.260 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:12:49.262 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:12:49.263 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:12:49.263 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:12:49.263 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:12:49.263 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:12:49.263 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:12:49.283 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:12:49.285 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:12:49.291 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:12:49.293 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:12:49.293 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:12:49.294 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:12:49.298 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:12:49.298 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:13:19.263 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:13:19.266 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:13:19.266 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:13:19.266 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:13:19.266 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:13:19.266 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:13:19.266 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:13:19.284 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:13:19.287 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:13:19.292 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:13:19.294 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:13:19.295 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:13:19.295 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:13:19.299 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:13:19.299 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:13:52.260 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:13:52.262 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:13:52.262 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:13:52.262 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:13:52.262 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:13:52.262 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:13:52.263 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:13:52.282 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:13:52.284 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:13:52.289 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:13:52.291 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:13:52.291 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:13:52.291 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:13:52.293 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:13:52.294 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:14:52.270 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:14:52.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:14:52.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:14:52.273 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:14:52.274 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:14:52.274 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:14:52.274 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:14:52.297 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:14:52.300 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:14:52.305 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:14:52.307 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:14:52.307 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:14:52.307 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:14:52.310 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:14:52.311 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:15:52.268 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:15:52.273 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:15:52.274 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:15:52.274 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:15:52.274 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:15:52.274 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:15:52.275 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:15:52.308 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:15:52.312 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:15:52.320 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:15:52.324 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:15:52.325 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:15:52.325 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:15:52.330 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:15:52.331 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:16:15.469 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:16:15.472 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:16:15.472 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:16:15.476 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:16:15.477 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:16:15.477 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:16:15.477 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:16:15.477 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:16:15.478 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:16:15.481 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:16:15.484 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:16:15.484 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:16:15.485 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:16:15.489 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:16:15.489 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:16:16.465 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:16:16.467 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:16:16.514 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:16:16.517 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:16:16.517 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:16:16.518 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:16:16.519 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:16:16.519 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:16:16.519 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:16:16.546 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:16:16.550 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:16:16.560 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:16:16.564 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:16:16.565 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:16:16.565 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:16:16.571 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:16:16.571 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:16:17.055 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:16:17.056 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:16:17.056 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:16:17.061 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:16:17.062 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:16:17.062 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:16:17.062 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:16:17.062 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:16:17.063 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:16:17.069 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:16:17.084 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:16:17.084 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:16:17.085 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:16:17.085 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:16:17.085 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:16:17.091 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:16:17.091 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:16:17.092 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:16:17.477 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:16:17.534 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:16:20.680 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:16:20.687 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:16:20.750 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:16:20.753 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:16:20.754 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:16:20.756 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:16:20.757 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:16:20.757 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:16:20.758 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:16:20.783 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:16:20.786 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:16:20.795 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:16:20.797 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:16:20.797 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:16:20.797 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:16:20.801 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:16:20.801 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:16:21.293 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:16:21.303 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:16:21.306 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:16:21.308 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:16:21.309 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:16:21.309 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:16:21.309 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:16:21.309 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:16:21.310 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:16:21.324 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:16:21.355 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:16:21.357 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:16:21.359 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:16:21.360 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:16:21.360 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:16:21.365 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:16:21.365 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:16:21.365 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:16:21.659 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:16:21.682 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:16:25.107 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:16:51.306 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:16:51.310 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:16:51.310 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:16:51.311 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:16:51.311 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:16:51.311 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:16:51.311 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:16:51.347 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:16:51.351 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:16:51.362 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:16:51.366 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:16:51.366 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:16:51.366 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:16:51.372 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:16:51.373 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:17:05.932 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:17:05.936 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:17:05.936 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:17:05.940 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:17:05.941 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:17:05.941 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:17:05.941 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:17:05.942 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:17:05.942 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:17:05.944 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:17:05.946 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:17:05.946 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:17:05.947 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:17:05.950 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:17:05.950 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:17:19.877 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:17:19.880 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:17:19.880 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:17:19.882 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:17:19.883 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:17:19.883 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:17:19.883 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:17:19.883 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:17:19.883 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:17:19.885 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:17:19.889 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:17:19.889 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:17:19.890 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:17:19.897 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:17:19.897 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:17:20.784 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:17:20.787 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:17:20.787 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:17:20.787 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:17:20.788 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:17:20.788 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:17:20.789 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:17:20.813 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:17:20.816 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:17:20.823 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:17:20.825 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:17:20.826 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:17:20.826 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:17:20.831 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:17:20.832 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:17:28.138 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:17:28.140 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:17:28.174 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:17:28.177 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:17:28.177 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:17:28.178 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:17:28.178 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:17:28.178 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:17:28.179 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:17:28.207 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:17:28.212 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:17:28.219 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:17:28.222 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:17:28.222 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:17:28.223 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:17:28.227 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:17:28.227 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:17:28.723 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:17:28.723 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:17:28.724 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:17:28.732 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:17:28.732 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:17:28.733 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:17:28.733 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:17:28.733 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:17:28.734 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:17:28.735 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:17:28.746 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:17:28.747 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:17:28.747 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:17:28.747 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:17:28.747 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:17:28.753 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:17:28.753 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:17:28.753 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:17:29.140 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:17:29.177 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:17:54.356 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:17:54.360 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:17:54.360 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:17:54.362 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:17:54.362 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:17:54.362 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:17:54.363 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:17:54.363 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:17:54.363 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:17:54.366 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:17:54.369 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:17:54.369 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:17:54.369 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:17:54.374 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:17:54.374 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:17:58.271 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:17:58.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:17:58.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:17:58.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:17:58.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:17:58.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:17:58.275 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:17:58.297 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:17:58.299 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:17:58.304 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:17:58.306 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:17:58.306 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:17:58.306 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:17:58.310 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:17:58.311 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:18:28.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:18:28.270 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:18:28.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:18:28.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:18:28.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:18:28.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:18:28.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:18:28.292 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:18:28.295 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:18:28.301 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:18:28.303 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:18:28.303 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:18:28.304 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:18:28.307 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:18:28.307 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:18:58.270 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:18:58.273 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:18:58.273 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:18:58.274 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:18:58.274 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:18:58.274 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:18:58.274 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:18:58.299 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:18:58.304 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:18:58.313 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:18:58.316 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:18:58.317 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:18:58.317 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:18:58.321 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:18:58.322 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:19:25.444 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:19:25.451 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:19:25.451 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:19:25.456 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:19:25.457 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:19:25.457 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:19:25.458 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:19:25.458 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:19:25.458 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:19:25.462 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:19:25.465 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:19:25.466 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:19:25.466 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:19:25.473 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:19:25.473 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:19:26.940 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:19:26.943 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:19:27.074 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:19:27.078 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:19:27.079 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:19:27.079 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:19:27.080 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:19:27.080 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:19:27.081 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:19:27.135 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:19:27.143 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:19:27.154 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:19:27.160 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:19:27.160 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:19:27.161 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:19:27.169 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:19:27.170 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:19:27.627 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:19:27.630 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:19:27.630 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:19:27.634 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:19:27.635 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:19:27.635 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:19:27.635 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:19:27.636 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:19:27.636 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:19:27.644 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:19:27.660 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:19:27.661 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:19:27.661 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:19:27.661 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:19:27.662 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:19:27.669 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:19:27.669 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:19:27.669 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:19:27.933 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:19:27.956 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:19:32.330 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:19:32.337 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:19:57.138 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:19:57.141 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:19:57.141 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:19:57.142 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:19:57.142 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:19:57.142 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:19:57.143 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:19:57.163 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:19:57.165 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:19:57.170 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:19:57.172 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:19:57.172 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:19:57.173 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:19:57.175 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:19:57.176 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:20:27.128 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:20:27.134 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:20:27.135 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:20:27.136 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:20:27.136 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:20:27.136 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:20:27.137 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:20:27.163 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:20:27.166 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:20:27.170 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:20:27.172 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:20:27.173 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:20:27.173 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:20:27.176 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:20:27.176 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:20:43.251 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:20:43.251 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:20:53.516 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:20:53.517 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:20:53.559 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:20:53.561 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:20:53.561 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:20:53.561 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:20:53.562 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:20:53.562 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:20:53.562 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:20:53.585 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:20:53.588 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:20:53.594 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:20:53.597 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:20:53.597 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:20:53.597 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:20:53.600 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:20:53.600 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:20:54.098 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:20:54.099 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:20:54.100 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:20:54.104 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:20:54.104 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:20:54.105 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:20:54.105 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:20:54.105 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:20:54.105 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:20:54.110 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:20:54.117 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:20:54.118 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:20:54.118 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:20:54.118 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:20:54.118 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:20:54.122 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:20:54.122 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:20:54.122 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:20:54.522 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:20:54.546 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:20:56.484 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:20:56.484 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:21:22.028 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:21:22.031 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:21:22.031 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:21:22.032 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:21:22.032 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:21:22.033 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:21:22.033 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:21:22.033 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:21:22.033 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:21:22.034 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:21:22.036 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:21:22.036 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:21:22.036 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:21:22.039 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:21:22.039 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:21:23.586 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:21:23.587 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:21:23.588 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:21:23.588 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:21:23.588 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:21:23.588 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:21:23.588 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:21:23.606 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:21:23.608 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:21:23.614 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:21:23.615 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:21:23.615 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:21:23.615 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:21:23.617 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:21:23.618 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:21:24.352 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:21:24.352 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:21:33.879 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:21:33.881 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:21:33.881 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:21:33.882 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:21:33.882 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:21:33.882 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:21:33.883 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:21:33.883 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:21:33.883 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:21:33.884 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:21:33.886 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:21:33.886 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:21:33.887 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:21:33.890 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:21:33.890 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:21:36.746 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:21:36.746 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:21:54.255 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:21:54.256 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:21:54.257 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:21:54.257 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:21:54.257 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:21:54.257 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:21:54.257 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:21:54.269 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:21:54.270 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:21:54.274 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:21:54.276 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:21:54.276 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:21:54.276 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:21:54.278 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:21:54.278 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:22:24.264 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:22:24.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:22:24.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:22:24.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:22:24.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:22:24.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:22:24.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:22:24.282 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:22:24.285 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:22:24.289 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:22:24.291 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:22:24.291 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:22:24.291 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:22:24.294 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:22:24.294 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:22:54.267 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:22:54.269 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:22:54.269 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:22:54.269 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:22:54.269 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:22:54.269 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:22:54.270 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:22:54.289 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:22:54.291 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:22:54.295 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:22:54.296 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:22:54.297 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:22:54.297 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:22:54.299 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:22:54.300 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:23:24.267 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:23:24.272 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:23:24.273 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:23:24.273 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:23:24.273 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:23:24.273 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:23:24.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:23:24.312 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:23:24.317 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:23:24.326 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:23:24.331 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:23:24.331 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:23:24.331 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:23:24.338 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:23:24.338 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:23:54.276 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:23:54.280 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:23:54.280 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:23:54.281 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:23:54.281 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:23:54.281 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:23:54.282 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:23:54.318 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:23:54.322 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:23:54.332 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:23:54.336 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:23:54.336 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:23:54.336 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:23:54.342 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:23:54.342 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:24:24.288 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:24:24.292 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:24:24.293 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:24:24.293 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:24:24.294 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:24:24.294 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:24:24.295 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:24:24.329 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:24:24.333 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:24:24.342 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:24:24.344 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:24:24.345 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:24:24.346 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:24:24.352 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:24:24.352 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:25:25.259 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:25:25.261 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:25:25.261 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:25:25.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:25:25.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:25:25.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:25:25.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:25:25.284 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:25:25.286 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:25:25.290 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:25:25.292 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:25:25.293 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:25:25.293 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:25:25.295 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:25:25.295 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:26:26.256 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:26:26.258 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:26:26.258 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:26:26.258 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:26:26.259 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:26:26.259 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:26:26.259 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:26:26.279 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:26:26.282 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:26:26.287 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:26:26.290 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:26:26.290 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:26:26.290 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:26:26.293 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:26:26.293 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:27:27.283 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:27:27.286 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:27:27.286 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:27:27.286 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:27:27.286 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:27:27.287 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:27:27.287 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:27:27.314 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:27:27.316 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:27:27.322 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:27:27.324 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:27:27.324 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:27:27.324 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:27:27.327 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:27:27.327 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:28:28.270 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:28:28.273 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:28:28.273 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:28:28.273 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:28:28.273 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:28:28.273 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:28:28.274 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:28:28.299 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:28:28.302 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:28:28.307 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:28:28.310 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:28:28.310 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:28:28.311 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:28:28.315 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:28:28.315 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:28:42.009 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:28:42.012 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:28:42.013 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:28:42.016 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:28:42.016 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:28:42.016 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:28:42.017 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:28:42.017 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:28:42.018 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:28:42.019 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:28:42.021 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:28:42.022 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:28:42.022 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:28:42.026 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:28:42.026 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:28:43.301 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:28:43.304 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:28:43.337 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:28:43.339 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:28:43.340 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:28:43.340 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:28:43.340 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:28:43.340 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:28:43.341 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:28:43.362 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:28:43.365 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:28:43.370 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:28:43.373 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:28:43.373 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:28:43.373 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:28:43.376 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:28:43.376 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:28:43.867 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:28:43.867 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:28:43.867 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:28:43.875 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:28:43.875 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:28:43.875 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:28:43.875 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:28:43.876 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:28:43.876 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:28:43.878 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:28:43.890 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:28:43.891 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:28:43.891 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:28:43.891 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:28:43.891 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:28:43.896 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:28:43.897 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:28:43.897 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:28:44.301 [http-nio-8080-exec-5] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:28:44.324 [http-nio-8080-exec-5] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:28:45.632 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:28:45.635 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:29:14.273 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:29:14.277 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:29:14.278 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:29:14.278 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:29:14.278 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:29:14.278 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:29:14.278 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:29:14.313 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:29:14.316 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:29:14.323 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:29:14.325 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:29:14.326 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:29:14.326 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:29:14.332 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:29:14.333 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:29:44.274 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:29:44.277 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:29:44.277 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:29:44.278 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:29:44.278 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:29:44.278 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:29:44.278 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:29:44.302 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:29:44.306 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:29:44.311 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:29:44.314 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:29:44.314 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:29:44.314 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:29:44.318 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:29:44.318 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:30:14.262 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:30:14.264 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:30:14.264 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:30:14.264 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:30:14.264 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:30:14.264 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:30:14.264 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:30:14.281 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:30:14.284 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:30:14.287 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:30:14.289 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:30:14.289 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:30:14.289 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:30:14.291 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:30:14.291 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:30:34.876 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:30:34.881 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:30:34.881 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:30:34.885 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:30:34.886 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:30:34.886 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:30:34.887 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:30:34.887 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:30:34.888 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:30:34.889 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:30:34.893 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:30:34.893 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:30:34.893 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:30:34.900 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:30:34.900 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:30:35.857 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:30:35.860 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:30:35.939 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:30:35.944 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:30:35.945 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:30:35.945 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:30:35.946 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:30:35.946 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:30:35.946 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:30:35.987 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:30:35.993 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:30:36.003 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:30:36.008 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:30:36.008 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:30:36.009 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:30:36.016 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:30:36.017 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:30:36.478 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:30:36.478 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:30:36.479 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:30:36.481 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:30:36.481 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:30:36.482 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:30:36.482 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:30:36.482 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:30:36.482 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:30:36.484 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:30:36.490 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:30:36.490 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:30:36.490 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:30:36.490 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:30:36.490 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:30:36.493 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:30:36.493 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:30:36.493 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:30:36.845 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:30:36.863 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:30:38.134 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:30:38.135 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:30:58.689 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:30:58.689 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:31:06.289 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:31:06.293 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:31:06.293 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:31:06.293 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:31:06.293 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:31:06.293 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:31:06.293 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:31:06.319 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:31:06.322 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:31:06.328 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:31:06.330 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:31:06.331 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:31:06.331 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:31:06.333 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:31:06.334 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:31:23.983 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:31:23.999 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:31:24.003 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:31:24.007 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:31:24.007 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:31:24.007 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:31:24.008 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:31:24.008 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:31:24.008 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:31:24.010 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:31:24.017 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:31:24.018 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:31:24.018 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:31:24.029 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:31:24.030 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:31:36.283 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:31:36.286 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:31:36.286 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:31:36.287 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:31:36.287 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:31:36.287 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:31:36.287 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:31:36.320 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:31:36.323 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:31:36.329 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:31:36.331 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:31:36.332 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:31:36.332 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:31:36.337 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:31:36.337 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:31:45.729 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:31:45.738 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:31:45.738 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:31:45.747 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:31:45.748 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:31:45.749 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:31:45.750 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:31:45.750 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:31:45.750 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:31:45.753 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:31:45.759 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:31:45.759 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:31:45.759 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:31:45.767 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:31:45.767 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:32:06.295 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:32:06.300 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:32:06.301 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:32:06.301 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:32:06.302 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:32:06.302 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:32:06.302 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:32:06.347 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:32:06.351 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:32:06.361 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:32:06.364 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:32:06.364 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:32:06.365 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:32:06.368 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:32:06.369 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:32:36.270 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:32:36.273 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:32:36.273 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:32:36.273 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:32:36.273 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:32:36.273 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:32:36.273 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:32:36.298 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:32:36.300 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:32:36.304 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:32:36.305 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:32:36.306 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:32:36.306 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:32:36.309 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:32:36.310 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:33:06.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:33:06.272 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:33:06.272 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:33:06.272 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:33:06.272 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:33:06.272 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:33:06.272 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:33:06.288 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:33:06.291 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:33:06.295 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:33:06.298 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:33:06.298 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:33:06.298 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:33:06.301 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:33:06.301 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:33:36.275 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:33:36.281 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:33:36.281 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:33:36.281 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:33:36.281 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:33:36.282 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:33:36.282 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:33:36.302 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:33:36.304 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:33:36.307 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:33:36.309 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:33:36.309 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:33:36.309 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:33:36.311 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:33:36.312 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:33:40.528 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:33:40.530 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:33:40.530 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:33:40.532 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:33:40.532 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:33:40.533 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:33:40.533 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:33:40.533 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:33:40.533 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:33:40.534 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:33:40.536 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:33:40.536 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:33:40.536 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:33:40.539 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:33:40.539 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:33:42.625 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:33:42.627 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:33:55.648 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:33:55.651 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:33:55.651 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:33:55.654 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:33:55.654 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:33:55.654 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:33:55.655 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:33:55.655 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:33:55.655 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:33:55.656 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:33:55.657 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:33:55.657 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:33:55.657 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:33:55.660 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:33:55.660 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:34:06.255 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:34:06.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:34:06.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:34:06.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:34:06.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:34:06.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:34:06.257 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:34:06.272 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:34:06.274 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:34:06.277 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:34:06.278 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:34:06.278 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:34:06.278 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:34:06.280 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:34:06.280 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:34:20.027 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:34:20.029 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:34:20.030 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:34:20.032 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:34:20.032 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:34:20.032 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:34:20.033 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:34:20.033 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:34:20.033 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:34:20.034 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:34:20.036 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:34:20.036 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:34:20.036 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:34:20.041 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:34:20.041 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:34:35.982 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:34:35.985 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:34:35.985 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:34:35.985 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:34:35.985 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:34:35.985 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:34:35.986 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:34:36.012 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:34:36.015 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:34:36.019 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:34:36.021 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:34:36.021 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:34:36.021 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:34:36.024 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:34:36.024 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:35:06.267 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:35:06.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:35:06.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:35:06.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:35:06.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:35:06.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:35:06.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:35:06.290 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:35:06.292 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:35:06.297 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:35:06.298 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:35:06.299 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:35:06.299 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:35:06.301 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:35:06.301 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:35:36.008 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:35:36.014 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:35:36.014 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:35:36.015 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:35:36.015 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:35:36.016 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:35:36.016 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:35:36.062 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:35:36.067 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:35:36.077 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:35:36.081 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:35:36.082 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:35:36.082 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:35:36.089 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:35:36.090 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:35:53.178 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:35:53.185 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:35:53.185 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:35:53.191 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:35:53.192 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:35:53.194 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:35:53.195 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:35:53.195 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:35:53.196 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:35:53.199 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:35:53.211 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:35:53.215 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:35:53.218 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:35:53.239 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:35:53.244 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:36:06.268 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:36:06.271 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:36:06.271 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:36:06.271 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:36:06.272 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:36:06.272 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:36:06.272 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:36:06.297 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:36:06.299 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:36:06.305 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:36:06.308 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:36:06.308 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:36:06.308 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:36:06.313 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:36:06.313 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:36:26.220 [MessageBroker-20] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 20, active threads = 1, queued tasks = 8, completed tasks = 63]
2025-07-13 03:36:36.277 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:36:36.281 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:36:36.281 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:36:36.282 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:36:36.282 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:36:36.282 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:36:36.282 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:36:36.309 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:36:36.312 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:36:36.319 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:36:36.322 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:36:36.322 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:36:36.322 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:36:36.326 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:36:36.326 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:36:57.636 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:36:57.640 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:36:57.640 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:36:57.643 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:36:57.643 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:36:57.643 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:36:57.644 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:36:57.644 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:36:57.644 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:36:57.649 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:36:57.653 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:36:57.653 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:36:57.653 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:36:57.658 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:36:57.658 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:36:59.801 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:36:59.804 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:36:59.872 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:36:59.876 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:36:59.877 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:36:59.877 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:36:59.878 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:36:59.878 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:36:59.878 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:36:59.929 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:36:59.935 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:36:59.946 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:36:59.951 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:36:59.952 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:36:59.952 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:36:59.961 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:36:59.962 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:37:00.432 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:37:00.433 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:37:00.435 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:37:00.449 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:37:00.450 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:37:00.451 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:37:00.451 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:37:00.452 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:37:00.453 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:37:00.454 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:37:00.472 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:37:00.473 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:37:00.473 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:37:00.473 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:37:00.474 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:37:00.482 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:37:00.483 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:37:00.483 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:37:00.818 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:37:00.866 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:37:04.416 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:37:04.416 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:37:14.916 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:37:14.920 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:37:14.920 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:37:14.924 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:37:14.924 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:37:14.924 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:37:14.924 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:37:14.924 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:37:14.925 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:37:14.926 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:37:14.929 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:37:14.930 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:37:14.930 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:37:14.935 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:37:14.935 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:37:30.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:37:30.272 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:37:30.272 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:37:30.272 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:37:30.272 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:37:30.273 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:37:30.273 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:37:30.300 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:37:30.304 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:37:30.311 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:37:30.313 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:37:30.313 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:37:30.313 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:37:30.317 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:37:30.318 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:38:00.258 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:38:00.261 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:38:00.261 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:38:00.262 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:38:00.262 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:38:00.262 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:38:00.262 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:38:00.291 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:38:00.293 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:38:00.300 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:38:00.302 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:38:00.302 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:38:00.302 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:38:00.306 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:38:00.306 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:38:30.266 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:38:30.268 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:38:30.268 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:38:30.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:38:30.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:38:30.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:38:30.269 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:38:30.288 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:38:30.291 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:38:30.294 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:38:30.297 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:38:30.297 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:38:30.297 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:38:30.300 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:38:30.300 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:39:00.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:39:00.278 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:39:00.278 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:39:00.278 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:39:00.278 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:39:00.278 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:39:00.279 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:39:00.300 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:39:00.303 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:39:00.310 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:39:00.312 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:39:00.313 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:39:00.313 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:39:00.317 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:39:00.317 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:39:03.119 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:39:03.120 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:39:03.122 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:39:03.123 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:39:03.123 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:39:03.123 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:39:03.123 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:39:03.124 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:39:03.124 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:39:03.126 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:39:03.129 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:39:03.129 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:39:03.129 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:39:03.133 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:39:03.133 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:39:04.291 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:39:04.293 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:39:04.317 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:39:04.319 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:39:04.319 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:39:04.319 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:39:04.320 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:39:04.320 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:39:04.320 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:39:04.337 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:39:04.339 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:39:04.343 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:39:04.345 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:39:04.345 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:39:04.346 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:39:04.348 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:39:04.348 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:39:04.839 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:39:04.841 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:39:04.841 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:39:04.852 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:39:04.852 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:39:04.853 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:39:04.853 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:39:04.853 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:39:04.853 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:39:04.854 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:39:04.859 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:39:04.859 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:39:04.860 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:39:04.860 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:39:04.860 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:39:04.863 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:39:04.863 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:39:04.863 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:39:05.284 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:39:05.301 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:39:07.952 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:39:07.952 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:39:16.098 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:39:16.098 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:39:35.260 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:39:35.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:39:35.263 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:39:35.263 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:39:35.263 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:39:35.264 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:39:35.264 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:39:35.285 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:39:35.287 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:39:35.290 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:39:35.292 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:39:35.292 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:39:35.292 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:39:35.295 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:39:35.295 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:39:37.177 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:39:37.178 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:39:37.178 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:39:37.182 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:39:37.182 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:39:37.183 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:39:37.183 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:39:37.183 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:39:37.183 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:39:37.185 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:39:37.187 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:39:37.187 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:39:37.187 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:39:37.190 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:39:37.190 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:39:42.281 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:39:42.284 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:39:42.285 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:39:42.289 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:39:42.289 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:39:42.290 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:39:42.290 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:39:42.291 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:39:42.291 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:39:42.291 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:39:42.293 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:39:42.294 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:39:42.294 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:39:42.300 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:39:42.301 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:40:05.317 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:40:05.322 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:40:05.322 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:40:05.322 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:40:05.324 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:40:05.324 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:40:05.324 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:40:05.352 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:40:05.353 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:40:05.357 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:40:05.358 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:40:05.358 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:40:05.359 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:40:05.361 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:40:05.362 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:40:35.268 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:40:35.269 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:40:35.269 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:40:35.269 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:40:35.270 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:40:35.270 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:40:35.270 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:40:35.284 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:40:35.285 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:40:35.289 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:40:35.290 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:40:35.290 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:40:35.290 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:40:35.293 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:40:35.293 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:41:01.190 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:41:01.193 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:41:01.193 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:41:01.196 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:41:01.196 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:41:01.197 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:41:01.197 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:41:01.197 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:41:01.197 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:41:01.198 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:41:01.200 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:41:01.200 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:41:01.200 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:41:01.202 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:41:01.202 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:41:03.681 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:41:03.684 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:41:03.684 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:41:03.685 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:41:03.685 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:41:03.686 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:41:03.686 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:41:03.686 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:41:03.686 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:41:03.687 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:41:03.689 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:41:03.689 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:41:03.689 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:41:03.692 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:41:03.692 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:41:04.351 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:41:04.352 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:41:04.352 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:41:04.353 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:41:04.353 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:41:04.353 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:41:04.353 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:41:04.368 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:41:04.369 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:41:04.373 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:41:04.374 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:41:04.374 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:41:04.374 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:41:04.376 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:41:04.376 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:41:16.319 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:41:16.324 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:41:16.324 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:41:16.326 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:41:16.326 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:41:16.326 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:41:16.327 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:41:16.327 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:41:16.327 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:41:16.327 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:41:16.330 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:41:16.330 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:41:16.330 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:41:16.333 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:41:16.333 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:41:35.269 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:41:35.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:41:35.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:41:35.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:41:35.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:41:35.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:41:35.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:41:35.296 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:41:35.298 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:41:35.301 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:41:35.303 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:41:35.303 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:41:35.303 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:41:35.306 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:41:35.306 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:42:05.258 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:42:05.260 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:42:05.261 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:42:05.261 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:42:05.261 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:42:05.261 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:42:05.261 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:42:05.288 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:42:05.290 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:42:05.293 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:42:05.295 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:42:05.295 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:42:05.295 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:42:05.298 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:42:05.299 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:42:35.254 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:42:35.256 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:42:35.257 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:42:35.257 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:42:35.257 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:42:35.257 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:42:35.257 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:42:35.278 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:42:35.280 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:42:35.284 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:42:35.286 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:42:35.286 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:42:35.286 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:42:35.288 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:42:35.288 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:43:13.280 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:43:13.283 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:43:13.284 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:43:13.286 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:43:13.287 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:43:13.287 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:43:13.287 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:43:13.288 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:43:13.288 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:43:13.292 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:43:13.296 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:43:13.296 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:43:13.297 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:43:13.304 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:43:13.304 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:43:13.314 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:43:13.318 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:43:13.319 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:43:13.319 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:43:13.320 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:43:13.320 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:43:13.320 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:43:13.350 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:43:13.355 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:43:13.362 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:43:13.366 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:43:13.367 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:43:13.367 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:43:13.374 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:43:13.375 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:43:14.330 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 03:43:14.332 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 03:43:14.359 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:43:14.361 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:43:14.361 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:43:14.361 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:43:14.362 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:43:14.362 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:43:14.362 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:43:14.381 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:43:14.384 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:43:14.389 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:43:14.390 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:43:14.390 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:43:14.390 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:43:14.394 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:43:14.394 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:43:14.886 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 03:43:14.886 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:43:14.887 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 03:43:14.890 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 03:43:14.890 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 03:43:14.890 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 03:43:14.890 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 03:43:14.890 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 03:43:14.890 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 03:43:14.893 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 03:43:14.900 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 03:43:14.900 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:43:14.900 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:43:14.900 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 03:43:14.900 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 03:43:14.902 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 03:43:14.903 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 03:43:14.903 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 03:43:15.332 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 03:43:15.350 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 03:43:16.991 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:43:16.991 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:43:24.514 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:43:24.514 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 03:43:45.100 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:43:45.102 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:43:45.102 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:43:45.104 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:43:45.105 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:43:45.105 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:43:45.105 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:43:45.106 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:43:45.106 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:43:45.107 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:43:45.108 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:43:45.108 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:43:45.108 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:43:45.111 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:43:45.112 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:43:45.121 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 03:43:45.123 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 03:43:45.123 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 03:43:45.123 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 03:43:45.123 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 03:43:45.123 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 03:43:45.123 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 03:43:45.138 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 03:43:45.140 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 03:43:45.144 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 03:43:45.146 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 03:43:45.146 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 03:43:45.146 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 03:43:45.149 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 03:43:45.149 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 03:43:47.352 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 03:43:47.352 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 12:49:08.638 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 12:49:08.668 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 1740 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 12:49:08.669 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 12:49:08.704 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 12:49:08.704 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 12:49:09.349 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 12:49:09.349 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 12:49:09.487 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 131 ms. Found 10 JPA repository interfaces.
2025-07-13 12:49:09.796 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 12:49:09.798 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 12:49:09.823 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 12:49:09.823 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 12:49:09.824 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 12:49:09.825 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 12:49:09.825 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 12:49:09.826 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 12:49:09.826 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 12:49:09.827 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 12:49:09.827 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 12:49:09.827 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 12:49:09.827 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 0 Redis repository interfaces.
2025-07-13 12:49:10.616 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 12:49:10.619 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 12:49:10.644 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 12:49:10.656 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 12:49:10.658 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 12:49:10.658 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 12:49:10.712 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 12:49:10.714 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2008 ms
2025-07-13 12:49:10.953 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 12:49:11.115 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@42a5e34a
2025-07-13 12:49:11.116 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 12:49:11.180 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 12:49:11.274 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.053s)
2025-07-13 12:49:11.296 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 12:49:11.299 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 12:49:11.371 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 12:49:11.406 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 12:49:11.430 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 12:49:11.627 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 12:49:12.501 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 12:49:12.547 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 12:49:13.230 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 12:49:13.635 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 12:49:14.073 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 12:49:14.073 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 12:49:14.286 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 12:49:14.435 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 12:49:14.471 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 12:49:14.471 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 12:49:14.512 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 12:49:14.513 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 12:49:14.550 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 12:49:14.560 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 12:49:14.569 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 12:49:14.578 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 12:49:14.687 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 12:49:14.694 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 12:49:14.960 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 12:49:15.098 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 12:49:15.337 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 12:49:15.844 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 12:49:15.889 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 12:49:15.916 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 12:49:15.918 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 12:49:15.919 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@514680e4]]
2025-07-13 12:49:15.938 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 12:49:15.963 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 7.69 seconds (process running for 8.06)
2025-07-13 12:49:15.998 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 12:49:16.051 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 12:49:16.069 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 12:49:16.085 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 12:49:16.098 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 12:49:16.112 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 12:49:16.127 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 12:49:16.159 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 12:49:36.160 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 12:49:36.161 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 12:49:36.166 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 5 ms
2025-07-13 12:49:36.533 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 12:49:36.535 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 12:49:36.582 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:49:36.585 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:49:36.585 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:49:36.585 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:49:36.585 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:49:36.585 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:49:36.586 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:49:36.626 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:49:36.629 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:49:36.657 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:49:36.660 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:49:36.661 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:49:36.661 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:49:36.665 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:49:36.666 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:49:37.126 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 12:49:37.131 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 12:49:37.131 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 12:49:37.145 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 12:49:37.150 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 12:49:37.151 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 12:49:37.151 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 12:49:37.151 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 12:49:37.154 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 12:49:37.154 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 12:49:37.156 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 12:49:37.156 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 12:49:37.156 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 12:49:37.156 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 12:49:37.157 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 12:49:37.166 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 12:49:37.166 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 12:49:37.166 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 12:49:37.446 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 12:49:37.477 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 12:49:39.243 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 12:49:52.554 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 12:49:52.555 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 12:49:57.000 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 12:49:57.000 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 12:50:06.637 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:50:06.640 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:50:06.640 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:50:06.641 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:50:06.641 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:50:06.641 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:50:06.641 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:50:06.668 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:50:06.671 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:50:06.677 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:50:06.680 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:50:06.680 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:50:06.680 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:50:06.684 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:50:06.684 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:50:15.885 [MessageBroker-4] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 12:50:27.413 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 12:50:27.413 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 12:50:37.375 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:50:37.378 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:50:37.378 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:50:37.378 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:50:37.378 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:50:37.378 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:50:37.378 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:50:37.397 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:50:37.399 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:50:37.405 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:50:37.407 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:50:37.407 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:50:37.407 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:50:37.410 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:50:37.410 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:50:51.065 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:50:51.067 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:50:51.067 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:50:51.071 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:50:51.071 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:50:51.071 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:50:51.071 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:50:51.071 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:50:51.072 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:50:51.073 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:50:51.075 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:50:51.076 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:50:51.076 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:50:51.081 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:50:51.081 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:51:07.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:51:07.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:51:07.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:51:07.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:51:07.380 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:51:07.380 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:51:07.380 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:51:07.403 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:51:07.406 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:51:07.412 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:51:07.415 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:51:07.415 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:51:07.415 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:51:07.419 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:51:07.419 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:51:37.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:51:37.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:51:37.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:51:37.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:51:37.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:51:37.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:51:37.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:51:37.405 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:51:37.407 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:51:37.412 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:51:37.414 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:51:37.414 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:51:37.414 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:51:37.416 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:51:37.416 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:52:01.746 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:52:01.750 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:52:01.750 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:52:01.754 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:52:01.754 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:52:01.754 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:52:01.755 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:52:01.755 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:52:01.755 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:52:01.758 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:52:01.761 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:52:01.762 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:52:01.762 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:52:01.767 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:52:01.767 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:52:02.840 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 12:52:02.842 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 12:52:02.869 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:52:02.871 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:52:02.871 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:52:02.872 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:52:02.872 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:52:02.873 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:52:02.873 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:52:02.910 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:52:02.914 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:52:02.922 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:52:02.925 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:52:02.925 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:52:02.925 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:52:02.929 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:52:02.930 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:52:03.403 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 12:52:03.404 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 12:52:03.405 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 12:52:03.408 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 12:52:03.408 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 12:52:03.408 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 12:52:03.409 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 12:52:03.409 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 12:52:03.409 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 12:52:03.414 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 12:52:03.424 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 12:52:03.424 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 12:52:03.424 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 12:52:03.424 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 12:52:03.425 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 12:52:03.430 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 12:52:03.430 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 12:52:03.430 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 12:52:03.844 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 12:52:03.871 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 12:52:06.069 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 12:52:06.069 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 12:52:14.712 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 12:52:14.715 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 12:52:14.744 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:52:14.748 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:52:14.748 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:52:14.748 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:52:14.748 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:52:14.749 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:52:14.749 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:52:14.775 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:52:14.778 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:52:14.786 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:52:14.789 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:52:14.789 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:52:14.789 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:52:14.794 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:52:14.795 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:52:15.285 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 12:52:15.286 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 12:52:15.287 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 12:52:15.290 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 12:52:15.291 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 12:52:15.291 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 12:52:15.291 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 12:52:15.292 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 12:52:15.292 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 12:52:15.295 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 12:52:15.305 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 12:52:15.305 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 12:52:15.305 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 12:52:15.306 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 12:52:15.306 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 12:52:15.310 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 12:52:15.311 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 12:52:15.311 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 12:52:16.374 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 12:52:16.392 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 12:52:45.403 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:52:45.407 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:52:45.408 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:52:45.408 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:52:45.408 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:52:45.410 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:52:45.411 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:53:15.384 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:53:15.386 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:53:15.387 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:53:15.387 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:53:15.387 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:53:15.387 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:53:15.387 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:53:45.384 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:53:45.387 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:53:45.387 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:53:45.387 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:53:45.387 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:53:45.387 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:53:45.389 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:54:15.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:54:15.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:54:15.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:54:15.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:54:15.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:54:15.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:54:15.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:54:45.373 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:54:45.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:54:45.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:54:45.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:54:45.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:54:45.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:54:45.377 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:55:15.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:55:15.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:55:15.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:55:15.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:55:15.391 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:55:15.391 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:55:15.391 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:55:45.387 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:55:45.389 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:55:45.389 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:55:45.389 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:55:45.389 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:55:45.390 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:55:45.390 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:56:18.020 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:56:18.022 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:56:18.023 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:56:18.023 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:56:18.023 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:56:18.023 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:56:18.023 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:56:18.045 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:56:18.048 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:56:18.048 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:56:18.048 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:56:18.048 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:56:18.049 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:56:18.049 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:56:22.438 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 12:56:22.439 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 12:56:44.796 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:56:44.798 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:56:44.799 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:56:44.799 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:56:44.799 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:56:44.799 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:56:44.799 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:56:44.824 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:56:44.827 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:56:44.837 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:56:44.839 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:56:44.839 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:56:44.840 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:56:44.843 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:56:44.843 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:57:15.386 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:57:15.389 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:57:15.389 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:57:15.389 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:57:15.389 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:57:15.390 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:57:15.390 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:57:15.411 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:57:15.413 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:57:15.417 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:57:15.420 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:57:15.420 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:57:15.420 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:57:15.422 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:57:15.422 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:57:45.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:57:45.380 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:57:45.380 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:57:45.381 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:57:45.381 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:57:45.381 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:57:45.381 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:57:45.402 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:57:45.405 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:57:45.411 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:57:45.413 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:57:45.413 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:57:45.414 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:57:45.416 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:57:45.417 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:58:44.381 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:58:44.383 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:58:44.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:58:44.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:58:44.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:58:44.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:58:44.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:58:44.401 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:58:44.402 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:58:44.407 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:58:44.408 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:58:44.409 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:58:44.409 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:58:44.411 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:58:44.411 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 12:59:44.382 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 12:59:44.384 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 12:59:44.385 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 12:59:44.385 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 12:59:44.385 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 12:59:44.385 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 12:59:44.385 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 12:59:44.407 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 12:59:44.409 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 12:59:44.419 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 12:59:44.422 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 12:59:44.422 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 12:59:44.422 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 12:59:44.425 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 12:59:44.425 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:00:00.004 [MessageBroker-3] INFO  c.i.i.u.s.DataConsistencyService - 开始执行数据一致性检查
2025-07-13 13:00:00.014 [MessageBroker-15] INFO  c.i.i.u.t.TemporaryFileCleanupTask - 开始执行过期临时文件清理任务
2025-07-13 13:00:00.031 [MessageBroker-15] INFO  c.i.i.u.t.TemporaryFileCleanupTask - 没有发现过期的临时文件
2025-07-13 13:00:00.099 [MessageBroker-3] INFO  c.i.i.u.s.DataConsistencyService - 数据一致性检查完成，发现 0 个不一致项
2025-07-13 13:00:13.328 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 256 class path changes (0 additions, 256 deletions, 0 modifications)
2025-07-13 13:00:13.349 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 13:00:13.349 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@514680e4]]
2025-07-13 13:00:13.349 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 13:00:13.354 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 13:00:13.725 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:00:13.732 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 13:00:13.737 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 13:00:13.951 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 1740 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 13:00:13.951 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 13:00:14.253 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:00:14.253 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:00:14.262 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 JPA repository interfaces.
2025-07-13 13:00:14.265 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:00:14.266 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 13:00:14.278 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-07-13 13:00:14.409 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:00:14.410 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 13:00:14.417 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 13:00:14.418 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 13:00:14.418 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:00:14.419 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:00:14.459 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:00:14.460 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 506 ms
2025-07-13 13:00:14.558 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-07-13 13:00:14.576 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@488db140
2025-07-13 13:00:14.576 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-07-13 13:00:14.591 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 13:00:14.647 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.031s)
2025-07-13 13:00:14.675 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 13:00:14.677 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 13:00:14.726 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:00:14.731 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:00:14.750 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:00:14.775 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:00:14.776 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:00:14.781 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:00:14.781 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-07-13 13:00:14.820 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-07-13 13:00:14.820 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 13:00:14.876 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 13:00:22.173 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 1740 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 13:00:22.173 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 13:00:22.414 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:00:22.414 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:00:22.465 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 50 ms. Found 10 JPA repository interfaces.
2025-07-13 13:00:22.582 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:00:22.582 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 13:00:22.596 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:22.596 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:22.597 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:22.597 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:22.597 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:22.597 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:22.598 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:22.598 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:22.598 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:22.599 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:22.599 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-07-13 13:00:22.767 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:00:22.769 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 13:00:22.769 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 13:00:22.769 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 13:00:22.770 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:00:22.770 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:00:22.799 [restartedMain] INFO  o.a.c.c.C.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:00:22.799 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 625 ms
2025-07-13 13:00:22.887 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2025-07-13 13:00:22.898 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection com.mysql.cj.jdbc.ConnectionImpl@13ce8ae1
2025-07-13 13:00:22.898 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2025-07-13 13:00:22.905 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 13:00:22.936 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.018s)
2025-07-13 13:00:22.952 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 13:00:22.953 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 13:00:22.992 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:00:22.994 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:00:22.999 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:00:23.156 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:00:23.173 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:00:23.548 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 13:00:23.855 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 13:00:23.855 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 13:00:23.927 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 13:00:24.014 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 13:00:24.056 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 13:00:24.057 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 13:00:24.094 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 13:00:24.095 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:00:24.109 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:00:24.116 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:00:24.123 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:00:24.133 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 13:00:24.213 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 13:00:24.232 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 13:00:24.241 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 13:00:24.250 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 31964 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 13:00:24.251 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 13:00:24.295 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 13:00:24.296 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 13:00:24.361 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 13:00:24.422 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 13:00:24.599 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 13:00:24.918 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 13:00:24.936 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 13:00:24.940 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 13:00:24.941 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 13:00:24.941 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@54c489fa]]
2025-07-13 13:00:24.941 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 13:00:24.953 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 2.803 seconds (process running for 677.05)
2025-07-13 13:00:24.955 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 13:00:24.972 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 13:00:24.986 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 13:00:24.999 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 13:00:25.023 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 13:00:25.038 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 13:00:25.054 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 13:00:25.087 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 13:00:25.091 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 13:00:25.117 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:00:25.118 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:00:25.282 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 154 ms. Found 10 JPA repository interfaces.
2025-07-13 13:00:25.675 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:00:25.676 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 13:00:25.708 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:25.708 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:25.709 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:25.709 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:25.710 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:25.711 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:25.711 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:25.712 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:25.712 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:25.713 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:00:25.713 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 30 ms. Found 0 Redis repository interfaces.
2025-07-13 13:00:26.700 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:00:26.705 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 13:00:26.721 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 13:00:26.734 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 13:00:26.736 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:00:26.737 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:00:26.809 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:00:26.811 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2514 ms
2025-07-13 13:00:27.086 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 13:00:27.230 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@499e4aef
2025-07-13 13:00:27.232 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 13:00:27.279 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 13:00:27.346 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.041s)
2025-07-13 13:00:27.365 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 13:00:27.372 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 13:00:27.462 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:00:27.535 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 13:00:27.573 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:00:27.826 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:00:29.078 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:00:29.114 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:00:29.875 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 13:00:30.317 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 13:00:30.514 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 13:00:30.514 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 13:00:30.715 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 13:00:30.866 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 13:00:30.893 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 13:00:30.894 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 13:00:30.932 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 13:00:30.932 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:00:30.966 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:00:30.976 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:00:30.985 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:00:30.995 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 13:00:31.113 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 13:00:31.122 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 13:00:31.332 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 13:00:31.465 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 13:00:31.709 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 13:00:32.280 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 13:00:32.301 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:00:32.303 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 13:00:32.309 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 13:00:32.367 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 13:00:36.020 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat-1].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 13:00:36.020 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 13:00:36.022 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 13:00:44.407 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:00:44.411 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:00:44.411 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:00:44.411 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:00:44.411 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:00:44.411 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:00:44.411 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:00:44.442 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:00:44.444 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:00:44.450 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:00:44.453 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:00:44.454 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:00:44.454 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:00:44.458 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:00:44.458 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:04:17.525 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 13:04:17.564 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 28876 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 13:04:17.565 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 13:04:17.601 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 13:04:17.601 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 13:04:18.290 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:04:18.290 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:04:18.437 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 140 ms. Found 10 JPA repository interfaces.
2025-07-13 13:04:18.765 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:04:18.766 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 13:04:18.792 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:04:18.793 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:04:18.793 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:04:18.794 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:04:18.795 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:04:18.795 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:04:18.796 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:04:18.796 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:04:18.797 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:04:18.798 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:04:18.799 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 0 Redis repository interfaces.
2025-07-13 13:04:19.569 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:04:19.572 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 13:04:19.575 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 13:04:19.584 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 13:04:19.586 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:04:19.586 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:04:19.641 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:04:19.642 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2039 ms
2025-07-13 13:04:19.886 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 13:04:20.011 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1ccc382e
2025-07-13 13:04:20.012 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 13:04:20.055 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 13:04:20.119 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.039s)
2025-07-13 13:04:20.137 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 13:04:20.140 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 13:04:20.216 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:04:20.251 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 13:04:20.277 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:04:20.473 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:04:21.338 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:04:21.382 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:04:22.104 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 13:04:22.527 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 13:04:22.957 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 13:04:22.957 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 13:04:23.128 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 13:04:23.294 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 13:04:23.323 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 13:04:23.323 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 13:04:23.363 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 13:04:23.364 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:04:23.399 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:04:23.408 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:04:23.418 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:04:23.427 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 13:04:23.542 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 13:04:23.550 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 13:04:23.752 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 13:04:23.880 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 13:04:24.116 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 13:04:24.635 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 13:04:24.680 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 13:04:24.712 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 13:04:24.714 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 13:04:24.716 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7d484d18]]
2025-07-13 13:04:24.716 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 13:04:24.756 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 7.62 seconds (process running for 7.985)
2025-07-13 13:04:24.828 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 13:04:24.847 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 13:04:24.859 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 13:04:24.872 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 13:04:24.882 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 13:04:24.892 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 13:04:24.902 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 13:04:24.929 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 13:04:35.640 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 13:04:35.641 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 13:04:35.644 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-07-13 13:04:36.672 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:04:36.674 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:04:36.717 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:04:36.719 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:04:36.719 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:04:36.720 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:04:36.720 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:04:36.720 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:04:36.721 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:04:36.753 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:04:36.756 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:04:36.769 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:04:36.772 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:04:36.773 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:04:36.774 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:04:36.776 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:04:36.776 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:04:37.254 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:04:37.257 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:04:37.257 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:04:37.264 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:04:37.265 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:04:37.265 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:04:37.265 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:04:37.266 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:04:37.267 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:04:37.274 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:04:37.285 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:04:37.285 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:04:37.286 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:04:37.286 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:04:37.287 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:04:37.297 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:04:37.298 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:04:37.298 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:04:37.616 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:04:37.650 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:04:42.209 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:04:42.210 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:05:00.935 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:05:00.935 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:05:06.768 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:05:06.772 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:05:06.772 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:05:06.773 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:05:06.774 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:05:06.774 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:05:06.774 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:05:06.812 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:05:06.816 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:05:06.829 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:05:06.833 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:05:06.834 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:05:06.834 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:05:06.841 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:05:06.841 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:05:24.667 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 13:05:36.778 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:05:36.781 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:05:36.782 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:05:36.782 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:05:36.783 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:05:36.783 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:05:36.783 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:05:36.817 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:05:36.822 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:05:36.828 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:05:36.833 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:05:36.840 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:05:36.841 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:05:36.849 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:05:36.852 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:06:06.779 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:06:06.790 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:06:06.791 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:06:06.792 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:06:06.793 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:06:06.793 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:06:06.794 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:06:06.831 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:06:06.834 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:06:06.840 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:06:06.842 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:06:06.845 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:06:06.849 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:06:06.861 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:06:06.862 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:06:29.484 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:06:29.487 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:06:29.531 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:06:29.534 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:06:29.534 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:06:29.535 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:06:29.535 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:06:29.536 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:06:29.536 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:06:29.566 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:06:29.569 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:06:29.576 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:06:29.578 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:06:29.579 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:06:29.579 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:06:29.583 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:06:29.583 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:06:30.069 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:06:30.070 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:06:30.070 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:06:30.075 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:06:30.075 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:06:30.076 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:06:30.076 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:06:30.077 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:06:30.077 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:06:30.079 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:06:30.090 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:06:30.091 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:06:30.091 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:06:30.091 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:06:30.092 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:06:30.098 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:06:30.098 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:06:30.099 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:06:30.482 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:06:30.510 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:06:32.557 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:06:32.559 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:06:32.595 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:06:32.598 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:06:32.598 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:06:32.598 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:06:32.599 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:06:32.599 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:06:32.600 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:06:32.623 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:06:32.625 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:06:32.632 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:06:32.635 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:06:32.635 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:06:32.636 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:06:32.639 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:06:32.640 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:06:33.128 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:06:33.129 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:06:33.129 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:06:33.132 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:06:33.133 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:06:33.133 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:06:33.134 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:06:33.134 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:06:33.135 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:06:33.139 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:06:33.149 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:06:33.149 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:06:33.149 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:06:33.150 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:06:33.150 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:06:33.155 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:06:33.156 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:06:33.157 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:06:33.580 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:06:33.610 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:06:37.569 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:06:37.569 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:07:03.384 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:07:03.388 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:07:03.388 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:07:03.388 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:07:03.388 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:07:03.388 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:07:03.388 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:07:03.408 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:07:03.410 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:07:03.417 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:07:03.419 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:07:03.419 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:07:03.419 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:07:03.422 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:07:03.422 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:07:33.391 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:07:33.393 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:07:33.394 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:07:33.394 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:07:33.394 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:07:33.394 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:07:33.394 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:07:33.413 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:07:33.416 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:07:33.420 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:07:33.424 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:07:33.424 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:07:33.424 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:07:33.426 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:07:33.426 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:08:03.365 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:08:03.368 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:08:03.368 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:08:03.368 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:08:03.368 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:08:03.368 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:08:03.368 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:08:03.389 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:08:03.391 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:08:03.396 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:08:03.399 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:08:03.400 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:08:03.400 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:08:03.402 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:08:03.402 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:08:33.383 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:08:33.388 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:08:33.388 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:08:33.388 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:08:33.389 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:08:33.389 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:08:33.389 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:08:33.416 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:08:33.418 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:08:33.424 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:08:33.425 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:08:33.426 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:08:33.426 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:08:33.429 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:08:33.429 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:09:03.370 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:09:03.373 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:09:03.373 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:09:03.373 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:09:03.373 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:09:03.373 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:09:03.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:09:03.393 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:09:03.396 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:09:03.402 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:09:03.404 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:09:03.405 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:09:03.405 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:09:03.407 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:09:03.408 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:09:33.386 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:09:33.388 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:09:33.389 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:09:33.389 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:09:33.389 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:09:33.389 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:09:33.390 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:09:33.409 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:09:33.412 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:09:33.418 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:09:33.420 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:09:33.420 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:09:33.420 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:09:33.424 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:09:33.424 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:10:03.371 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:10:03.373 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:10:03.374 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:10:03.374 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:10:03.374 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:10:03.375 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:10:03.375 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:10:03.399 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:10:03.402 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:10:03.408 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:10:03.410 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:10:03.410 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:10:03.410 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:10:03.415 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:10:03.415 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:10:44.376 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:10:44.379 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:10:44.380 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:10:44.380 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:10:44.381 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:10:44.381 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:10:44.381 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:10:44.417 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:10:44.421 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:10:44.431 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:10:44.436 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:10:44.436 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:10:44.437 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:10:44.442 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:10:44.442 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:11:44.393 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:11:44.397 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:11:44.397 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:11:44.398 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:11:44.398 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:11:44.398 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:11:44.398 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:11:44.431 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:11:44.434 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:11:44.443 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:11:44.446 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:11:44.446 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:11:44.446 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:11:44.450 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:11:44.451 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:12:44.418 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:12:44.422 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:12:44.423 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:12:44.423 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:12:44.423 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:12:44.423 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:12:44.423 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:12:44.454 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:12:44.458 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:12:44.466 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:12:44.468 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:12:44.468 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:12:44.469 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:12:44.472 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:12:44.472 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:13:44.428 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:13:44.432 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:13:44.433 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:13:44.434 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:13:44.434 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:13:44.434 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:13:44.434 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:13:44.468 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:13:44.470 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:13:44.477 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:13:44.480 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:13:44.480 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:13:44.480 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:13:44.483 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:13:44.483 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:14:44.373 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:14:44.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:14:44.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:14:44.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:14:44.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:14:44.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:14:44.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:14:44.402 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:14:44.405 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:14:44.411 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:14:44.414 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:14:44.414 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:14:44.414 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:14:44.417 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:14:44.418 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:15:44.373 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:15:44.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:15:44.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:15:44.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:15:44.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:15:44.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:15:44.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:15:44.396 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:15:44.399 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:15:44.405 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:15:44.407 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:15:44.407 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:15:44.407 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:15:44.410 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:15:44.410 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:16:44.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:16:44.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:16:44.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:16:44.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:16:44.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:16:44.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:16:44.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:16:44.406 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:16:44.409 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:16:44.417 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:16:44.420 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:16:44.420 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:16:44.421 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:16:44.424 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:16:44.425 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:17:11.002 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:17:11.006 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:17:11.006 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:17:11.010 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:17:11.010 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:17:11.011 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:17:11.011 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:17:11.011 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:17:11.011 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:17:11.016 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:17:11.020 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:17:11.021 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:17:11.021 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:17:11.026 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:17:11.026 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:17:11.037 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:17:11.041 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:17:11.041 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:17:11.041 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:17:11.041 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:17:11.041 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:17:11.041 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:17:11.061 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:17:11.063 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:17:11.070 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:17:11.072 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:17:11.072 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:17:11.073 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:17:11.076 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:17:11.077 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:17:12.102 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:17:12.104 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:17:12.140 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:17:12.143 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:17:12.144 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:17:12.144 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:17:12.144 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:17:12.144 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:17:12.144 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:17:12.165 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:17:12.168 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:17:12.177 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:17:12.180 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:17:12.181 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:17:12.181 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:17:12.186 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:17:12.186 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:17:12.668 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:17:12.669 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:17:12.669 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:17:12.678 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:17:12.678 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:17:12.678 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:17:12.678 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:17:12.679 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:17:12.679 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:17:12.681 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:17:12.692 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:17:12.692 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:17:12.693 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:17:12.693 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:17:12.693 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:17:12.699 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:17:12.700 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:17:12.700 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:17:13.107 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:17:13.137 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:17:15.192 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:17:15.192 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:17:29.227 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:17:29.227 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:17:39.046 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:17:39.047 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:17:42.195 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:17:42.202 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:17:42.203 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:17:42.204 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:17:42.204 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:17:42.204 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:17:42.204 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:17:42.246 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:17:42.253 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:17:42.265 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:17:42.269 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:17:42.269 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:17:42.270 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:17:42.275 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:17:42.276 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:18:12.204 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:18:12.207 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:18:12.207 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:18:12.207 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:18:12.208 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:18:12.208 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:18:12.208 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:18:12.241 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:18:12.244 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:18:12.251 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:18:12.254 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:18:12.255 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:18:12.255 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:18:12.258 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:18:12.258 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:18:26.537 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:18:26.540 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:18:26.543 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:18:26.545 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:18:26.546 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:18:26.546 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:18:26.547 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:18:26.547 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:18:26.547 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:18:26.548 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:18:26.550 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:18:26.551 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:18:26.551 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:18:26.555 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:18:26.555 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:18:28.422 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:18:28.423 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:18:42.200 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:18:42.206 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:18:42.206 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:18:42.206 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:18:42.207 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:18:42.207 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:18:42.208 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:18:42.241 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:18:42.246 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:18:42.255 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:18:42.259 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:18:42.260 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:18:42.260 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:18:42.265 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:18:42.265 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:18:52.241 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:18:52.244 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:18:52.244 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:18:52.247 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:18:52.247 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:18:52.247 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:18:52.248 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:18:52.248 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:18:52.248 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:18:52.250 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:18:52.252 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:18:52.252 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:18:52.253 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:18:52.256 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:18:52.257 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:19:12.406 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:19:12.410 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:19:12.410 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:19:12.411 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:19:12.411 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:19:12.411 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:19:12.411 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:19:12.445 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:19:12.448 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:19:12.455 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:19:12.457 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:19:12.458 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:19:12.458 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:19:12.460 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:19:12.461 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:19:42.375 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:19:42.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:19:42.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:19:42.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:19:42.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:19:42.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:19:42.379 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:19:42.401 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:19:42.403 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:19:42.409 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:19:42.413 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:19:42.413 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:19:42.413 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:19:42.419 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:19:42.419 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:20:12.380 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:20:12.382 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:20:12.382 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:20:12.383 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:20:12.383 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:20:12.383 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:20:12.383 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:20:12.403 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:20:12.405 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:20:12.410 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:20:12.412 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:20:12.412 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:20:12.412 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:20:12.416 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:20:12.416 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:20:42.389 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:20:42.392 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:20:42.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:20:42.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:20:42.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:20:42.394 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:20:42.394 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:20:42.426 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:20:42.429 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:20:42.440 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:20:42.443 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:20:42.443 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:20:42.443 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:20:42.447 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:20:42.448 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:21:03.683 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:21:03.686 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:21:03.686 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:21:03.689 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:21:03.690 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:21:03.690 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:21:03.690 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:21:03.690 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:21:03.691 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:21:03.693 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:21:03.695 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:21:03.695 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:21:03.696 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:21:03.699 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:21:03.700 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:21:06.799 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:21:06.801 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:21:12.369 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:21:12.371 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:21:12.372 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:21:12.372 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:21:12.373 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:21:12.373 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:21:12.373 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:21:12.391 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:21:12.394 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:21:12.398 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:21:12.401 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:21:12.401 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:21:12.401 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:21:12.404 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:21:12.405 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:21:42.370 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:21:42.371 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:21:42.371 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:21:42.372 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:21:42.372 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:21:42.372 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:21:42.372 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:21:42.391 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:21:42.394 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:21:42.399 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:21:42.401 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:21:42.401 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:21:42.401 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:21:42.403 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:21:42.403 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:22:43.389 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:22:43.392 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:22:43.392 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:22:43.392 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:22:43.393 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:22:43.393 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:22:43.393 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:22:43.411 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:22:43.414 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:22:43.417 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:22:43.418 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:22:43.419 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:22:43.419 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:22:43.421 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:22:43.421 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:23:44.377 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:23:44.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:23:44.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:23:44.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:23:44.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:23:44.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:23:44.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:23:44.404 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:23:44.405 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:23:44.409 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:23:44.410 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:23:44.411 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:23:44.411 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:23:44.414 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:23:44.414 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:23:49.223 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:23:49.225 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:23:49.225 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:23:49.227 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:23:49.227 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:23:49.227 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:23:49.227 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:23:49.229 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:23:49.229 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:23:49.230 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:23:49.231 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:23:49.231 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:23:49.231 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:23:49.234 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:23:49.235 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:23:56.870 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:23:56.872 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:23:56.872 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:23:56.874 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:23:56.874 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:23:56.875 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:23:56.875 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:23:56.876 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:23:56.876 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:23:56.876 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:23:56.878 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:23:56.878 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:23:56.878 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:23:56.882 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:23:56.883 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:24:05.389 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:24:05.391 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:24:05.391 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:24:05.393 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:24:05.393 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:24:05.393 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:24:05.394 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:24:05.394 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:24:05.394 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:24:05.395 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:24:05.397 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:24:05.397 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:24:05.397 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:24:05.400 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:24:05.400 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:24:07.221 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:24:07.221 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:24:12.180 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:24:12.184 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:24:12.184 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:24:12.184 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:24:12.184 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:24:12.184 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:24:12.184 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:24:12.221 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:24:12.226 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:24:12.233 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:24:12.242 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:24:12.243 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:24:12.243 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:24:12.250 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:24:12.250 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:24:14.605 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:24:14.605 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:24:42.377 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:24:42.379 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:24:42.379 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:24:42.379 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:24:42.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:24:42.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:24:42.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:24:42.405 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:24:42.408 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:24:42.412 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:24:42.413 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:24:42.413 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:24:42.413 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:24:42.416 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:24:42.416 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:25:12.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:25:12.373 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:25:12.373 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:25:12.373 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:25:12.373 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:25:12.373 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:25:12.374 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:25:12.392 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:25:12.395 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:25:12.400 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:25:12.402 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:25:12.402 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:25:12.402 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:25:12.405 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:25:12.405 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:25:44.378 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:25:44.381 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:25:44.381 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:25:44.381 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:25:44.381 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:25:44.381 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:25:44.382 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:25:44.400 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:25:44.402 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:25:44.408 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:25:44.410 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:25:44.410 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:25:44.411 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:25:44.413 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:25:44.413 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:26:38.752 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:26:38.754 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:26:38.754 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:26:38.756 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:26:38.756 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:26:38.757 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:26:38.757 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:26:38.758 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:26:38.758 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:26:38.759 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:26:38.761 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:26:38.761 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:26:38.761 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:26:38.764 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:26:38.764 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:26:38.773 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:26:38.776 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:26:38.776 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:26:38.777 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:26:38.777 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:26:38.777 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:26:38.777 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:26:38.796 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:26:38.798 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:26:38.802 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:26:38.803 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:26:38.803 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:26:38.803 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:26:38.806 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:26:38.807 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:26:41.492 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:26:41.494 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:26:41.524 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:26:41.527 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:26:41.528 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:26:41.528 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:26:41.528 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:26:41.528 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:26:41.528 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:26:41.547 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:26:41.550 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:26:41.555 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:26:41.557 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:26:41.558 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:26:41.558 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:26:41.561 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:26:41.561 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:26:42.056 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:26:42.056 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:26:42.057 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:26:42.063 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:26:42.063 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:26:42.064 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:26:42.064 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:26:42.064 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:26:42.064 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:26:42.065 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:26:42.072 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:26:42.073 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:26:42.073 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:26:42.073 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:26:42.074 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:26:42.078 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:26:42.079 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:26:42.079 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:26:42.490 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:26:42.509 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:26:49.452 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:26:49.453 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:27:03.773 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:27:03.773 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:27:11.559 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:27:11.562 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:27:11.562 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:27:11.563 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:27:11.564 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:27:11.565 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:27:11.565 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:27:11.617 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:27:11.622 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:27:11.631 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:27:11.638 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:27:11.639 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:27:11.640 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:27:11.645 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:27:11.646 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:27:40.793 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:27:40.796 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:27:40.796 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:27:40.799 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:27:40.799 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:27:40.800 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:27:40.800 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:27:40.800 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:27:40.800 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:27:40.802 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:27:40.804 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:27:40.804 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:27:40.804 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:27:40.809 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:27:40.809 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:27:41.554 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:27:41.556 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:27:41.556 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:27:41.556 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:27:41.556 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:27:41.556 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:27:41.556 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:27:41.571 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:27:41.574 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:27:41.579 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:27:41.581 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:27:41.581 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:27:41.582 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:27:41.584 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:27:41.585 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:27:45.057 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:27:45.058 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:28:12.373 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:28:12.375 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:28:12.375 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:28:12.375 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:28:12.375 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:28:12.375 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:28:12.375 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:28:12.398 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:28:12.400 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:28:12.404 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:28:12.405 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:28:12.405 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:28:12.406 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:28:12.408 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:28:12.408 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:28:42.414 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:28:42.419 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:28:42.419 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:28:42.420 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:28:42.420 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:28:42.420 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:28:42.420 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:28:42.451 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:28:42.454 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:28:42.461 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:28:42.464 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:28:42.464 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:28:42.464 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:28:42.468 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:28:42.468 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:29:12.374 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:29:12.376 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:29:12.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:29:12.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:29:12.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:29:12.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:29:12.378 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:29:12.407 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:29:12.411 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:29:12.416 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:29:12.419 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:29:12.419 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:29:12.420 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:29:12.424 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:29:12.424 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:29:21.094 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:29:21.096 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:29:21.097 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:29:21.099 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:29:21.099 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:29:21.099 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:29:21.099 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:29:21.099 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:29:21.100 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:29:21.101 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:29:21.103 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:29:21.104 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:29:21.104 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:29:21.108 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:29:21.108 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:29:23.028 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:29:23.030 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:29:23.058 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:29:23.060 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:29:23.060 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:29:23.061 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:29:23.061 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:29:23.061 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:29:23.061 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:29:23.079 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:29:23.082 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:29:23.087 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:29:23.089 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:29:23.090 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:29:23.090 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:29:23.094 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:29:23.094 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:29:23.586 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:29:23.586 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:29:23.586 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:29:23.592 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:29:23.592 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:29:23.592 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:29:23.592 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:29:23.592 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:29:23.593 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:29:23.596 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:29:23.606 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:29:23.607 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:29:23.607 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:29:23.607 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:29:23.607 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:29:23.611 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:29:23.611 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:29:23.611 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:29:24.023 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:29:24.044 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:29:25.437 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:29:25.437 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:29:28.124 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:29:28.129 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:29:28.129 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:29:28.130 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:29:28.130 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:29:28.130 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:29:28.130 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:29:28.168 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 创建标签请求: userId=4, name=测试, color=#667eea
2025-07-13 13:29:28.615 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:29:39.903 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:29:47.199 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:29:47.199 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:29:48.796 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[null]
2025-07-13 13:29:53.095 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:29:53.097 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:29:53.098 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:29:53.098 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:29:53.098 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:29:53.098 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:29:53.099 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:29:53.120 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:29:53.123 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:29:53.128 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:29:53.130 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:29:53.131 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:29:53.131 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:29:53.133 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:29:53.134 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:29:56.873 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:29:56.873 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:30:02.386 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:30:02.390 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:30:02.390 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:30:02.391 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:30:02.392 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:30:02.392 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:30:02.392 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:30:02.421 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 创建标签请求: userId=4, name=测试2, color=#667eea
2025-07-13 13:30:02.470 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:30:14.116 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:30:14.118 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:30:14.119 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:30:14.122 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:30:14.122 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:30:14.123 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:30:14.123 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:30:14.124 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:30:14.124 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:30:14.125 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:30:14.126 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:30:14.126 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:30:14.126 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:30:14.129 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:30:14.129 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:30:23.382 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:30:23.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:30:23.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:30:23.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:30:23.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:30:23.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:30:23.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:30:23.404 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:30:23.407 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:30:23.409 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:30:23.410 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:30:23.410 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:30:23.410 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:30:23.412 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:30:23.413 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:30:53.388 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:30:53.390 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:30:53.390 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:30:53.390 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:30:53.390 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:30:53.390 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:30:53.390 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:30:53.408 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:30:53.410 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:30:53.413 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:30:53.417 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:30:53.418 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:30:53.418 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:30:53.420 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:30:53.421 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:31:23.376 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:31:23.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:31:23.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:31:23.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:31:23.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:31:23.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:31:23.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:31:23.393 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:31:23.394 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:31:23.397 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:31:23.398 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:31:23.399 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:31:23.399 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:31:23.401 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:31:23.401 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:31:43.747 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:31:43.750 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:31:43.752 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:31:43.755 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:31:43.755 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:31:43.756 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:31:43.756 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:31:43.756 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:31:43.756 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:31:43.757 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:31:43.759 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:31:43.759 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:31:43.759 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:31:43.762 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:31:43.763 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:31:46.017 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:31:46.019 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:31:46.046 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:31:46.048 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:31:46.048 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:31:46.049 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:31:46.049 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:31:46.049 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:31:46.049 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:31:46.070 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:31:46.072 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:31:46.078 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:31:46.080 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:31:46.080 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:31:46.080 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:31:46.084 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:31:46.084 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:31:46.571 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:31:46.571 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:31:46.572 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:31:46.575 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:31:46.575 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:31:46.576 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:31:46.576 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:31:46.576 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:31:46.576 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:31:46.578 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:31:46.583 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:31:46.584 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:31:46.584 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:31:46.584 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:31:46.584 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:31:46.587 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:31:46.587 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:31:46.587 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:31:47.015 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:31:47.036 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:31:48.388 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:31:48.388 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:31:51.878 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:31:51.881 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:31:51.882 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:31:51.882 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:31:51.882 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:31:51.883 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:31:51.883 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:31:51.908 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 创建标签请求: userId=4, name=测试3, color=#667eea
2025-07-13 13:31:51.953 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:31:51.961 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:31:51.983 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:31:56.860 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:31:56.860 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:31:58.650 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[null]
2025-07-13 13:32:01.635 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:32:16.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:32:16.384 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:32:16.384 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:32:16.384 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:32:16.384 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:32:16.384 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:32:16.384 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:32:16.415 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:32:16.423 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:32:16.433 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:32:16.437 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:32:16.438 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:32:16.438 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:32:16.449 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:32:16.450 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:32:46.370 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:32:46.372 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:32:46.372 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:32:46.372 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:32:46.372 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:32:46.372 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:32:46.373 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:32:46.395 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:32:46.398 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:32:46.404 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:32:46.406 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:32:46.406 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:32:46.406 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:32:46.409 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:32:46.410 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:33:16.378 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:33:16.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:33:16.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:33:16.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:33:16.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:33:16.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:33:16.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:33:16.399 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:33:16.401 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:33:16.404 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:33:16.406 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:33:16.406 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:33:16.406 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:33:16.409 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:33:16.409 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:33:46.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:33:46.379 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:33:46.380 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:33:46.380 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:33:46.380 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:33:46.380 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:33:46.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:33:46.398 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:33:46.401 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:33:46.405 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:33:46.406 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:33:46.406 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:33:46.406 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:33:46.409 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:33:46.409 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:34:16.379 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:34:16.383 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:34:16.383 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:34:16.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:34:16.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:34:16.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:34:16.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:34:16.405 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:34:16.409 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:34:16.417 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:34:16.420 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:34:16.420 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:34:16.420 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:34:16.424 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:34:16.424 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:34:46.381 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:34:46.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:34:46.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:34:46.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:34:46.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:34:46.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:34:46.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:34:46.397 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:34:46.399 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:34:46.403 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:34:46.405 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:34:46.405 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:34:46.405 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:34:46.408 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:34:46.408 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:35:16.387 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:35:16.389 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:35:16.389 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:35:16.389 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:35:16.389 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:35:16.389 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:35:16.389 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:35:16.406 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:35:16.408 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:35:16.411 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:35:16.412 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:35:16.413 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:35:16.413 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:35:16.414 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:35:16.415 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:35:24.679 [MessageBroker-18] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 20, active threads = 1, queued tasks = 8, completed tasks = 63]
2025-07-13 13:35:52.601 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:35:52.605 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:35:52.605 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:35:52.609 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:35:52.609 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:35:52.609 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:35:52.610 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:35:52.610 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:35:52.610 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:35:52.612 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:35:52.614 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:35:52.615 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:35:52.615 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:35:52.619 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:35:52.619 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:35:52.632 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:35:52.634 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:35:52.634 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:35:52.635 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:35:52.635 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:35:52.635 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:35:52.635 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:35:52.655 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:35:52.657 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:35:52.663 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:35:52.665 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:35:52.665 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:35:52.665 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:35:52.668 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:35:52.668 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:35:54.758 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:35:54.759 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:35:56.499 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[null]
2025-07-13 13:35:59.776 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:35:59.779 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:35:59.806 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:35:59.808 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:35:59.809 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:35:59.809 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:35:59.809 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:35:59.810 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:35:59.810 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:35:59.833 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:35:59.835 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:35:59.840 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:35:59.841 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:35:59.841 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:35:59.842 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:35:59.844 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:35:59.845 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:36:00.335 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:36:00.336 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:36:00.336 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:36:00.342 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:36:00.342 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:36:00.342 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:36:00.342 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:36:00.343 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:36:00.343 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:36:00.344 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:36:00.350 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:36:00.351 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:36:00.351 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:36:00.351 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:36:00.351 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:36:00.356 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:36:00.357 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:36:00.357 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:36:00.775 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:36:00.793 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:36:03.125 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:36:03.125 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:36:04.547 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[null]
2025-07-13 13:36:20.153 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:36:20.155 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:36:20.155 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:36:20.157 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:36:20.157 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:36:20.157 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:36:20.157 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:36:20.158 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:36:20.158 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:36:20.158 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:36:20.160 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:36:20.160 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:36:20.161 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:36:20.164 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:36:20.164 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:36:21.957 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:36:21.957 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:36:23.201 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[null]
2025-07-13 13:36:30.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:36:30.389 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:36:30.389 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:36:30.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:36:30.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:36:30.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:36:30.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:36:30.407 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:36:30.410 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:36:30.413 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:36:30.415 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:36:30.415 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:36:30.416 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:36:30.417 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:36:30.418 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:36:59.004 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:36:59.007 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:36:59.007 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:36:59.009 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:36:59.010 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:36:59.010 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:36:59.010 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:36:59.010 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:36:59.010 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:36:59.012 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:36:59.014 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:36:59.014 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:36:59.016 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:36:59.019 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:36:59.020 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:36:59.832 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:36:59.835 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:36:59.835 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:36:59.836 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:36:59.836 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:36:59.836 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:36:59.836 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:36:59.852 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:36:59.856 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:36:59.860 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:36:59.863 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:36:59.863 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:36:59.863 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:36:59.867 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:36:59.867 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:37:02.383 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:37:30.381 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:37:30.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:37:30.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:37:30.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:37:30.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:37:30.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:37:30.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:37:31.189 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:37:31.191 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:37:31.192 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:37:31.192 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:37:31.192 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:37:31.192 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:37:31.192 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:38:00.395 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:38:00.398 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:38:00.398 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:38:00.398 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:38:00.398 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:38:00.398 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:38:00.399 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:38:02.184 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-07-13 13:38:02.220 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 13:38:02.220 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7d484d18]]
2025-07-13 13:38:02.220 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 13:38:02.227 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 13:38:02.965 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:38:02.997 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 13:38:03.027 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 13:38:03.564 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 28876 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 13:38:03.564 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 13:38:04.045 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:38:04.045 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:38:04.149 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 104 ms. Found 10 JPA repository interfaces.
2025-07-13 13:38:04.330 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:38:04.330 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 13:38:04.346 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:04.346 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:04.347 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:04.347 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:04.347 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:04.348 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:04.348 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:04.349 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:04.349 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:04.349 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:04.349 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 0 Redis repository interfaces.
2025-07-13 13:38:04.526 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:38:04.528 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 13:38:04.535 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 13:38:04.535 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 13:38:04.536 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:38:04.536 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:38:04.573 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:38:04.573 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1007 ms
2025-07-13 13:38:04.692 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-07-13 13:38:04.712 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6af80212
2025-07-13 13:38:04.713 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-07-13 13:38:04.736 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 13:38:04.778 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.021s)
2025-07-13 13:38:04.792 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 13:38:04.794 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 13:38:04.837 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:38:04.840 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:38:04.850 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:38:05.005 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:38:05.028 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:38:05.474 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 13:38:06.074 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 13:38:06.074 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 13:38:06.197 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 13:38:06.328 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 13:38:06.394 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 13:38:06.394 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 13:38:06.462 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 13:38:06.463 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:38:06.495 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:38:06.512 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:38:06.534 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:38:06.562 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 13:38:06.792 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 13:38:06.810 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 13:38:07.032 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 13:38:07.187 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 13:38:07.459 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 13:38:07.965 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 13:38:08.000 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 13:38:08.005 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 13:38:08.006 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 13:38:08.006 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2849b07c]]
2025-07-13 13:38:08.007 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 13:38:08.022 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 4.523 seconds (process running for 2031.252)
2025-07-13 13:38:08.024 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 13:38:08.056 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 13:38:08.078 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 13:38:08.097 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 13:38:08.118 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 13:38:08.139 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 13:38:08.170 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 13:38:08.212 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 13:38:08.216 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 13:38:09.404 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-07-13 13:38:09.406 [Thread-7] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 13:38:09.406 [Thread-7] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2849b07c]]
2025-07-13 13:38:09.406 [Thread-7] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 13:38:09.407 [Thread-7] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 13:38:09.744 [Thread-7] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:38:09.745 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-07-13 13:38:09.746 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-07-13 13:38:09.880 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 28876 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 13:38:09.881 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 13:38:10.136 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:38:10.136 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:38:10.185 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 49 ms. Found 10 JPA repository interfaces.
2025-07-13 13:38:10.293 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:38:10.294 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 13:38:10.306 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:10.307 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:10.307 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:10.307 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:10.308 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:10.308 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:10.308 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:10.308 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:10.308 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:10.309 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:38:10.309 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-07-13 13:38:10.492 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:38:10.493 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 13:38:10.493 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 13:38:10.493 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 13:38:10.493 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:38:10.495 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:38:10.524 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:38:10.524 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 642 ms
2025-07-13 13:38:10.610 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2025-07-13 13:38:10.623 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection com.mysql.cj.jdbc.ConnectionImpl@40f0e20
2025-07-13 13:38:10.623 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2025-07-13 13:38:10.641 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 13:38:10.678 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.023s)
2025-07-13 13:38:10.696 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 13:38:10.698 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 13:38:10.743 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:38:10.746 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:38:10.758 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:38:10.906 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:38:10.925 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:38:11.313 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 13:38:11.858 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 13:38:11.859 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 13:38:12.005 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 13:38:12.205 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 13:38:12.277 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 13:38:12.277 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 13:38:12.363 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 13:38:12.364 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:38:12.387 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:38:12.406 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:38:12.426 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:38:12.450 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 13:38:12.708 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 13:38:12.722 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 13:38:12.913 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 13:38:13.033 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 13:38:13.348 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 13:38:13.644 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 13:38:13.659 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 13:38:13.663 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 13:38:13.664 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 13:38:13.664 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@11bcb074]]
2025-07-13 13:38:13.665 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 13:38:13.677 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 3.823 seconds (process running for 2036.906)
2025-07-13 13:38:13.678 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 13:38:13.702 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 13:38:13.722 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 13:38:13.751 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 13:38:13.767 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 13:38:13.790 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 13:38:13.814 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 13:38:13.846 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 13:38:13.848 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 13:38:30.367 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 13:38:30.368 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 13:38:30.372 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-07-13 13:38:30.434 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:38:30.439 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:38:30.440 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:38:30.440 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:38:30.440 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:38:30.441 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:38:30.441 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:39:04.750 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 13:39:04.804 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 35120 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 13:39:04.805 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 13:39:04.870 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 13:39:04.870 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 13:39:05.845 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:39:05.845 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:39:06.003 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 151 ms. Found 10 JPA repository interfaces.
2025-07-13 13:39:06.443 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 13:39:06.445 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 13:39:06.485 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:39:06.486 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:39:06.487 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:39:06.488 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:39:06.488 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:39:06.489 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:39:06.490 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:39:06.490 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:39:06.491 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:39:06.491 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 13:39:06.492 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 36 ms. Found 0 Redis repository interfaces.
2025-07-13 13:39:07.484 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:39:07.487 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 13:39:07.499 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 13:39:07.514 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 13:39:07.518 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:39:07.518 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:39:07.590 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:39:07.591 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2719 ms
2025-07-13 13:39:08.020 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 13:39:08.269 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3e1a52b4
2025-07-13 13:39:08.271 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 13:39:08.325 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 13:39:08.408 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.048s)
2025-07-13 13:39:08.431 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 13:39:08.437 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 13:39:08.544 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:39:08.609 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 13:39:08.659 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:39:08.925 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:39:10.041 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:39:10.085 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:39:11.213 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 13:39:12.046 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 13:39:12.358 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 13:39:12.359 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 13:39:12.607 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 13:39:12.816 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 13:39:12.859 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 13:39:12.860 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 13:39:12.919 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 13:39:12.920 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:39:12.972 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:39:12.989 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:39:12.999 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 13:39:13.010 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 13:39:13.180 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 13:39:13.191 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 13:39:13.512 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 13:39:13.671 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 13:39:13.973 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 13:39:14.660 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 13:39:14.721 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 13:39:14.749 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 13:39:14.750 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 13:39:14.753 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@294e9064]]
2025-07-13 13:39:14.753 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 13:39:14.770 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 10.654 seconds (process running for 11.238)
2025-07-13 13:39:14.837 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 13:39:14.873 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 13:39:14.899 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 13:39:14.919 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 13:39:14.941 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 13:39:14.966 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 13:39:14.990 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 13:39:15.030 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 13:39:25.557 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 13:39:25.557 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 13:39:25.560 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 13:39:25.729 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:39:25.745 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:39:25.746 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:39:25.747 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:39:25.747 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:39:25.747 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:39:25.747 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:39:27.597 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:39:27.600 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:39:27.644 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:39:27.646 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:39:27.647 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:39:27.648 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:39:27.648 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:39:27.648 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:39:27.649 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:39:27.681 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:39:27.684 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:39:27.702 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:39:27.707 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:39:27.708 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:39:27.709 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:39:27.713 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:39:27.713 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:39:28.179 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:39:28.181 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:39:28.182 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:39:28.195 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:39:28.196 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:39:28.196 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:39:28.196 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:39:28.198 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:39:28.199 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:39:28.199 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:39:28.214 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:39:28.215 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:39:28.215 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:39:28.215 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:39:28.216 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:39:28.227 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:39:28.228 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:39:28.228 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:39:28.618 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:39:28.681 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:39:30.089 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:39:30.089 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:39:31.628 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[null]
2025-07-13 13:39:36.258 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:39:36.261 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:39:36.261 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:39:36.264 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:39:36.264 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:39:36.265 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:39:36.265 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:39:36.265 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:39:36.266 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:39:36.268 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:39:36.270 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:39:36.271 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:39:36.271 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:39:36.275 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:39:36.275 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:39:45.381 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:39:45.381 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:39:51.633 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[null]
2025-07-13 13:39:58.391 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:39:58.396 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:39:58.396 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:39:58.397 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:39:58.397 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:39:58.398 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:39:58.398 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:39:58.439 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:39:58.444 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:39:58.455 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:39:58.460 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:39:58.460 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:39:58.461 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:39:58.467 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:39:58.468 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:39:59.142 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:39:59.160 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:39:59.161 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:39:59.172 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:39:59.173 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:39:59.173 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:39:59.174 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:39:59.175 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:39:59.176 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:39:59.179 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:39:59.187 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:39:59.188 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:39:59.189 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:39:59.201 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:39:59.201 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:40:00.805 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[null]
2025-07-13 13:40:03.911 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[null]
2025-07-13 13:40:14.698 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 13:40:19.801 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:40:19.804 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:40:19.804 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:40:19.809 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:40:19.809 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:40:19.809 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:40:19.809 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:40:19.810 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:40:19.810 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:40:19.812 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:40:19.815 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:40:19.816 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:40:19.816 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:40:19.821 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:40:19.821 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:40:28.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:40:28.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:40:28.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:40:28.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:40:28.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:40:28.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:40:28.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:40:28.410 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:40:28.413 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:40:28.419 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:40:28.421 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:40:28.422 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:40:28.422 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:40:28.425 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:40:28.425 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:40:32.283 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:40:32.287 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:40:32.287 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:40:32.291 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:40:32.291 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:40:32.292 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:40:32.292 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:40:32.293 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:40:32.293 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:40:32.295 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:40:32.298 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:40:32.298 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:40:32.298 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:40:32.303 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:40:32.303 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:40:51.300 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:40:51.303 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:40:51.304 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:40:51.307 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:40:51.307 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:40:51.307 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:40:51.308 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:40:51.308 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:40:51.308 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:40:51.310 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:40:51.313 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:40:51.313 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:40:51.313 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:40:51.317 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:40:51.318 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:40:58.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:40:58.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:40:58.384 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:40:58.385 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:40:58.385 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:40:58.385 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:40:58.385 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:40:58.411 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:40:58.414 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:40:58.421 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:40:58.425 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:40:58.425 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:40:58.425 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:40:58.429 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:40:58.429 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:41:28.394 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:41:28.398 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:41:28.398 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:41:28.399 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:41:28.399 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:41:28.399 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:41:28.399 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:41:28.435 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:41:28.438 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:41:28.446 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:41:28.449 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:41:28.449 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:41:28.449 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:41:28.452 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:41:28.453 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:41:58.381 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:41:58.383 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:41:58.383 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:41:58.383 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:41:58.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:41:58.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:41:58.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:41:58.416 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:41:58.419 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:41:58.429 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:41:58.432 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:41:58.433 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:41:58.433 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:41:58.436 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:41:58.437 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:42:28.371 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:42:28.374 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:42:28.374 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:42:28.374 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:42:28.374 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:42:28.374 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:42:28.374 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:42:28.402 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:42:28.406 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:42:28.417 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:42:28.420 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:42:28.421 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:42:28.421 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:42:28.425 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:42:28.425 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:42:58.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:42:58.383 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:42:58.383 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:42:58.384 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:42:58.384 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:42:58.384 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:42:58.385 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:42:58.414 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:42:58.417 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:42:58.425 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:42:58.428 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:42:58.429 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:42:58.429 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:42:58.433 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:42:58.433 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:43:44.381 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:43:44.384 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:43:44.384 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:43:44.384 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:43:44.384 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:43:44.384 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:43:44.384 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:43:44.410 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:43:44.413 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:43:44.420 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:43:44.423 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:43:44.423 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:43:44.423 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:43:44.427 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:43:44.427 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:44:03.918 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:44:03.924 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:44:03.924 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:44:03.929 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:44:03.929 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:44:03.930 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:44:03.930 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:44:03.930 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:44:03.930 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:44:03.932 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:44:03.935 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:44:03.935 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:44:03.935 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:44:03.939 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:44:03.940 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:44:03.966 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:44:03.970 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:44:03.970 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:44:03.971 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:44:03.971 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:44:03.971 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:44:03.971 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:44:03.995 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:44:03.998 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:44:04.005 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:44:04.008 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:44:04.008 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:44:04.008 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:44:04.010 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:44:04.010 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:44:05.334 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:44:05.337 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:44:05.383 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:44:05.386 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:44:05.387 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:44:05.387 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:44:05.387 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:44:05.388 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:44:05.388 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:44:05.416 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:44:05.420 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:44:05.434 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:44:05.440 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:44:05.441 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:44:05.441 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:44:05.448 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:44:05.449 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:44:05.940 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:44:05.940 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:44:05.940 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:44:05.957 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:44:05.958 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:44:05.958 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:44:05.958 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:44:05.959 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:44:05.960 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:44:05.962 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:44:05.983 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:44:05.984 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:44:05.984 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:44:05.984 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:44:05.984 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:44:05.994 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:44:05.995 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:44:05.996 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:44:06.303 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:44:06.357 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:44:09.452 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:44:09.453 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:44:10.576 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[1]
2025-07-13 13:44:10.766 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:44:10.768 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:44:10.794 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:44:10.797 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:44:10.797 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 13:44:10.797 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:44:10.801 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:44:10.801 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:44:20.714 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:44:20.714 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:44:22.961 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[]
2025-07-13 13:44:23.040 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:44:23.043 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:44:23.051 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:44:23.054 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:44:23.055 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:44:23.055 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:44:23.058 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:44:23.059 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:44:25.428 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:44:25.429 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:44:27.072 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[2]
2025-07-13 13:44:27.130 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:44:27.133 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:44:27.147 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:44:27.150 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:44:27.150 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 13:44:27.150 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:44:27.153 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:44:27.153 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:44:28.811 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:44:28.811 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:44:30.153 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[]
2025-07-13 13:44:30.199 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:44:30.202 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:44:30.211 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:44:30.216 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:44:30.217 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:44:30.218 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:44:30.222 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:44:30.222 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:44:31.922 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:44:35.431 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:44:35.436 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:44:35.437 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:44:35.438 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:44:35.438 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:44:35.438 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:44:35.439 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:44:37.697 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:44:37.697 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:44:38.843 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[1]
2025-07-13 13:44:39.033 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:44:39.036 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:44:39.052 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:44:39.056 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:44:39.056 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 13:44:39.056 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:44:39.059 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:44:39.060 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:44:39.601 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:44:41.526 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:44:41.529 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:44:41.561 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:44:41.563 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:44:41.563 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:44:41.564 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:44:41.564 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:44:41.564 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:44:41.564 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:44:41.586 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:44:41.590 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:44:41.600 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:44:41.603 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:44:41.604 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 13:44:41.604 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:44:41.607 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:44:41.608 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:44:42.103 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:44:42.106 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:44:42.108 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:44:42.113 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:44:42.116 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:44:42.117 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:44:42.117 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:44:42.118 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:44:42.118 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:44:42.124 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:44:42.134 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:44:42.135 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:44:42.135 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:44:42.136 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:44:42.136 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:44:42.141 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:44:42.141 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:44:42.142 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:44:42.531 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:44:42.557 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:44:44.191 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:44:59.658 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:44:59.662 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:44:59.662 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:44:59.663 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:44:59.663 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:44:59.663 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:44:59.663 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:45:06.175 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:45:06.178 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:45:06.178 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:45:06.178 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:45:06.178 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:45:06.178 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:45:06.180 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:45:12.367 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:45:12.369 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:45:12.369 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:45:12.369 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:45:12.370 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:45:12.370 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:45:12.370 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:45:12.391 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:45:12.394 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:45:12.409 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:45:12.411 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:45:12.411 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 13:45:12.411 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:45:12.414 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:45:12.415 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:45:24.419 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:45:24.421 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:45:24.422 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:45:24.424 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:45:24.424 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:45:24.424 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:45:24.424 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:45:24.424 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:45:24.425 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:45:24.432 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:45:24.434 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:45:24.435 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 13:45:24.435 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:45:24.438 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:45:24.438 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:45:27.333 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:45:27.335 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:45:27.336 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:45:27.337 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:45:27.337 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:45:27.338 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:45:27.338 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:45:27.338 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:45:27.339 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:45:27.344 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:45:27.346 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:45:27.346 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 13:45:27.346 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:45:27.349 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:45:27.350 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:45:29.032 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:45:41.587 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:45:41.589 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:45:41.590 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:45:41.590 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:45:41.590 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:45:41.590 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:45:41.590 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:46:04.167 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:46:04.169 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:46:04.170 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:46:04.170 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:46:04.170 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:46:04.170 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:46:04.170 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:46:12.372 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:46:12.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:46:12.375 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:46:12.375 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:46:12.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:46:12.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:46:12.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:46:24.473 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:46:24.475 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:46:24.475 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:46:24.475 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:46:24.475 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:46:24.475 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:46:24.475 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:46:26.478 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 删除标签请求: userId=4, tagId=1
2025-07-13 13:46:26.543 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:46:29.303 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:46:29.305 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:46:29.305 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:46:29.305 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:46:29.305 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:46:29.305 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:46:29.306 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:46:32.625 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:46:32.627 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:46:32.648 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:46:32.650 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:46:32.651 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:46:32.651 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:46:32.651 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:46:32.651 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:46:32.651 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:46:32.668 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:46:32.669 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:46:32.673 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:46:32.675 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:46:32.675 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:46:32.675 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:46:32.678 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:46:32.679 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:46:33.171 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:46:33.171 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:46:33.171 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:46:33.175 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:46:33.176 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:46:33.176 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:46:33.176 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:46:33.176 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:46:33.176 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:46:33.181 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:46:33.191 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:46:33.191 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:46:33.191 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:46:33.191 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:46:33.192 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:46:33.195 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:46:33.196 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:46:33.196 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:46:33.630 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:46:33.651 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:46:40.356 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:46:40.359 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:46:40.359 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:46:40.361 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:46:40.362 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:46:40.362 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:46:40.362 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:46:40.362 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:46:40.362 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:46:40.364 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:46:40.366 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:46:40.366 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:46:40.366 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:46:40.371 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:46:40.371 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:46:41.973 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:46:41.973 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:46:45.697 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:46:45.699 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:46:45.699 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:46:45.700 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:46:45.700 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:46:45.700 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:46:45.700 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:46:45.758 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 创建标签请求: userId=4, name=测试, color=#f093fb
2025-07-13 13:46:45.810 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:46:45.816 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:46:45.843 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:46:46.447 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[]
2025-07-13 13:46:46.477 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:46:46.482 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:46:46.488 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:46:46.501 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:46:46.502 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 13:46:46.503 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:46:46.507 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:46:46.509 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:46:48.698 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 13:46:48.698 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:46:50.439 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[4]
2025-07-13 13:46:50.500 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:46:50.502 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:46:50.509 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:46:50.511 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:46:50.511 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 13:46:50.511 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:46:50.513 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:46:50.513 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:46:51.880 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:47:00.711 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:47:00.713 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:47:00.713 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:47:00.713 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:47:00.713 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:47:00.713 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:47:00.714 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:47:03.380 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:47:03.383 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:47:03.383 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:47:03.383 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:47:03.384 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:47:03.384 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:47:03.384 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:47:33.368 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:47:33.369 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:47:33.369 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:47:33.369 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:47:33.370 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:47:33.370 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:47:33.370 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:48:03.370 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:48:03.371 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:48:03.371 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:48:03.371 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:48:03.372 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:48:03.372 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:48:03.372 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:48:33.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:48:33.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:48:33.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:48:33.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:48:33.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:48:33.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:48:33.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:49:03.375 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:49:03.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:49:03.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:49:03.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:49:03.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:49:03.378 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:49:03.378 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:49:33.370 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:49:33.372 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:49:33.373 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:49:33.373 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:49:33.373 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:49:33.373 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:49:33.373 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:49:35.675 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:49:35.677 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:49:35.677 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:49:35.677 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:49:35.677 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:49:35.677 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:49:35.678 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:49:36.631 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:49:36.632 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:49:36.668 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:49:36.670 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:49:36.670 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:49:36.670 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:49:36.670 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:49:36.670 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:49:36.670 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:49:36.688 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:49:36.691 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:49:36.699 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:49:36.701 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:49:36.701 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 13:49:36.701 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:49:36.704 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:49:36.704 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:49:37.193 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:49:37.193 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:49:37.193 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:49:37.197 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:49:37.197 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:49:37.197 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:49:37.197 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:49:37.197 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:49:37.197 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:49:37.200 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:49:37.208 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:49:37.209 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:49:37.209 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:49:37.209 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:49:37.209 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:49:37.211 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:49:37.212 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:49:37.212 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:49:37.632 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:49:37.644 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:49:38.124 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:49:50.604 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:49:50.605 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:49:50.605 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:49:50.605 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:49:50.606 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:49:50.606 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:49:50.606 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:49:58.593 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:49:58.599 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:49:58.600 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:49:58.600 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:49:58.600 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:49:58.601 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:49:58.601 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:50:06.700 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:50:06.702 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:50:06.702 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:50:06.702 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:50:06.703 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:50:06.703 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:50:06.703 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:50:10.640 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:50:10.641 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:50:10.642 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:50:10.642 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:50:10.642 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:50:10.642 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:50:10.642 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:50:18.529 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:50:18.531 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:50:18.531 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:50:18.531 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:50:18.532 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:50:18.532 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:50:18.532 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:50:20.680 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:50:20.681 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:50:20.682 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:50:20.682 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:50:20.682 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:50:20.682 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:50:20.682 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:50:29.946 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:50:29.948 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:50:29.948 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:50:29.948 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:50:29.948 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:50:29.948 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:50:29.948 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:50:37.363 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:50:37.364 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:50:37.364 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:50:37.365 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:50:37.366 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:50:37.367 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:50:37.367 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:51:07.374 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:51:07.376 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:51:07.376 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:51:07.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:51:07.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:51:07.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:51:07.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:51:37.375 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:51:37.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:51:37.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:51:37.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:51:37.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:51:37.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:51:37.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:52:07.387 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:52:07.389 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:52:07.390 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:52:07.390 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:52:07.390 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:52:07.390 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:52:07.390 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:52:36.308 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:52:36.310 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:52:36.310 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:52:36.311 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:52:36.311 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:52:36.311 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:52:36.311 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:52:36.696 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:52:36.698 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:52:36.698 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:52:36.698 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:52:36.698 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:52:36.698 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:52:36.699 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:52:37.885 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:52:37.886 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:52:37.910 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:52:37.912 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:52:37.912 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:52:37.912 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:52:37.912 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:52:37.912 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:52:37.912 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:52:37.929 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:52:37.932 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:52:37.948 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:52:37.950 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:52:37.950 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 13:52:37.951 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:52:37.954 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:52:37.954 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:52:38.434 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:52:38.434 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:52:38.434 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:52:38.440 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:52:38.440 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:52:38.440 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:52:38.440 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:52:38.440 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:52:38.440 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:52:38.440 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:52:38.447 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:52:38.448 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:52:38.448 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:52:38.448 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:52:38.448 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:52:38.452 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:52:38.452 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:52:38.452 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:52:38.886 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:52:38.905 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:52:40.935 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:53:08.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:53:08.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:53:08.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:53:08.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:53:08.380 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:53:08.381 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:53:08.381 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:53:09.800 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:53:09.803 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:53:09.803 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:53:09.804 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:53:09.804 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:53:09.804 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:53:09.804 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:53:38.371 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:53:38.373 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:53:38.373 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:53:38.373 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:53:38.373 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:53:38.373 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:53:38.373 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:54:08.379 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:54:08.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:54:08.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:54:08.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:54:08.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:54:08.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:54:08.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:54:38.366 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:54:38.367 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:54:38.367 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:54:38.367 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:54:38.367 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:54:38.368 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:54:38.368 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:55:06.789 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:55:06.791 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:55:06.791 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:55:06.792 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:55:06.792 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:55:06.792 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:55:06.793 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:55:07.942 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:55:07.944 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:55:07.945 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:55:07.945 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:55:07.945 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:55:07.945 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:55:07.945 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:55:08.812 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 13:55:08.813 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 13:55:08.836 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:55:08.838 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:55:08.839 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:55:08.839 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:55:08.839 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:55:08.839 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:55:08.840 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:55:08.858 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 13:55:08.861 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 13:55:08.871 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 13:55:08.873 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 13:55:08.873 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 13:55:08.873 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 13:55:08.876 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 13:55:08.876 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 13:55:09.358 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:55:09.359 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 13:55:09.359 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 13:55:09.364 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 13:55:09.365 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 13:55:09.365 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 13:55:09.365 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 13:55:09.365 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 13:55:09.366 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 13:55:09.372 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 13:55:09.379 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 13:55:09.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:55:09.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:55:09.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 13:55:09.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 13:55:09.383 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 13:55:09.383 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 13:55:09.384 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 13:55:09.816 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 13:55:09.835 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 13:55:10.388 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 13:55:28.596 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:55:28.598 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:55:28.598 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:55:28.598 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:55:28.599 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:55:28.599 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:55:28.599 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:55:39.379 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:55:39.380 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:55:39.380 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:55:39.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:55:39.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:55:39.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:55:39.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:55:40.650 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:55:40.652 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:55:40.652 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:55:40.652 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:55:40.653 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:55:40.653 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:55:40.653 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:56:09.366 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:56:09.369 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:56:09.369 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:56:09.369 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:56:09.369 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:56:09.369 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:56:09.369 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:56:39.367 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:56:39.370 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:56:39.370 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:56:39.370 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:56:39.370 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:56:39.370 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:56:39.371 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:57:09.380 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:57:09.383 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:57:09.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:57:09.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:57:09.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:57:09.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:57:09.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:57:39.366 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:57:39.368 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:57:39.368 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:57:39.368 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:57:39.368 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:57:39.368 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:57:39.368 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:58:09.377 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:58:09.382 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:58:09.382 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:58:09.382 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:58:09.382 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:58:09.383 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:58:09.383 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:58:39.370 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:58:39.372 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:58:39.373 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:58:39.373 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:58:39.373 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:58:39.373 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:58:39.373 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 13:59:40.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 13:59:40.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 13:59:40.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 13:59:40.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 13:59:40.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 13:59:40.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 13:59:40.380 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:00:00.011 [MessageBroker-20] INFO  c.i.i.u.s.DataConsistencyService - 开始执行数据一致性检查
2025-07-13 14:00:00.016 [MessageBroker-7] INFO  c.i.i.u.t.TemporaryFileCleanupTask - 开始执行过期临时文件清理任务
2025-07-13 14:00:00.046 [MessageBroker-7] INFO  c.i.i.u.t.TemporaryFileCleanupTask - 没有发现过期的临时文件
2025-07-13 14:00:00.192 [MessageBroker-20] INFO  c.i.i.u.s.DataConsistencyService - 数据一致性检查完成，发现 0 个不一致项
2025-07-13 14:00:41.367 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:00:41.368 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:00:41.369 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:00:41.369 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:00:41.369 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:00:41.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:00:41.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:01:42.411 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:01:42.416 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:01:42.416 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:01:42.416 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:01:42.416 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:01:42.416 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:01:42.417 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:02:43.391 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:02:43.394 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:02:43.394 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:02:43.394 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:02:43.394 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:02:43.394 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:02:43.395 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:03:44.384 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:03:44.386 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:03:44.386 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:03:44.386 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:03:44.386 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:03:44.386 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:03:44.387 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:04:44.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:04:44.378 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:04:44.378 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:04:44.378 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:04:44.378 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:04:44.378 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:04:44.378 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:05:32.456 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:05:32.459 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:05:32.460 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:05:32.461 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:05:32.461 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:05:32.461 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:05:32.462 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:05:32.498 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:05:32.501 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:05:32.501 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:05:32.502 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:05:32.502 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:05:32.503 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:05:32.503 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:05:34.174 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:05:34.175 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:05:34.227 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:05:34.229 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:05:34.230 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:05:34.230 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:05:34.231 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:05:34.231 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:05:34.231 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:05:34.267 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:05:34.271 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:05:34.294 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:05:34.296 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:05:34.297 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:05:34.297 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:05:34.302 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:05:34.302 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:05:34.756 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:05:34.756 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:05:34.757 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:05:34.763 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:05:34.763 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:05:34.764 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:05:34.764 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:05:34.764 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:05:34.764 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:05:34.764 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:05:34.772 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:05:34.772 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:05:34.772 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:05:34.773 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:05:34.773 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:05:34.777 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:05:34.778 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:05:34.778 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:05:35.177 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:05:35.195 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:05:35.385 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:05:44.234 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 更新标签请求: userId=4, tagId=4, name=测试001, color=#4facfe
2025-07-13 14:05:44.373 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:05:47.870 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:05:47.872 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:05:47.901 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:05:47.903 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:05:47.904 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:05:47.904 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:05:47.904 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:05:47.904 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:05:47.904 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:05:47.924 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:05:47.928 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:05:47.940 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:05:47.942 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:05:47.943 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:05:47.943 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:05:47.946 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:05:47.946 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:05:48.427 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:05:48.427 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:05:48.428 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:05:48.429 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:05:48.430 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:05:48.430 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:05:48.430 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:05:48.431 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:05:48.431 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:05:48.433 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:05:48.439 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:05:48.439 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:05:48.439 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:05:48.439 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:05:48.440 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:05:48.442 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:05:48.442 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:05:48.442 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:05:48.870 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:05:48.891 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:06:02.381 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:06:13.244 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:06:18.384 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:06:18.387 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:06:18.387 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:06:18.387 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:06:18.388 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:06:18.389 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:06:18.389 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:06:48.377 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:06:48.379 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:06:48.379 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:06:48.379 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:06:48.380 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:06:48.380 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:06:48.380 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:07:18.405 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:07:18.409 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:07:18.409 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:07:18.410 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:07:18.410 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:07:18.410 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:07:18.410 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:07:48.387 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:07:48.390 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:07:48.390 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:07:48.391 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:07:48.391 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:07:48.391 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:07:48.391 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:08:18.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:08:18.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:08:18.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:08:18.380 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:08:18.380 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:08:18.380 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:08:18.380 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:08:48.367 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:08:48.368 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:08:48.368 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:08:48.369 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:08:48.369 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:08:48.369 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:08:48.369 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:09:18.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:09:18.381 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:09:18.381 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:09:18.382 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:09:18.383 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:09:18.383 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:09:18.383 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:10:14.718 [MessageBroker-7] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 20, active threads = 1, queued tasks = 8, completed tasks = 65]
2025-07-13 14:10:19.368 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:10:19.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:10:19.371 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:10:19.371 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:10:19.371 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:10:19.371 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:10:19.371 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:11:20.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:11:20.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:11:20.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:11:20.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:11:20.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:11:20.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:11:20.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:12:21.418 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:12:21.422 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:12:21.423 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:12:21.423 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:12:21.424 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:12:21.424 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:12:21.424 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:13:22.402 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:13:22.406 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:13:22.406 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:13:22.406 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:13:22.407 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:13:22.407 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:13:22.407 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:14:23.404 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:14:23.407 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:14:23.408 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:14:23.408 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:14:23.408 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:14:23.408 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:14:23.409 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:15:24.381 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:15:24.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:15:24.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:15:24.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:15:24.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:15:24.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:15:24.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:16:25.428 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:16:25.434 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:16:25.435 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:16:25.436 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:16:25.436 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:16:25.436 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:16:25.437 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:17:26.388 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:17:26.392 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:17:26.392 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:17:26.393 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:17:26.393 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:17:26.394 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:17:26.394 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:18:27.381 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:18:27.383 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:18:27.383 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:18:27.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:18:27.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:18:27.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:18:27.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:19:28.420 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:19:28.426 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:19:28.427 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:19:28.427 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:19:28.427 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:19:28.428 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:19:28.428 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:20:29.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:20:29.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:20:29.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:20:29.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:20:29.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:20:29.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:20:29.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:21:30.371 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:21:30.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:21:30.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:21:30.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:21:30.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:21:30.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:21:30.375 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:22:16.442 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:22:16.447 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:22:16.447 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:22:16.447 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:22:16.448 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:22:16.449 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:22:16.449 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:22:16.477 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:22:16.480 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:22:16.480 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:22:16.480 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:22:16.480 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:22:16.481 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:22:16.481 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:22:17.518 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:22:17.521 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:22:17.551 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:22:17.553 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:22:17.553 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:22:17.553 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:22:17.553 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:22:17.553 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:22:17.553 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:22:17.576 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:22:17.578 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:22:17.606 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:22:17.609 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:22:17.610 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:22:17.610 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:22:17.612 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:22:17.613 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:22:18.084 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:22:18.090 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:22:18.091 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:22:18.094 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:22:18.094 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:22:18.094 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:22:18.094 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:22:18.095 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:22:18.095 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:22:18.099 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:22:18.105 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:22:18.105 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:22:18.106 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:22:18.106 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:22:18.106 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:22:18.111 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:22:18.111 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:22:18.111 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:22:18.513 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:22:18.540 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:22:19.002 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:22:23.801 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 删除标签请求: userId=4, tagId=4
2025-07-13 14:22:23.867 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:22:27.283 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:22:27.286 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:22:27.313 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:22:27.318 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:22:27.318 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:22:27.319 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:22:27.319 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:22:27.319 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:22:27.319 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:22:27.340 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:22:27.344 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:22:27.350 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:22:27.352 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:22:27.352 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 14:22:27.353 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:22:27.355 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:22:27.355 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:22:27.853 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:22:27.853 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:22:27.855 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:22:27.858 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:22:27.858 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:22:27.858 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:22:27.859 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:22:27.859 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:22:27.859 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:22:27.860 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:22:27.865 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:22:27.867 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:22:27.867 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:22:27.867 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:22:27.867 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:22:27.871 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:22:27.871 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:22:27.872 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:22:28.286 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:22:28.300 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:22:30.998 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:22:30.999 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 14:22:34.074 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 更新联系人标签请求: userId=4, friendId=2, tagIds=[2]
2025-07-13 14:22:34.156 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:22:34.160 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:22:34.176 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:22:34.180 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:22:34.181 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:22:34.181 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:22:34.186 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:22:34.186 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:22:35.096 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:22:40.402 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 更新标签请求: userId=4, tagId=2, name=测试1, color=#4ecdc4
2025-07-13 14:22:40.483 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:22:43.258 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:22:43.259 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:22:43.285 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:22:43.287 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:22:43.287 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:22:43.288 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:22:43.288 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:22:43.289 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:22:43.289 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:22:43.307 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:22:43.310 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:22:43.321 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:22:43.324 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:22:43.325 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:22:43.325 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:22:43.328 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:22:43.329 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:22:43.814 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:22:43.815 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:22:43.816 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:22:43.819 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:22:43.819 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:22:43.819 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:22:43.819 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:22:43.820 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:22:43.820 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:22:43.822 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:22:43.829 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:22:43.830 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:22:43.830 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:22:43.831 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:22:43.831 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:22:43.834 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:22:43.834 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:22:43.834 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:22:44.270 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:22:44.289 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:23:13.375 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:23:13.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:23:13.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:23:13.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:23:13.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:23:13.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:23:13.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:23:13.410 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:23:13.414 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:23:13.431 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:23:13.434 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:23:13.434 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:23:13.434 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:23:13.438 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:23:13.439 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:23:43.392 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:23:43.397 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:23:43.398 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:23:43.398 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:23:43.399 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:23:43.399 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:23:43.400 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:23:43.431 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:23:43.436 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:23:43.454 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:23:43.458 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:23:43.458 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:23:43.459 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:23:43.465 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:23:43.466 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:24:13.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:24:13.386 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:24:13.386 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:24:13.387 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:24:13.387 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:24:13.388 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:24:13.388 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:24:13.415 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:24:13.418 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:24:13.432 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:24:13.434 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:24:13.435 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:24:13.435 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:24:13.440 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:24:13.440 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:24:43.388 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:24:43.392 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:24:43.392 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:24:43.392 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:24:43.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:24:43.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:24:43.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:24:43.422 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:24:43.426 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:24:43.441 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:24:43.445 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:24:43.445 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:24:43.446 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:24:43.451 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:24:43.452 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:25:13.388 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:25:13.392 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:25:13.392 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:25:13.393 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:25:13.393 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:25:13.394 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:25:13.394 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:25:13.426 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:25:13.431 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:25:13.444 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:25:13.447 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:25:13.448 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:25:13.448 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:25:13.453 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:25:13.453 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:25:43.395 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:25:43.399 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:25:43.399 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:25:43.400 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:25:43.401 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:25:43.401 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:25:43.401 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:25:43.429 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:25:43.433 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:25:43.448 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:25:43.451 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:25:43.451 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:25:43.451 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:25:43.457 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:25:43.457 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:26:13.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:26:13.375 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:26:13.375 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:26:13.375 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:26:13.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:26:13.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:26:13.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:26:13.391 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:26:13.393 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:26:13.398 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:26:13.400 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:26:13.400 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:26:13.400 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:26:13.403 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:26:13.403 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:26:44.389 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:26:44.392 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:26:44.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:26:44.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:26:44.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:26:44.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:26:44.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:26:44.412 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:26:44.414 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:26:44.422 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:26:44.425 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:26:44.425 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:26:44.425 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:26:44.428 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:26:44.428 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:40:16.330 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 14:40:16.425 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 25608 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 14:40:16.428 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 14:40:16.505 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 14:40:16.506 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 14:40:17.934 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 14:40:17.935 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 14:40:18.299 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 351 ms. Found 10 JPA repository interfaces.
2025-07-13 14:40:18.817 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 14:40:18.818 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 14:40:18.852 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:40:18.853 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:40:18.853 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:40:18.855 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:40:18.855 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:40:18.856 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:40:18.857 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:40:18.857 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:40:18.857 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:40:18.857 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:40:18.859 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 Redis repository interfaces.
2025-07-13 14:40:19.829 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 14:40:19.832 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 14:40:19.850 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 14:40:19.860 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 14:40:19.863 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 14:40:19.863 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 14:40:19.920 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 14:40:19.920 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3413 ms
2025-07-13 14:40:20.165 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 14:40:20.309 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@64380fe5
2025-07-13 14:40:20.311 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 14:40:20.357 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 14:40:20.440 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.047s)
2025-07-13 14:40:20.461 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 14:40:20.465 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 14:40:20.541 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 14:40:20.596 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 14:40:20.635 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 14:40:20.873 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 14:40:22.160 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 14:40:22.219 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 14:40:23.234 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 14:40:23.706 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 14:40:23.714 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 14:40:23.724 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 14:40:23.730 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 14:40:23.845 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 14:42:59.414 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 14:42:59.470 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 22492 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 14:42:59.471 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 14:42:59.533 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 14:42:59.534 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 14:43:00.437 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 14:43:00.438 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 14:43:00.620 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 174 ms. Found 10 JPA repository interfaces.
2025-07-13 14:43:01.020 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 14:43:01.022 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 14:43:01.053 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:43:01.053 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:43:01.054 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:43:01.055 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:43:01.056 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:43:01.057 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:43:01.058 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:43:01.059 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:43:01.061 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:43:01.061 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:43:01.061 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 32 ms. Found 0 Redis repository interfaces.
2025-07-13 14:43:02.075 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 14:43:02.078 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 14:43:02.083 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 14:43:02.093 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 14:43:02.095 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 14:43:02.096 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 14:43:02.158 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 14:43:02.160 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2623 ms
2025-07-13 14:43:02.463 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 14:43:02.622 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1ccc382e
2025-07-13 14:43:02.624 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 14:43:02.682 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 14:43:02.770 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.051s)
2025-07-13 14:43:02.794 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 14:43:02.800 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 14:43:02.920 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 14:43:02.996 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 14:43:03.048 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 14:43:03.332 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 14:43:04.383 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 14:43:04.441 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 14:43:05.115 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 14:43:05.502 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 14:43:05.728 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 14:43:05.728 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 14:43:05.990 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 14:43:06.144 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 14:43:06.188 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 14:43:06.188 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 14:43:06.224 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 14:43:06.224 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 14:43:06.272 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 14:43:06.281 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 14:43:06.290 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 14:43:06.301 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 14:43:06.399 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 14:43:06.406 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 14:43:06.600 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 14:43:06.758 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 14:43:07.033 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 14:43:07.675 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 14:43:07.729 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 14:43:07.751 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 14:43:07.752 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 14:43:07.754 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2a5c4c3b]]
2025-07-13 14:43:07.754 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 14:43:07.771 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 8.829 seconds (process running for 9.237)
2025-07-13 14:43:07.828 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 14:43:07.863 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 14:43:07.883 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 14:43:07.905 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 14:43:07.929 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 14:43:07.950 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 14:43:07.972 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 14:43:08.021 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 14:43:27.462 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 14:43:27.462 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 14:43:27.464 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 14:43:53.866 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:43:53.870 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:43:53.972 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:43:53.978 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:43:53.978 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:43:53.979 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:43:53.980 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:43:53.980 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:43:53.981 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:43:54.052 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:43:54.058 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:43:54.121 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:43:54.128 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:43:54.131 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:43:54.131 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:43:54.138 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:43:54.138 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:43:54.547 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:43:54.548 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:43:54.549 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:43:54.571 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:43:54.571 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:43:54.572 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:43:54.573 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:43:54.573 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:43:54.578 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:43:54.579 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:43:54.597 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:43:54.598 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:43:54.598 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:43:54.598 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:43:54.600 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:43:54.614 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:43:54.615 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:43:54.615 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:43:54.716 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:43:54.785 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:43:56.788 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:44:04.225 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:44:04.227 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:44:04.277 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:44:04.282 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:44:04.282 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:44:04.283 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:44:04.283 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:44:04.283 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:44:04.284 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:44:04.315 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:44:04.320 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:44:04.340 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:44:04.343 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:44:04.344 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:44:04.345 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:44:04.350 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:44:04.350 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:44:04.814 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:44:04.815 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:44:04.815 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:44:04.821 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:44:04.821 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:44:04.821 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:44:04.821 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:44:04.821 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:44:04.822 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:44:04.827 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:44:04.835 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:44:04.836 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:44:04.836 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:44:04.836 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:44:04.836 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:44:04.839 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:44:04.840 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:44:04.840 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:44:05.201 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:44:05.226 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:44:07.709 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 14:44:10.126 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:44:24.581 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:44:24.583 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:44:24.584 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:44:24.584 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:44:24.584 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:44:24.584 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:44:24.584 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:44:34.037 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:44:34.039 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:44:34.066 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:44:34.068 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:44:34.069 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:44:34.069 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:44:34.069 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:44:34.069 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:44:34.069 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:44:34.091 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:44:34.094 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:44:34.106 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:44:34.108 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:44:34.108 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:44:34.109 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:44:34.112 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:44:34.112 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:44:34.591 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:44:34.592 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:44:34.592 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:44:34.595 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:44:34.596 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:44:34.596 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:44:34.596 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:44:34.596 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:44:34.596 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:44:34.598 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:44:34.608 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:44:34.609 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:44:34.609 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:44:34.609 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:44:34.609 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:44:34.613 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:44:34.614 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:44:34.614 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:44:35.032 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:44:35.048 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:44:37.932 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:45:04.368 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:45:04.371 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:45:04.372 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:45:04.372 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:45:04.372 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:45:04.372 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:45:04.372 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:45:34.375 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:45:34.377 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:45:34.377 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:45:34.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:45:34.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:45:34.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:45:34.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:45:54.662 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 2 class path changes (0 additions, 0 deletions, 2 modifications)
2025-07-13 14:45:54.668 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 14:45:54.668 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2a5c4c3b]]
2025-07-13 14:45:54.668 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 14:45:54.669 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 14:45:55.103 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 14:45:55.108 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 14:45:55.116 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 14:45:55.315 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 22492 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 14:45:55.316 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 14:45:55.603 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 14:45:55.604 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 14:45:55.645 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 41 ms. Found 10 JPA repository interfaces.
2025-07-13 14:45:55.747 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 14:45:55.747 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 14:45:55.760 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:45:55.760 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:45:55.761 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:45:55.761 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:45:55.761 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:45:55.761 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:45:55.762 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:45:55.762 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:45:55.762 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:45:55.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 14:45:55.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-07-13 14:45:55.921 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 14:45:55.922 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 14:45:55.922 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 14:45:55.923 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 14:45:55.923 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 14:45:55.923 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 14:45:55.951 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 14:45:55.951 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 632 ms
2025-07-13 14:45:56.037 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-07-13 14:45:56.051 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@590d136e
2025-07-13 14:45:56.051 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-07-13 14:45:56.066 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 14:45:56.112 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.031s)
2025-07-13 14:45:56.127 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 14:45:56.128 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 14:45:56.166 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 14:45:56.169 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 14:45:56.179 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 14:45:56.328 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 14:45:56.346 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 14:45:56.710 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 14:45:56.711 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 14:45:56.711 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 14:45:56.764 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 14:45:56.815 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 14:45:56.840 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 14:45:56.840 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 14:45:56.858 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 14:45:56.858 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 14:45:56.868 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 14:45:56.875 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 14:45:56.882 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 14:45:56.889 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 14:45:56.960 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 14:45:56.966 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 14:45:57.042 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 14:45:57.084 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 14:45:57.189 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 14:45:57.437 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 14:45:57.453 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 14:45:57.457 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 14:45:57.457 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 14:45:57.457 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7b799389]]
2025-07-13 14:45:57.458 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 14:45:57.466 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 2.2 seconds (process running for 178.931)
2025-07-13 14:45:57.467 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 14:45:57.486 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 14:45:57.504 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 14:45:57.519 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 14:45:57.532 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 14:45:57.548 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 14:45:57.562 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 14:45:57.591 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 14:45:57.592 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 14:46:04.367 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 14:46:04.368 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 14:46:04.370 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 14:46:04.410 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:46:04.413 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:46:04.413 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:46:04.413 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:46:04.413 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:46:04.414 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:46:04.414 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:46:34.384 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:46:34.388 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:46:34.389 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:46:34.389 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:46:34.389 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:46:34.389 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:46:34.390 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:46:57.452 [MessageBroker-4] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 14:47:04.378 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:47:04.382 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:47:04.382 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:47:04.383 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:47:04.383 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:47:04.383 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:47:04.384 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:47:06.495 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:47:06.498 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:47:06.498 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:47:06.498 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:47:06.499 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:47:06.499 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:47:06.499 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:47:07.483 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:47:07.485 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:47:07.558 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:47:07.560 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:47:07.560 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:47:07.561 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:47:07.561 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:47:07.561 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:47:07.562 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:47:07.583 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:47:07.585 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:47:07.605 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:47:07.607 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:47:07.609 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:47:07.609 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:47:07.612 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:47:07.613 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:47:08.081 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:47:08.081 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:47:08.083 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:47:08.088 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:47:08.088 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:47:08.088 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:47:08.088 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:47:08.089 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:47:08.090 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:47:08.091 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:47:08.101 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:47:08.101 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:47:08.101 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:47:08.101 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:47:08.101 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:47:08.106 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:47:08.106 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:47:08.107 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:47:08.430 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:47:08.461 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:47:10.378 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:47:11.256 [http-nio-8080-exec-9] INFO  o.a.coyote.http11.Http11Processor - Error parsing HTTP request header
 Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level.
java.lang.IllegalArgumentException: Invalid character found in the request target [/api/contact-tags/2?userId=[object%20Promise] ]. The valid characters are defined in RFC 7230 and RFC 3986
	at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:478)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:271)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-13 14:47:11.266 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:47:11.268 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:47:11.268 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:47:11.268 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:47:11.268 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:47:11.268 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:47:11.269 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:47:35.638 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:47:35.640 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:47:35.640 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:47:35.640 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:47:35.641 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:47:35.641 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:47:35.641 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:47:37.593 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:47:37.595 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:47:37.595 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:47:37.595 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:47:37.595 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:47:37.595 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:47:37.595 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:47:37.616 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:47:37.619 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:47:37.631 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:47:37.634 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:47:37.634 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:47:37.634 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:47:37.637 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:47:37.638 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:47:39.104 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取收到的好友请求列表: userId=4, status=null
2025-07-13 14:47:39.148 [http-nio-8080-exec-5] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取发送的好友请求列表: userId=4, status=null
2025-07-13 14:47:39.304 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:47:39.328 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:47:40.925 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:47:45.291 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:47:45.292 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:47:45.321 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:47:45.324 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:47:45.324 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:47:45.324 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:47:45.325 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:47:45.325 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:47:45.326 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:47:45.350 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:47:45.353 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:47:45.371 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:47:45.375 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:47:45.375 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:47:45.375 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:47:45.378 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:47:45.378 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:47:45.871 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:47:45.872 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:47:45.873 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:47:45.878 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:47:45.878 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:47:45.878 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:47:45.878 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:47:45.879 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:47:45.879 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:47:45.879 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:47:45.893 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:47:45.893 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:47:45.894 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:47:45.894 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:47:45.894 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:47:45.900 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:47:45.901 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:47:45.902 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:47:46.277 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:47:46.311 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:47:46.371 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:47:48.259 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:47:48.262 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:47:48.263 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:47:48.263 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:47:48.264 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:47:48.264 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:47:48.264 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:48:15.374 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:48:15.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:48:15.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:48:15.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:48:15.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:48:15.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:48:15.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:48:20.369 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:48:20.370 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:48:20.370 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:48:20.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:48:20.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:48:20.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:48:20.372 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:48:45.373 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:48:45.376 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:48:45.376 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:48:45.376 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:48:45.377 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:48:45.377 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:48:45.377 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:49:15.380 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:49:15.385 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:49:15.385 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:49:15.386 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:49:15.387 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:49:15.387 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:49:15.387 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:49:45.367 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:49:45.368 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:49:45.369 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:49:45.369 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:49:45.369 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:49:45.369 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:49:45.369 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:50:15.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:50:15.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:50:15.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:50:15.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:50:15.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:50:15.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:50:15.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:50:45.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:50:45.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:50:45.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:50:45.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:50:45.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:50:45.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:50:45.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:51:15.369 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:51:15.370 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:51:15.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:51:15.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:51:15.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:51:15.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:51:15.372 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:52:16.383 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:52:16.387 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:52:16.387 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:52:16.387 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:52:16.387 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:52:16.388 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:52:16.388 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:52:23.227 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:52:23.231 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:52:23.231 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:52:23.231 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:52:23.231 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:52:23.231 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:52:23.231 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:52:24.000 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:52:24.001 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:52:24.021 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:52:24.023 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:52:24.023 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:52:24.023 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:52:24.024 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:52:24.024 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:52:24.024 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:52:24.047 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:52:24.051 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:52:24.062 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:52:24.064 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:52:24.064 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:52:24.064 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:52:24.069 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:52:24.069 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:52:24.541 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:52:24.542 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:52:24.542 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:52:24.544 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:52:24.544 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:52:24.544 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:52:24.544 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:52:24.545 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:52:24.545 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:52:24.547 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:52:24.554 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:52:24.554 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:52:24.554 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:52:24.554 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:52:24.554 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:52:24.557 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:52:24.557 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:52:24.557 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:52:25.001 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:52:25.016 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:52:26.297 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:52:27.199 [http-nio-8080-exec-7] INFO  o.a.coyote.http11.Http11Processor - Error parsing HTTP request header
 Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level.
java.lang.IllegalArgumentException: Invalid character found in the request target [/api/contact-tags/2?userId=[object%20Promise] ]. The valid characters are defined in RFC 7230 and RFC 3986
	at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:478)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:271)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-13 14:52:27.212 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:52:27.215 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:52:27.215 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:52:27.215 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:52:27.216 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:52:27.216 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:52:27.216 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:52:50.532 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:52:50.534 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:52:50.534 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:52:50.534 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:52:50.534 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:52:50.534 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:52:50.534 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:52:54.046 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:52:54.048 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:52:54.048 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:52:54.049 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:52:54.049 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:52:54.049 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:52:54.049 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:52:54.063 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:52:54.065 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:52:54.074 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:52:54.075 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:52:54.075 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:52:54.076 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:52:54.078 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:52:54.078 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:52:54.501 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:53:24.365 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:53:24.367 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:53:24.367 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:53:24.367 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:53:24.367 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:53:24.367 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:53:24.367 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:53:54.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:53:54.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:53:54.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:53:54.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:53:54.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:53:54.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:53:54.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:54:24.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:54:24.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:54:24.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:54:24.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:54:24.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:54:24.380 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:54:24.380 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:54:54.367 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:54:54.369 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:54:54.369 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:54:54.369 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:54:54.369 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:54:54.369 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:54:54.369 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:55:03.906 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:55:03.908 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:55:03.908 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:55:03.908 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:55:03.908 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:55:03.909 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:55:03.909 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:55:04.817 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:55:04.819 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:55:04.874 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:55:04.879 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:55:04.879 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:55:04.879 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:55:04.880 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:55:04.880 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:55:04.880 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:55:04.926 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:55:04.932 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:55:04.954 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:55:04.958 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:55:04.958 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:55:04.959 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:55:04.966 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:55:04.967 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:55:05.425 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:55:05.426 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:55:05.429 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:55:05.433 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:55:05.435 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:55:05.435 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:55:05.435 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:55:05.435 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:55:05.436 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:55:05.438 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:55:05.456 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:55:05.456 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:55:05.456 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:55:05.457 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:55:05.457 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:55:05.465 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:55:05.465 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:55:05.465 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:55:05.820 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:55:05.860 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:55:06.002 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:55:06.863 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:55:06.865 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:55:06.865 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:55:06.866 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:55:06.866 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:55:06.866 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:55:06.866 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:55:35.389 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:55:35.392 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:55:35.393 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:55:35.393 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:55:35.393 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:55:35.393 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:55:35.394 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:56:05.368 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:56:05.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:56:05.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:56:05.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:56:05.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:56:05.372 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:56:05.372 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:56:13.788 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:56:13.792 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:56:13.792 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:56:13.793 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:56:13.793 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:56:13.793 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:56:13.794 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:56:15.105 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:56:15.111 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:56:15.111 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:56:15.112 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:56:15.112 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:56:15.113 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:56:15.113 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:56:15.668 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:56:15.671 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:56:15.741 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:56:15.745 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:56:15.745 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:56:15.746 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:56:15.746 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:56:15.746 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:56:15.747 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:56:15.809 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:56:15.815 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:56:15.839 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:56:15.843 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:56:15.844 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:56:15.845 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:56:15.853 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:56:15.853 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:56:16.297 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:56:16.301 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:56:16.301 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:56:16.304 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:56:16.305 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:56:16.305 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:56:16.305 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:56:16.306 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:56:16.306 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:56:16.316 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:56:16.336 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:56:16.338 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:56:16.338 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:56:16.339 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:56:16.340 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:56:16.350 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:56:16.350 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:56:16.351 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:56:16.660 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:56:16.678 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:56:17.342 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:56:18.350 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:56:18.352 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:56:18.353 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:56:18.353 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:56:18.353 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:56:18.353 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:56:18.353 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:56:24.338 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:56:24.339 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:56:24.375 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:56:24.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:56:24.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:56:24.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:56:24.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:56:24.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:56:24.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:56:24.405 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:56:24.408 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:56:24.418 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:56:24.421 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:56:24.421 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:56:24.421 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:56:24.427 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:56:24.428 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:56:24.911 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:56:24.911 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:56:24.911 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:56:24.914 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:56:24.915 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:56:24.915 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:56:24.915 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:56:24.915 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:56:24.915 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:56:24.919 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:56:24.928 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:56:24.929 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:56:24.929 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:56:24.929 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:56:24.929 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:56:24.933 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:56:24.934 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:56:24.934 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:56:25.336 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:56:25.355 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:56:26.327 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:56:28.519 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:56:28.520 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:56:28.520 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:56:28.521 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:56:28.521 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:56:28.521 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:56:28.521 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:56:32.999 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:56:33.001 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:56:33.001 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:56:33.001 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:56:33.001 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:56:33.001 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:56:33.001 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:56:35.494 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:56:35.496 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:56:35.518 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:56:35.520 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:56:35.520 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:56:35.520 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:56:35.520 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:56:35.521 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:56:35.521 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:56:35.536 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:56:35.540 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:56:35.551 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:56:35.552 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:56:35.552 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:56:35.553 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:56:35.556 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:56:35.556 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:56:36.039 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:56:36.040 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:56:36.040 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:56:36.041 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:56:36.042 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:56:36.042 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:56:36.042 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:56:36.042 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:56:36.042 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:56:36.048 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:56:36.059 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:56:36.060 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:56:36.060 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:56:36.060 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:56:36.060 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:56:36.064 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:56:36.064 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:56:36.065 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:56:36.454 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:56:36.471 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:56:38.702 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:56:42.993 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:56:42.995 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:56:42.995 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:56:42.995 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:56:42.995 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:56:42.995 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:56:42.996 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:56:57.810 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:56:57.811 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:56:57.838 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:56:57.839 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:56:57.840 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:56:57.840 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:56:57.840 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:56:57.840 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:56:57.840 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:56:57.890 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:56:57.893 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:56:57.901 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:56:57.902 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:56:57.903 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:56:57.903 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:56:57.907 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:56:57.907 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:56:58.392 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:56:58.392 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:56:58.392 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:56:58.394 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:56:58.394 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:56:58.394 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:56:58.394 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:56:58.394 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:56:58.394 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:56:58.398 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:56:58.405 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:56:58.406 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:56:58.406 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:56:58.406 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:56:58.406 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:56:58.411 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:56:58.411 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:56:58.411 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:56:58.817 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:56:58.832 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:57:00.918 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:57:11.237 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:57:11.239 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:57:11.239 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:57:11.239 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:57:11.239 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:57:11.239 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:57:11.240 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:57:28.377 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:57:28.380 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:57:28.380 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:57:28.380 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:57:28.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:57:28.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:57:28.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:57:58.383 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:57:58.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:57:58.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:57:58.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:57:58.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:57:58.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:57:58.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:58:10.010 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:58:10.013 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:58:10.014 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:58:10.014 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:58:10.014 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:58:10.014 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:58:10.015 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:58:14.092 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:58:14.096 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:58:14.101 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:58:14.107 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:58:14.107 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:58:14.108 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:58:14.108 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:58:14.108 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:58:14.109 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:58:14.116 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:58:14.120 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:58:14.120 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:58:14.121 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:58:14.126 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:58:14.126 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:58:24.844 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:58:24.847 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:58:24.847 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:58:24.849 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:58:24.849 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:58:24.850 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:58:24.850 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:58:24.850 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:58:24.850 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:58:24.856 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:58:24.859 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:58:24.859 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:58:24.859 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:58:24.862 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:58:24.862 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:58:28.369 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:58:28.372 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:58:28.372 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:58:28.373 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:58:28.373 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:58:28.374 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:58:28.374 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:58:28.394 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:58:28.397 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:58:28.406 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:58:28.409 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:58:28.409 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:58:28.409 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:58:28.412 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:58:28.413 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:58:58.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:58:58.393 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:58:58.394 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:58:58.394 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:58:58.394 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:58:58.394 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:58:58.395 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:58:58.420 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:58:58.423 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:58:58.436 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:58:58.438 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:58:58.438 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:58:58.439 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:58:58.441 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:58:58.441 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:59:28.381 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:59:28.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:59:28.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:59:28.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:59:28.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:59:28.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:59:28.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:59:28.402 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:59:28.404 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:59:28.411 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:59:28.412 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:59:28.413 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:59:28.413 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:59:28.415 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:59:28.415 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:59:56.592 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:59:56.595 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:59:56.596 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:59:56.598 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:59:56.598 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:59:56.599 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:59:56.599 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:59:56.599 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:59:56.600 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:59:56.614 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:59:56.617 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:59:56.617 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:59:56.617 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:59:56.621 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:59:56.622 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:59:57.457 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 14:59:57.461 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 14:59:57.498 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 14:59:57.500 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 14:59:57.501 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 14:59:57.501 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 14:59:57.501 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 14:59:57.501 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 14:59:57.502 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 14:59:57.529 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 14:59:57.532 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 14:59:57.543 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 14:59:57.545 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 14:59:57.545 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 14:59:57.546 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 14:59:57.550 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 14:59:57.550 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 14:59:58.047 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 14:59:58.048 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:59:58.048 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 14:59:58.061 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 14:59:58.061 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 14:59:58.061 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 14:59:58.062 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 14:59:58.062 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 14:59:58.063 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 14:59:58.063 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 14:59:58.073 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 14:59:58.074 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:59:58.074 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:59:58.075 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 14:59:58.076 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 14:59:58.081 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 14:59:58.082 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 14:59:58.082 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 14:59:58.444 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 14:59:58.467 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 14:59:58.753 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 14:59:59.998 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:00:00.001 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:00:00.001 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:00:00.002 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:00:00.002 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:00:00.002 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:00:00.002 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:00:00.015 [MessageBroker-11] INFO  c.i.i.u.s.DataConsistencyService - 开始执行数据一致性检查
2025-07-13 15:00:00.020 [MessageBroker-19] INFO  c.i.i.u.t.TemporaryFileCleanupTask - 开始执行过期临时文件清理任务
2025-07-13 15:00:00.038 [MessageBroker-19] INFO  c.i.i.u.t.TemporaryFileCleanupTask - 没有发现过期的临时文件
2025-07-13 15:00:00.170 [MessageBroker-11] INFO  c.i.i.u.s.DataConsistencyService - 数据一致性检查完成，发现 0 个不一致项
2025-07-13 15:00:03.256 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:00:03.258 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:00:03.258 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:00:03.258 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:00:03.258 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:00:03.258 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:00:03.259 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:00:10.268 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:00:10.271 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:00:10.272 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:00:10.272 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:00:10.272 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:00:10.272 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:00:10.273 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:00:20.021 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:00:21.404 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:00:21.407 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:00:21.407 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:00:21.407 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:00:21.408 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:00:21.408 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:00:21.409 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:00:27.538 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:00:27.540 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:00:27.541 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:00:27.541 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:00:27.542 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:00:27.542 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:00:27.542 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:00:53.390 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:00:53.392 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:00:53.392 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:00:53.392 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:00:53.392 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:00:53.392 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:00:53.393 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:00:57.530 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:00:57.533 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:00:57.533 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:00:57.534 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:00:57.534 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:00:57.534 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:00:57.534 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:01:02.107 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:01:02.110 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:01:02.110 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:01:02.110 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:01:02.110 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:01:02.111 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:01:02.111 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:01:18.751 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:01:18.754 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:01:18.754 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:01:18.754 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:01:18.754 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:01:18.754 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:01:18.754 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:01:28.377 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:01:28.381 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:01:28.381 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:01:28.381 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:01:28.381 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:01:28.381 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:01:28.381 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:01:30.505 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:01:30.507 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:01:30.507 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:01:30.508 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:01:30.508 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:01:30.508 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:01:30.508 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:01:58.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:01:58.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:01:58.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:01:58.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:01:58.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:01:58.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:01:58.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:02:28.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:02:28.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:02:28.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:02:28.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:02:28.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:02:28.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:02:28.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:02:58.372 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:02:58.375 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:02:58.375 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:02:58.376 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:02:58.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:02:58.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:02:58.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:03:09.157 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:03:09.159 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:03:09.159 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:03:09.160 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:03:09.160 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:03:09.160 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:03:09.160 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:03:09.958 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:03:09.959 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:03:09.983 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:03:09.985 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:03:09.985 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:03:09.985 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:03:09.986 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:03:09.986 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:03:09.986 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:03:10.004 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:03:10.006 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:03:10.015 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:03:10.018 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:03:10.018 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:03:10.019 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:03:10.021 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:03:10.021 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:03:10.505 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:03:10.505 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:03:10.506 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:03:10.511 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:03:10.511 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:03:10.511 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:03:10.511 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:03:10.511 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:03:10.512 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:03:10.513 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:03:10.522 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:03:10.522 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:03:10.522 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:03:10.522 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:03:10.522 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:03:10.526 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:03:10.526 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:03:10.527 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:03:10.962 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:03:10.975 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:03:11.560 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:03:12.647 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:03:12.649 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:03:12.649 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:03:12.649 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:03:12.650 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:03:12.650 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:03:12.650 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:03:22.625 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:03:22.628 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:03:22.628 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:03:22.628 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:03:22.629 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:03:22.629 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:03:22.629 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:03:24.679 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:03:24.681 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:03:24.681 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:03:24.682 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:03:24.682 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:03:24.682 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:03:24.683 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:03:28.793 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:03:28.795 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:03:28.795 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:03:28.796 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:03:28.796 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:03:28.796 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:03:28.797 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:03:32.991 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:03:34.155 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:03:34.158 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:03:34.158 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:03:34.159 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:03:34.159 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:03:34.159 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:03:34.160 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:03:36.750 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:03:36.754 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:03:36.755 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:03:36.755 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:03:36.755 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:03:36.756 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:03:36.756 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:03:40.024 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:03:40.027 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:03:40.027 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:03:40.028 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:03:40.028 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:03:40.028 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:03:40.028 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:03:40.055 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:03:40.059 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:03:40.068 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:03:40.070 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:03:40.070 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:03:40.070 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:03:40.073 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:03:40.074 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:03:50.455 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:03:50.456 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:03:50.458 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:03:50.459 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:03:50.459 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:03:50.459 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:03:50.459 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:03:50.459 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:03:50.459 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:03:50.463 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:03:50.464 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:03:50.465 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:03:50.465 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:03:50.468 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:03:50.468 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:03:59.579 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 开始处理密码登录请求: 3280164803@qq.com
2025-07-13 15:04:00.055 [http-nio-8080-exec-6] INFO  c.i.i.a.service.AccountLockService - 用户 3280164803@qq.com 无登录失败记录需要清除
2025-07-13 15:04:00.055 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 用户密码验证成功: userId=2, email=3280164803@qq.com
2025-07-13 15:04:00.056 [http-nio-8080-exec-6] INFO  c.i.i.a.s.impl.DeviceServiceImpl - 记录登录设备: userId=2, deviceType=Web, ipAddress=null
2025-07-13 15:04:00.059 [http-nio-8080-exec-6] INFO  c.i.i.a.s.impl.DeviceServiceImpl - 更新现有设备记录: deviceId=2
2025-07-13 15:04:00.080 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 用户登录成功: userId=2, email=3280164803@qq.com, rememberMe=false
2025-07-13 15:04:01.684 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:04:01.685 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=2
2025-07-13 15:04:01.714 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:04:01.716 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:04:01.716 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:04:01.716 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:04:01.731 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:04:01.734 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:04:01.738 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:04:01.740 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:04:01.740 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:04:01.740 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:04:01.743 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:04:01.743 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:04:02.233 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 2, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:04:02.233 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 2, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:04:02.233 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 2
2025-07-13 15:04:02.237 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 1
2025-07-13 15:04:02.237 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=24, 名称=202302091675904140211711.jpg, 类型=image, 大小=7125
2025-07-13 15:04:02.238 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=1}
2025-07-13 15:04:02.238 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=1, totalSize=7125, typeStats={image=1}
2025-07-13 15:04:02.241 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:04:02.250 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 2 的所有文件记录数（包括已删除）: 1
2025-07-13 15:04:02.251 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=24, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:04:02.251 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:04:02.253 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 1, 当前页数量: 1
2025-07-13 15:04:02.253 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 1
2025-07-13 15:04:02.254 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 2 找到 1 个文件
2025-07-13 15:04:02.684 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=2
2025-07-13 15:04:02.700 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=7, acceptedSent=1
2025-07-13 15:04:04.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:04:04.379 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:04:04.379 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:04:04.379 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:04:10.393 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:04:10.396 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:04:10.396 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:04:10.396 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:04:10.397 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:04:10.397 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:04:10.398 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:04:10.416 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:04:10.420 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:04:10.429 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:04:10.431 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:04:10.431 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:04:10.431 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:04:10.435 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:04:10.435 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:04:13.511 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 更新用户资料，用户ID: 2
2025-07-13 15:04:13.515 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 用户资料更新成功，用户ID: 2
2025-07-13 15:04:13.554 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:04:13.555 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:04:13.555 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:04:13.555 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:04:13.571 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:04:13.573 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:04:13.573 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:04:13.574 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:04:16.136 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:04:16.138 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:04:16.138 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:04:16.140 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:04:16.140 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:04:16.140 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:04:16.141 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:04:16.141 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:04:16.141 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:04:16.147 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:04:16.149 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:04:16.150 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:04:16.150 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:04:16.153 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:04:16.153 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:04:17.266 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:04:18.492 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:04:18.494 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:04:18.494 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:04:18.494 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:04:18.494 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:04:18.494 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:04:18.495 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:04:20.099 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:04:20.100 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:04:20.127 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:04:20.129 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:04:20.129 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:04:20.129 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:04:20.129 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:04:20.129 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:04:20.130 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:04:20.147 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:04:20.150 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:04:20.158 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:04:20.161 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:04:20.161 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:04:20.161 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:04:20.164 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:04:20.164 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:04:20.656 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:04:20.657 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:04:20.657 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:04:20.659 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:04:20.659 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:04:20.659 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:04:20.659 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:04:20.660 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:04:20.660 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:04:20.663 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:04:20.671 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:04:20.672 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:04:20.672 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:04:20.672 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:04:20.672 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:04:20.675 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:04:20.675 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:04:20.675 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:04:21.099 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:04:21.113 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:04:23.791 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:04:24.870 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:04:24.872 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:04:24.872 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:04:24.872 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:04:24.872 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:04:24.872 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:04:24.872 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:04:27.344 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:04:27.345 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:04:27.365 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:04:27.367 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:04:27.367 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:04:27.368 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:04:27.368 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:04:27.368 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:04:27.368 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:04:27.389 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:04:27.394 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:04:27.406 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:04:27.409 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:04:27.409 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:04:27.409 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:04:27.414 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:04:27.415 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:04:27.885 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:04:27.885 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:04:27.885 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:04:27.888 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:04:27.888 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:04:27.888 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:04:27.889 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:04:27.889 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:04:27.889 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:04:27.899 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:04:27.905 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:04:27.906 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:04:27.906 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:04:27.906 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:04:27.906 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:04:27.910 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:04:27.910 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:04:27.910 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:04:28.343 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:04:28.357 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:04:32.367 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:04:32.370 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:04:32.370 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:04:32.370 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:04:39.049 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:04:39.052 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:04:39.052 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:04:39.053 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:04:39.053 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:04:39.053 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:04:39.054 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:04:39.092 [http-nio-8080-exec-6] INFO  c.i.i.r.c.ContactSearchController - 通用搜索用户: keyword=test, currentUserId=4, page=0, size=20
2025-07-13 15:04:39.097 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 通用搜索用户: searchRequest=SearchContactRequest(keyword=test, searchType=null, userId=4)
2025-07-13 15:04:39.097 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据用户ID搜索用户: searchRequest=SearchContactRequest(keyword=test, searchType=null, userId=4)
2025-07-13 15:04:39.107 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 未找到用户: userIdStr=test
2025-07-13 15:04:39.107 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据昵称搜索用户: searchRequest=SearchContactRequest(keyword=test, searchType=null, userId=4)
2025-07-13 15:04:39.125 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 昵称搜索完成: nickname=test, 找到1个结果
2025-07-13 15:04:41.357 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=2
2025-07-13 15:04:54.326 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:04:54.328 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:04:54.328 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:04:54.328 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:04:54.328 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:04:54.328 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:04:54.328 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:04:57.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:04:57.389 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:04:57.389 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:04:57.389 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:04:57.389 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:04:57.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:04:57.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:04:57.410 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:04:57.412 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:04:57.421 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:04:57.424 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:04:57.424 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:04:57.424 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:04:57.427 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:04:57.427 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:04:58.344 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=2
2025-07-13 15:05:02.141 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:05:02.142 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:05:02.142 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:05:02.142 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:05:02.155 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:05:02.157 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:05:02.157 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:05:02.157 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:05:02.795 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:05:02.797 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:05:02.798 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:05:02.799 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:05:02.799 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:05:02.800 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:05:02.800 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:05:02.800 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:05:02.800 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:05:02.803 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:05:02.806 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:05:02.806 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:05:02.806 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:05:02.808 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:05:02.809 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:05:03.139 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:05:03.141 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:05:03.142 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:05:03.142 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:05:08.245 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:05:08.247 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:05:08.247 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:05:08.247 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:05:08.260 [http-nio-8080-exec-7] INFO  c.i.i.r.c.ContactSearchController - 通用搜索用户: keyword=te, currentUserId=2, page=0, size=20
2025-07-13 15:05:08.261 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 通用搜索用户: searchRequest=SearchContactRequest(keyword=te, searchType=null, userId=2)
2025-07-13 15:05:08.262 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据用户ID搜索用户: searchRequest=SearchContactRequest(keyword=te, searchType=null, userId=2)
2025-07-13 15:05:08.265 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 未找到用户: userIdStr=te
2025-07-13 15:05:08.266 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据昵称搜索用户: searchRequest=SearchContactRequest(keyword=te, searchType=null, userId=2)
2025-07-13 15:05:08.271 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 昵称搜索完成: nickname=te, 找到1个结果
2025-07-13 15:05:09.261 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=4
2025-07-13 15:05:10.330 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:05:10.332 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:05:10.334 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:05:10.335 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:05:10.335 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:05:10.335 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:05:10.336 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:05:10.336 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:05:10.336 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:05:10.339 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:05:10.341 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:05:10.341 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:05:10.341 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:05:10.344 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:05:10.344 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:05:28.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:05:28.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:05:28.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:05:28.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:05:28.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:05:28.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:05:28.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:05:28.403 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:05:28.405 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:05:28.415 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:05:28.417 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:05:28.417 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:05:28.417 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:05:28.420 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:05:28.420 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:05:32.379 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:05:32.381 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:05:32.381 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:05:32.381 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:05:32.400 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:05:32.403 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:05:32.406 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:05:32.408 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:05:32.408 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:05:32.408 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:05:32.423 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:05:32.423 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:05:58.376 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:05:58.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:05:58.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:05:58.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:05:58.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:05:58.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:05:58.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:05:58.398 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:05:58.418 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:05:58.425 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:05:58.427 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:05:58.427 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:05:58.427 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:05:58.429 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:05:58.430 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:06:02.374 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:06:02.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:06:02.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:06:02.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:06:02.390 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:06:02.392 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:06:02.396 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:06:02.398 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:06:02.399 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:06:02.399 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:06:02.402 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:06:02.402 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:06:28.364 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:06:28.366 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:06:28.366 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:06:28.366 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:06:28.367 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:06:28.367 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:06:28.367 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:06:28.383 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:06:28.385 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:06:28.391 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:06:28.392 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:06:28.392 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:06:28.392 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:06:28.394 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:06:28.395 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:06:32.377 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:06:32.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:06:32.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:06:32.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:06:32.393 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:06:32.395 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:06:32.397 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:06:32.399 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:06:32.399 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:06:32.399 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:06:32.402 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:06:32.402 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:06:41.174 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 259 class path changes (0 additions, 257 deletions, 2 modifications)
2025-07-13 15:06:41.183 [Thread-7] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 15:06:41.183 [Thread-7] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7b799389]]
2025-07-13 15:06:41.183 [Thread-7] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 15:06:41.185 [Thread-7] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 15:06:41.766 [Thread-7] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 15:06:41.769 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-07-13 15:06:41.776 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-07-13 15:06:42.206 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 22492 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 15:06:42.207 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 15:06:42.780 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:06:42.781 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 15:06:42.784 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2025-07-13 15:06:42.790 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:06:42.790 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 15:06:42.793 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 1 ms. Found 0 Redis repository interfaces.
2025-07-13 15:06:43.084 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 15:06:43.086 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 15:06:43.088 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 15:06:43.089 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 15:06:43.089 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 15:06:43.090 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 15:06:43.151 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 15:06:43.153 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 944 ms
2025-07-13 15:06:43.310 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2025-07-13 15:06:43.356 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection com.mysql.cj.jdbc.ConnectionImpl@22e478aa
2025-07-13 15:06:43.357 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2025-07-13 15:06:43.463 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 15:06:43.607 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.082s)
2025-07-13 15:06:43.652 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 15:06:43.655 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 15:06:43.727 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 15:06:43.741 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 15:06:43.772 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 15:06:43.840 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 15:06:43.841 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 15:06:44.003 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 15:06:44.380 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 15:06:44.407 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 15:06:44.449 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 15:06:44.460 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 15:06:44.463 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 15:06:44.471 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 2.356 seconds (process running for 1425.936)
2025-07-13 15:06:44.476 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation delta:


==========================
CONDITION EVALUATION DELTA
==========================


Positive matches:
-----------------

   JpaRepositoriesAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.data.jpa.repository.JpaRepository' (OnClassCondition)
      - @ConditionalOnProperty (spring.data.jpa.repositories.enabled=true) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: javax.sql.DataSource; SearchStrategy: all) found bean 'dataSource'; @ConditionalOnMissingBean (types: org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean,org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ManagementWebSecurityAutoConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)
      - AllNestedConditions 2 matched 0 did not; NestedCondition on DefaultWebSecurityCondition.Beans @ConditionalOnMissingBean (types: org.springframework.security.web.SecurityFilterChain; SearchStrategy: all) did not find any beans; NestedCondition on DefaultWebSecurityCondition.Classes @ConditionalOnClass found required classes 'org.springframework.security.web.SecurityFilterChain', 'org.springframework.security.config.annotation.web.builders.HttpSecurity' (DefaultWebSecurityCondition)

   RedisAutoConfiguration#redisTemplate matched:
      - @ConditionalOnSingleCandidate (types: org.springframework.data.redis.connection.RedisConnectionFactory; SearchStrategy: all) found a single bean 'redisConnectionFactory'; @ConditionalOnMissingBean (names: redisTemplate; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringBootWebSecurityConfiguration.WebSecurityEnablerConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity' (OnClassCondition)
      - @ConditionalOnMissingBean (names: springSecurityFilterChain; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskExecutorConfigurations.TaskExecutorConfiguration matched:
      - @ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskExecutorConfigurations.TaskExecutorConfiguration#applicationTaskExecutor matched:
      - @ConditionalOnThreading found PLATFORM (OnThreadingCondition)

   TaskSchedulingConfigurations.TaskSchedulerConfiguration matched:
      - @ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) found bean 'org.springframework.context.annotation.internalScheduledAnnotationProcessor'; @ConditionalOnMissingBean (types: org.springframework.scheduling.TaskScheduler,java.util.concurrent.ScheduledExecutorService; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskSchedulingConfigurations.TaskSchedulerConfiguration#taskScheduler matched:
      - @ConditionalOnThreading found PLATFORM (OnThreadingCondition)

   TransactionAutoConfiguration.EnableTransactionManagementConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.transaction.TransactionManager; SearchStrategy: all) found bean 'transactionManager'; @ConditionalOnMissingBean (types: org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration matched:
      - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)


Negative matches:
-----------------

   CacheMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans of type org.springframework.cache.CacheManager (OnBeanCondition)

   JpaRepositoriesAutoConfiguration#entityManagerFactoryBootstrapExecutorCustomizer:
      Did not match:
         - AnyNestedCondition 0 matched 2 did not; NestedCondition on JpaRepositoriesAutoConfiguration.BootstrapExecutorCondition.LazyBootstrapMode @ConditionalOnProperty (spring.data.jpa.repositories.bootstrap-mode=lazy) did not find property 'bootstrap-mode'; NestedCondition on JpaRepositoriesAutoConfiguration.BootstrapExecutorCondition.DeferredBootstrapMode @ConditionalOnProperty (spring.data.jpa.repositories.bootstrap-mode=deferred) did not find property 'bootstrap-mode' (JpaRepositoriesAutoConfiguration.BootstrapExecutorCondition)

   TaskExecutorConfigurations.TaskExecutorConfiguration#applicationTaskExecutorVirtualThreads:
      Did not match:
         - @ConditionalOnThreading did not find VIRTUAL (OnThreadingCondition)

   TaskSchedulingConfigurations.TaskSchedulerConfiguration#taskSchedulerVirtualThreads:
      Did not match:
         - @ConditionalOnThreading did not find VIRTUAL (OnThreadingCondition)

   WebSocketMessagingAutoConfiguration.WebSocketMessageConverterConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration,com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans of type org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required classes 'com.fasterxml.jackson.databind.ObjectMapper', 'org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration' (OnClassCondition)


Exclusions:
-----------

    None


Unconditional classes:
----------------------

    None



2025-07-13 15:07:27.569 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 15:07:27.607 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 24944 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 15:07:27.608 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 15:07:27.644 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 15:07:27.645 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 15:07:28.329 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:07:28.330 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 15:07:28.572 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 233 ms. Found 10 JPA repository interfaces.
2025-07-13 15:07:29.234 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:07:29.236 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 15:07:29.291 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:07:29.292 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:07:29.293 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:07:29.294 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:07:29.296 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:07:29.298 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:07:29.298 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:07:29.299 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:07:29.300 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:07:29.302 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:07:29.302 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52 ms. Found 0 Redis repository interfaces.
2025-07-13 15:07:30.542 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 15:07:30.546 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 15:07:30.550 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 15:07:30.562 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 15:07:30.564 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 15:07:30.565 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 15:07:30.641 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 15:07:30.642 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2996 ms
2025-07-13 15:07:30.931 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 15:07:31.086 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1ccc382e
2025-07-13 15:07:31.088 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 15:07:31.142 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 15:07:31.220 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.050s)
2025-07-13 15:07:31.245 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 15:07:31.251 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 15:07:31.350 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 15:07:31.425 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 15:07:31.472 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 15:07:31.783 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 15:07:33.309 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 15:07:33.362 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 15:07:34.080 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 15:07:34.482 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 15:07:34.644 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 15:07:34.644 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 15:07:34.822 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 15:07:34.949 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 15:07:34.978 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 15:07:34.978 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 15:07:35.011 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 15:07:35.012 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 15:07:35.044 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 15:07:35.052 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 15:07:35.060 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 15:07:35.069 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 15:07:35.162 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 15:07:35.167 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 15:07:35.372 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 15:07:35.562 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 15:07:35.827 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 15:07:36.511 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 15:07:36.566 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 15:07:36.603 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 15:07:36.623 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 15:07:36.625 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7e797fa8]]
2025-07-13 15:07:36.625 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 15:07:36.670 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 9.518 seconds (process running for 10.111)
2025-07-13 15:07:36.750 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 15:07:36.774 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 15:07:36.794 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 15:07:36.814 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 15:07:36.837 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 15:07:36.856 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 15:07:36.875 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 15:07:36.918 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 15:07:43.326 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 15:07:43.326 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 15:07:43.329 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 15:07:43.490 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:07:43.491 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:07:43.494 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:07:43.510 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:07:43.511 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:07:43.511 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:07:43.511 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:07:43.512 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:07:43.512 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:07:43.567 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:07:43.572 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:07:43.575 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:07:43.576 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:07:43.583 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:07:43.583 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:07:44.248 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:07:44.251 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:07:44.310 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:07:44.315 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:07:44.316 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:07:44.317 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:07:44.317 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:07:44.317 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:07:44.318 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:07:44.360 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:07:44.365 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:07:44.389 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:07:44.394 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:07:44.395 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:07:44.395 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:07:44.403 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:07:44.404 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:07:44.873 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:07:44.875 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:07:44.875 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:07:44.895 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:07:44.896 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:07:44.896 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:07:44.897 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:07:44.898 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:07:44.902 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:07:44.903 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:07:44.918 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:07:44.919 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:07:44.919 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:07:44.919 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:07:44.920 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:07:44.936 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:07:44.936 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:07:44.937 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:07:45.254 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:07:45.304 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:07:47.220 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:07:47.222 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:07:47.223 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:07:47.223 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:07:47.223 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:07:47.223 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:07:47.223 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:07:47.247 [http-nio-8080-exec-3] INFO  c.i.i.r.c.ContactSearchController - 通用搜索用户: keyword=test, currentUserId=4, page=0, size=20
2025-07-13 15:07:47.251 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 通用搜索用户: searchRequest=SearchContactRequest(keyword=test, searchType=null, userId=4)
2025-07-13 15:07:47.251 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据用户ID搜索用户: searchRequest=SearchContactRequest(keyword=test, searchType=null, userId=4)
2025-07-13 15:07:47.256 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 未找到用户: userIdStr=test
2025-07-13 15:07:47.257 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据昵称搜索用户: searchRequest=SearchContactRequest(keyword=test, searchType=null, userId=4)
2025-07-13 15:07:47.269 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 昵称搜索完成: nickname=test, 找到1个结果
2025-07-13 15:07:48.239 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=2
2025-07-13 15:08:14.375 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:08:14.378 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:08:14.378 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:08:14.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:08:14.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:08:14.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:08:14.380 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:08:14.411 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:08:14.414 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:08:14.424 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:08:14.426 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:08:14.427 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:08:14.427 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:08:14.431 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:08:14.431 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:08:20.146 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:08:20.149 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:08:20.150 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:08:20.153 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:08:20.153 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:08:20.154 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:08:20.154 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:08:20.154 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:08:20.154 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:08:20.161 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:08:20.164 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:08:20.164 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:08:20.164 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:08:20.168 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:08:20.169 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:08:23.335 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取收到的好友请求列表: userId=4, status=null
2025-07-13 15:08:23.375 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取发送的好友请求列表: userId=4, status=null
2025-07-13 15:08:23.545 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:08:23.568 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:08:24.377 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=ceshi
2025-07-13 15:08:24.380 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:08:24.380 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:08:24.380 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:08:28.067 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=2
2025-07-13 15:08:33.389 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:08:33.394 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:08:33.394 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:08:33.394 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:08:33.426 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:08:33.429 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:08:33.438 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:08:33.443 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:08:33.443 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:08:33.443 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:08:33.446 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:08:33.447 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:08:34.004 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:08:35.477 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:08:35.481 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:08:35.482 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:08:35.482 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:08:35.483 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:08:35.483 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:08:35.483 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:08:36.543 [MessageBroker-4] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 15:08:44.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:08:44.382 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:08:44.382 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:08:44.382 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:08:44.382 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:08:44.382 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:08:44.383 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:08:54.485 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:08:54.488 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:08:54.488 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:08:54.488 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:08:54.488 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:08:54.488 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:08:54.488 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:08:55.851 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:08:55.854 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:08:55.854 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:08:55.854 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:08:55.854 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:08:55.854 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:08:55.854 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:08:59.027 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取收到的好友请求列表: userId=4, status=null
2025-07-13 15:08:59.057 [http-nio-8080-exec-8] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取发送的好友请求列表: userId=4, status=null
2025-07-13 15:08:59.186 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:08:59.202 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:08:59.566 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取收到的好友请求列表: userId=4, status=null
2025-07-13 15:08:59.595 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取发送的好友请求列表: userId=4, status=null
2025-07-13 15:08:59.719 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:08:59.746 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:09:00.588 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=ceshi
2025-07-13 15:09:00.590 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:09:00.591 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:09:00.591 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:09:14.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:09:14.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:09:14.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:09:14.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:09:14.380 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:09:14.380 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:09:14.380 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:09:14.399 [http-nio-8080-exec-5] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取收到的好友请求列表: userId=4, status=null
2025-07-13 15:09:14.432 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取发送的好友请求列表: userId=4, status=null
2025-07-13 15:09:14.586 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:09:14.600 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:09:18.891 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取收到的好友请求列表: userId=4, status=null
2025-07-13 15:09:18.894 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:09:18.898 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:09:18.899 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:09:18.900 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:09:18.900 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:09:18.900 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:09:18.900 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:09:18.929 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取发送的好友请求列表: userId=4, status=null
2025-07-13 15:09:19.118 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:09:19.143 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:09:22.516 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:09:22.518 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:09:22.518 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:09:22.518 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:09:22.518 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:09:22.518 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:09:22.518 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:09:22.533 [http-nio-8080-exec-7] INFO  c.i.i.r.c.ContactSearchController - 通用搜索用户: keyword=z, currentUserId=4, page=0, size=20
2025-07-13 15:09:22.536 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 通用搜索用户: searchRequest=SearchContactRequest(keyword=z, searchType=null, userId=4)
2025-07-13 15:09:22.536 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据用户ID搜索用户: searchRequest=SearchContactRequest(keyword=z, searchType=null, userId=4)
2025-07-13 15:09:22.539 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 未找到用户: userIdStr=z
2025-07-13 15:09:22.540 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据昵称搜索用户: searchRequest=SearchContactRequest(keyword=z, searchType=null, userId=4)
2025-07-13 15:09:22.552 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 昵称搜索完成: nickname=z, 找到1个结果
2025-07-13 15:09:24.018 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=3
2025-07-13 15:09:34.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:09:34.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:09:34.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:09:34.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:09:34.406 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:09:34.409 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:09:34.416 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:09:34.419 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:09:34.419 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:09:34.420 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:09:34.425 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:09:34.425 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:09:44.368 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:09:44.370 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:09:44.371 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:09:44.371 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:09:44.371 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:09:44.371 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:09:44.371 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:09:44.395 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:09:44.398 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:09:44.408 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:09:44.411 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:09:44.411 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:09:44.411 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:09:44.414 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:09:44.415 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:10:09.055 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:10:09.058 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:10:09.060 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:10:09.062 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:10:09.063 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:10:09.063 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:10:09.064 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:10:09.064 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:10:09.064 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:10:09.072 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:10:09.089 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:10:09.089 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:10:09.089 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:10:09.094 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:10:09.094 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:10:12.375 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:10:13.918 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:10:13.923 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:10:13.924 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:10:13.926 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:10:13.927 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:10:13.927 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:10:13.928 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:10:14.364 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:10:14.367 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:10:14.367 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:10:14.367 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:10:14.368 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:10:14.368 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:10:14.368 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:10:35.394 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:10:35.398 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:10:35.399 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:10:35.399 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:10:35.431 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:10:35.435 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:10:35.445 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:10:35.448 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:10:35.448 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:10:35.448 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:10:35.454 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:10:35.454 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:10:44.385 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:10:44.388 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:10:44.388 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:10:44.389 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:10:44.390 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:10:44.390 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:10:44.390 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:10:47.463 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:10:47.466 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:10:47.466 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:10:47.467 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:10:47.468 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:10:47.468 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:10:47.468 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:10:49.858 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:10:49.860 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:10:49.931 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:10:49.935 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:10:49.935 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:10:49.935 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:10:49.936 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:10:49.937 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:10:49.937 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:10:49.989 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:10:49.995 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:10:50.026 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:10:50.030 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:10:50.032 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:10:50.032 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:10:50.041 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:10:50.042 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:10:50.482 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:10:50.482 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:10:50.482 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:10:50.493 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:10:50.493 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:10:50.494 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:10:50.494 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:10:50.495 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:10:50.495 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:10:50.498 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:10:50.512 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:10:50.512 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:10:50.513 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:10:50.513 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:10:50.513 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:10:50.518 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:10:50.519 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:10:50.519 [http-nio-8080-exec-4] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:10:50.859 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:10:50.896 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:10:52.309 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:10:52.311 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:10:52.311 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:10:52.311 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:10:52.312 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:10:52.312 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:10:52.312 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:10:52.339 [http-nio-8080-exec-3] INFO  c.i.i.r.c.ContactSearchController - 通用搜索用户: keyword=t, currentUserId=4, page=0, size=20
2025-07-13 15:10:52.343 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 通用搜索用户: searchRequest=SearchContactRequest(keyword=t, searchType=null, userId=4)
2025-07-13 15:10:52.343 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据用户ID搜索用户: searchRequest=SearchContactRequest(keyword=t, searchType=null, userId=4)
2025-07-13 15:10:52.349 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 未找到用户: userIdStr=t
2025-07-13 15:10:52.350 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据昵称搜索用户: searchRequest=SearchContactRequest(keyword=t, searchType=null, userId=4)
2025-07-13 15:10:52.370 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 昵称搜索完成: nickname=t, 找到1个结果
2025-07-13 15:10:53.413 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=ceshi
2025-07-13 15:10:53.416 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:10:53.417 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:10:53.417 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:11:01.831 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:11:05.664 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:11:05.667 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:11:05.667 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:11:05.669 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:11:05.670 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:11:05.670 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:11:05.671 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:11:20.377 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:11:20.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:11:20.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:11:20.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:11:20.382 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:11:20.382 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:11:20.382 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:11:20.622 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:11:20.630 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:11:20.663 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:11:20.664 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:11:20.664 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:11:20.664 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:11:20.666 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:11:34.009 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:11:34.011 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:11:34.011 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:11:34.011 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:11:34.012 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:11:34.012 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:11:34.012 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:11:36.374 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:11:36.377 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:11:36.379 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:11:36.379 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:11:36.402 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:11:36.406 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:11:36.414 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:11:36.417 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:11:36.418 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:11:36.418 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:11:36.425 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:11:36.425 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:11:49.552 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:11:49.553 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:11:49.553 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:11:49.553 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:11:49.553 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:11:49.554 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:11:49.554 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:11:49.993 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:11:49.994 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:11:49.995 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:11:49.995 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:11:49.995 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:11:49.995 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:11:49.995 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:12:12.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:12:12.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:12:12.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:12:12.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:12:12.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:12:12.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:12:12.271 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:12:20.369 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:12:20.370 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:12:20.371 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:12:20.371 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:12:20.371 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:12:20.371 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:12:20.371 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:12:37.415 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:12:37.419 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:12:37.420 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:12:37.420 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:12:37.443 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:12:37.447 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:12:37.455 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:12:37.458 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:12:37.458 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:12:37.458 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:12:37.461 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:12:37.462 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:12:50.372 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:12:50.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:12:50.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:12:50.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:12:50.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:12:50.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:12:50.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:12:50.823 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:12:50.825 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:12:50.825 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:12:50.825 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:12:50.825 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:12:50.825 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:12:50.825 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:13:20.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:13:20.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:13:20.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:13:20.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:13:20.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:13:20.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:13:20.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:13:38.375 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:13:38.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:13:38.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:13:38.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:13:38.389 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:13:38.392 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:13:38.395 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:13:38.396 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:13:38.396 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:13:38.397 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:13:38.398 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:13:38.398 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:13:50.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:13:50.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:13:50.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:13:50.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:13:50.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:13:50.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:13:50.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:14:14.463 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:14:14.468 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:14:14.468 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:14:14.469 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:14:14.470 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:14:14.471 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:14:14.472 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:14:19.990 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:14:19.992 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:14:19.992 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:14:19.993 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:14:19.993 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:14:19.993 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:14:19.993 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:14:20.025 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:14:20.028 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:14:20.044 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:14:20.047 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:14:20.048 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:14:20.048 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:14:20.054 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:14:20.055 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:14:22.262 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:14:22.266 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人标签请求: userId=4, friendId=2
2025-07-13 15:14:26.632 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:14:39.373 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:14:39.374 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:14:39.375 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:14:39.375 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:14:39.388 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:14:39.392 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:14:39.395 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:14:39.396 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:14:39.397 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:14:39.397 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:14:39.399 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:14:39.400 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:14:42.272 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:14:42.274 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:14:42.274 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:14:42.274 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:14:42.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:14:42.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:14:42.275 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:14:43.364 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:14:43.365 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:14:43.365 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:14:43.366 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:14:43.366 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:14:43.366 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:14:43.366 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:14:46.818 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:14:46.820 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:14:46.849 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:14:46.852 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:14:46.852 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:14:46.853 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:14:46.853 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:14:46.853 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:14:46.853 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:14:46.878 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:14:46.882 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:14:46.893 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:14:46.895 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:14:46.895 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:14:46.895 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:14:46.899 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:14:46.899 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:14:47.388 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:14:47.388 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:14:47.388 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:14:47.394 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:14:47.394 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:14:47.395 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:14:47.395 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:14:47.395 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:14:47.395 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:14:47.398 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:14:47.411 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:14:47.412 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:14:47.412 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:14:47.412 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:14:47.412 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:14:47.418 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:14:47.418 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:14:47.419 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:14:47.827 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:14:47.855 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:14:49.096 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:14:50.224 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:14:50.227 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:14:50.228 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:14:50.228 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:14:50.228 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:14:50.229 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:14:50.229 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:14:57.378 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 更新标签请求: userId=4, tagId=2, name=测试10, color=#4ecdc4
2025-07-13 15:14:57.498 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:15:03.134 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:15:03.136 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:15:03.136 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:15:03.136 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:15:03.137 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:15:03.137 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:15:03.137 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:15:17.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:15:17.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:15:17.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:15:17.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:15:17.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:15:17.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:15:17.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:15:40.380 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:15:40.382 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:15:40.383 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:15:40.383 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:15:40.401 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:15:40.405 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:15:40.410 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:15:40.412 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:15:40.412 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:15:40.413 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:15:40.416 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:15:40.417 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:15:47.388 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:15:47.392 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:15:47.392 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:15:47.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:15:47.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:15:47.393 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:15:47.394 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:16:17.382 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:16:17.385 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:16:17.385 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:16:17.386 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:16:17.386 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:16:17.386 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:16:17.387 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:16:41.370 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:16:41.372 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:16:41.372 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:16:41.373 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:16:41.395 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:16:41.398 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:16:41.403 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:16:41.405 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:16:41.405 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:16:41.405 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:16:41.409 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:16:41.410 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:16:47.383 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:16:47.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:16:47.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:16:47.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:16:47.388 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:16:47.388 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:16:47.388 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:17:17.388 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:17:17.392 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:17:17.392 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:17:17.392 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:17:17.393 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:17:17.393 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:17:17.393 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:17:42.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:17:42.381 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:17:42.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:17:42.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:17:42.401 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:17:42.405 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:17:42.409 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:17:42.412 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:17:42.412 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:17:42.412 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:17:42.416 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:17:42.416 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:17:47.373 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:17:47.375 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:17:47.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:17:47.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:17:47.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:17:47.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:17:47.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:18:17.366 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:18:17.368 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:18:17.368 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:18:17.369 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:18:17.369 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:18:17.369 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:18:17.369 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:18:43.368 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:18:43.370 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:18:43.371 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:18:43.371 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:18:43.391 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:18:43.394 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:18:43.400 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:18:43.402 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:18:43.403 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:18:43.403 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:18:43.408 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:18:43.408 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:19:01.553 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 15:19:01.553 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7e797fa8]]
2025-07-13 15:19:01.553 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 15:19:01.810 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 15:19:01.812 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 15:19:01.817 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 15:19:24.595 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 15:19:24.649 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 19732 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 15:19:24.651 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 15:19:24.711 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 15:19:24.712 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 15:19:25.945 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:19:25.946 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 15:19:26.220 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 263 ms. Found 10 JPA repository interfaces.
2025-07-13 15:19:26.650 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:19:26.651 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 15:19:26.682 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:19:26.683 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:19:26.684 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:19:26.684 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:19:26.685 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:19:26.686 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:19:26.686 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:19:26.687 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:19:26.687 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:19:26.688 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:19:26.688 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 28 ms. Found 0 Redis repository interfaces.
2025-07-13 15:19:27.498 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 15:19:27.501 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 15:19:27.505 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 15:19:27.515 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 15:19:27.517 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 15:19:27.517 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 15:19:27.579 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 15:19:27.580 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2866 ms
2025-07-13 15:19:27.844 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 15:19:27.982 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@141e5ab
2025-07-13 15:19:27.984 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 15:19:28.030 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 15:19:28.119 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 15 migrations (execution time 00:00.053s)
2025-07-13 15:19:28.144 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 15:19:28.149 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 15:19:28.234 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 15:19:28.277 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 15:19:28.311 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 15:19:28.719 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 15:19:30.316 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 15:19:30.381 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 15:19:31.333 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 15:19:31.913 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 15:19:32.103 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 15:19:32.104 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 15:19:32.334 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 15:19:32.514 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 15:19:32.550 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 15:19:32.550 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 15:19:32.597 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 15:19:32.597 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 15:19:32.644 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 15:19:32.660 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 15:19:32.674 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 15:19:32.690 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 15:19:32.855 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 15:19:32.865 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 15:19:33.129 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 15:19:33.273 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 15:19:33.490 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 15:19:33.999 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 15:19:34.049 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 15:19:34.089 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 15:19:34.091 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 15:19:34.092 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@765c2993]]
2025-07-13 15:19:34.093 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 15:19:34.155 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 10.083 seconds (process running for 10.545)
2025-07-13 15:19:34.217 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 15:19:34.239 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 15:19:34.261 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 15:19:34.276 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 15:19:34.297 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 15:19:34.318 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 15:19:34.337 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 15:19:34.376 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 15:19:44.402 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 15:19:44.402 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 15:19:44.404 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 15:19:44.502 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:19:44.512 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:19:44.512 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:19:44.512 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:19:44.558 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:19:44.561 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:19:44.574 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:19:44.576 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:19:44.577 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:19:44.578 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:19:44.582 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:19:44.582 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:19:53.745 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:19:53.750 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:19:53.750 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:19:53.751 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:19:53.751 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:19:53.751 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:19:53.751 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:19:53.782 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:19:53.786 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:19:53.787 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:19:53.787 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:19:53.787 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:19:53.787 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:19:53.788 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:19:54.858 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:19:54.863 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:19:54.952 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:19:54.958 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:19:54.958 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:19:54.959 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:19:54.960 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:19:54.960 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:19:54.960 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:19:55.007 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:19:55.012 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:19:55.055 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:19:55.062 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:19:55.062 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:19:55.063 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:19:55.071 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:19:55.072 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:19:56.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:19:56.388 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:19:56.390 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:19:56.390 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:19:56.409 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:19:56.410 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:19:56.410 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:19:56.410 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:19:56.413 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:19:56.413 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:19:56.414 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:19:56.432 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:19:56.433 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:19:56.434 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:19:56.434 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:19:56.434 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:19:56.441 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:19:56.451 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:19:56.452 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:19:56.452 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:19:57.434 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:19:57.437 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:19:57.438 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:19:57.439 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:19:57.439 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:19:57.439 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:19:57.439 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:20:00.254 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:20:02.331 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:20:02.334 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:20:02.334 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:20:02.335 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:20:02.335 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:20:02.335 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:20:02.335 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:20:05.176 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:20:05.178 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:20:05.178 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:20:05.178 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:20:05.179 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:20:05.179 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:20:05.180 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:20:05.205 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:20:05.208 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:20:05.222 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:20:05.225 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:20:05.225 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:20:05.225 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:20:05.229 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:20:05.229 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:20:19.297 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:20:19.301 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:20:19.301 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:20:19.302 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:20:19.302 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:20:19.302 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:20:19.302 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:20:20.043 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:20:20.046 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:20:20.047 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:20:20.047 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:20:20.047 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:20:20.047 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:20:20.048 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:20:24.703 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:20:24.708 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:20:24.709 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:20:24.709 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:20:24.709 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:20:24.710 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:20:24.710 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:20:25.002 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:20:25.006 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:20:25.006 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:20:25.007 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:20:25.007 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:20:25.007 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:20:25.008 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:20:34.023 [MessageBroker-4] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 15:20:44.416 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:20:44.424 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:20:44.425 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:20:44.425 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:20:44.458 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:20:44.461 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:20:44.471 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:20:44.474 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:20:44.475 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:20:44.475 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:20:44.478 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:20:44.478 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:20:55.408 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:20:55.410 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:20:55.411 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:20:55.411 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:20:55.411 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:20:55.411 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:20:55.411 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:21:02.756 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:21:02.758 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:21:02.759 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:21:02.759 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:21:02.759 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:21:02.759 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:21:02.759 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:21:09.731 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:21:21.183 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:21:21.186 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:21:21.186 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:21:21.186 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:21:21.186 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:21:21.187 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:21:21.187 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:21:24.981 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:21:24.984 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:21:24.984 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:21:24.985 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:21:24.985 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:21:24.985 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:21:24.985 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:21:25.014 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:21:25.017 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:21:25.017 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:21:25.023 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:21:25.027 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:21:25.027 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:21:25.028 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:21:25.028 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:21:25.028 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:21:25.037 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:21:25.040 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:21:25.041 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:21:25.041 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:21:25.045 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:21:25.045 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:21:29.836 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:21:29.839 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:21:29.839 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:21:29.839 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:21:29.839 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:21:29.840 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:21:29.840 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:21:44.395 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:21:44.399 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:21:44.399 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:21:44.399 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:21:44.440 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:21:44.444 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:21:44.457 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:21:44.460 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:21:44.461 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:21:44.461 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:21:44.468 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:21:44.469 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:21:55.386 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:21:55.389 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:21:55.389 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:21:55.389 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:21:55.389 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:21:55.390 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:21:55.390 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:21:56.171 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 2 class path changes (1 addition, 0 deletions, 1 modification)
2025-07-13 15:21:56.181 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 15:21:56.181 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@765c2993]]
2025-07-13 15:21:56.181 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 15:21:56.184 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 15:21:56.478 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 15:21:56.482 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 15:21:56.489 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 15:21:56.709 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 19732 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 15:21:56.709 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 15:21:57.033 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:21:57.033 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 15:21:57.077 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 10 JPA repository interfaces.
2025-07-13 15:21:57.189 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:21:57.190 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 15:21:57.202 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:21:57.202 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:21:57.203 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:21:57.203 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:21:57.204 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:21:57.204 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:21:57.204 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:21:57.205 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:21:57.205 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:21:57.205 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:21:57.205 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-07-13 15:21:57.369 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 15:21:57.370 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 15:21:57.372 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 15:21:57.372 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 15:21:57.373 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 15:21:57.373 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 15:21:57.405 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 15:21:57.405 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 693 ms
2025-07-13 15:21:57.511 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-07-13 15:21:57.535 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6d9497cc
2025-07-13 15:21:57.535 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-07-13 15:21:57.559 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 15:21:57.769 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 16 migrations (execution time 00:00.188s)
2025-07-13 15:21:57.812 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 15:21:57.829 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Migrating schema `im_db` to version "4 - Add contact tag assignments" [out of order]
2025-07-13 15:21:58.023 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 15:21:58.061 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-07-13 15:21:58.107 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-07-13 15:21:58.117 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 15:22:38.570 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 15:22:38.655 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 3788 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 15:22:38.657 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 15:22:38.730 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 15:22:38.730 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 15:22:40.043 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:22:40.044 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 15:22:40.344 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 284 ms. Found 10 JPA repository interfaces.
2025-07-13 15:22:40.801 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:22:40.803 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 15:22:40.832 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:22:40.833 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:22:40.833 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:22:40.834 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:22:40.834 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:22:40.835 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:22:40.835 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:22:40.836 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:22:40.836 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:22:40.836 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:22:40.838 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 28 ms. Found 0 Redis repository interfaces.
2025-07-13 15:22:41.842 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 15:22:41.846 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 15:22:41.851 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 15:22:41.862 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 15:22:41.865 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 15:22:41.866 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 15:22:41.951 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 15:22:41.952 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3220 ms
2025-07-13 15:22:42.281 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 15:22:42.398 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@18b1f82b
2025-07-13 15:22:42.399 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 15:22:42.450 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 15:22:42.552 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 15:22:42.579 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 15:22:42.617 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 15:22:42.628 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 15:23:49.263 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 15:23:49.304 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 27928 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 15:23:49.305 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 15:23:49.353 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 15:23:49.353 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 15:23:50.297 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:23:50.297 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 15:23:50.472 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 169 ms. Found 10 JPA repository interfaces.
2025-07-13 15:23:50.849 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:23:50.850 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 15:23:50.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:23:50.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:23:50.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:23:50.879 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:23:50.880 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:23:50.881 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:23:50.881 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:23:50.881 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:23:50.882 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:23:50.883 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:23:50.883 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 0 Redis repository interfaces.
2025-07-13 15:23:51.972 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 15:23:51.978 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 15:23:51.984 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 15:23:52.000 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 15:23:52.002 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 15:23:52.003 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 15:23:52.091 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 15:23:52.092 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2737 ms
2025-07-13 15:23:52.484 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 15:23:52.664 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@18b1f82b
2025-07-13 15:23:52.666 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 15:23:52.733 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 15:23:52.839 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 16 migrations (execution time 00:00.068s)
2025-07-13 15:23:52.876 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 15:23:52.906 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Migrating schema `im_db` to version "4 - Add contact tag assignments" [out of order]
2025-07-13 15:23:53.067 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 15:23:53.124 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 15:23:53.183 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 15:23:53.195 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 15:25:20.990 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 15:25:21.044 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 34156 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 15:25:21.045 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 15:25:21.100 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 15:25:21.100 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 15:25:22.023 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:25:22.023 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 15:25:22.225 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 193 ms. Found 10 JPA repository interfaces.
2025-07-13 15:25:22.535 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:25:22.536 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 15:25:22.558 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:25:22.559 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:25:22.559 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:25:22.560 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:25:22.560 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:25:22.561 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:25:22.561 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:25:22.561 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:25:22.563 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:25:22.563 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:25:22.563 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
2025-07-13 15:25:23.261 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 15:25:23.264 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 15:25:23.268 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 15:25:23.279 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 15:25:23.281 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 15:25:23.282 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 15:25:23.348 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 15:25:23.349 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2247 ms
2025-07-13 15:25:23.638 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 15:25:23.798 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1ccc382e
2025-07-13 15:25:23.800 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 15:25:23.865 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 15:25:23.996 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 15:25:24.036 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 15:25:24.079 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 15:25:24.093 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 15:26:44.823 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 15:26:44.861 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 17960 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 15:26:44.862 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 15:26:44.898 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 15:26:44.898 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 15:26:45.662 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:26:45.662 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 15:26:45.829 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 160 ms. Found 10 JPA repository interfaces.
2025-07-13 15:26:46.232 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 15:26:46.233 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 15:26:46.266 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:26:46.267 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:26:46.267 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:26:46.268 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:26:46.269 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:26:46.271 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:26:46.271 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:26:46.271 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:26:46.271 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:26:46.271 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 15:26:46.272 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 31 ms. Found 0 Redis repository interfaces.
2025-07-13 15:26:47.554 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 15:26:47.557 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 15:26:47.562 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 15:26:47.575 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 15:26:47.577 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 15:26:47.578 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 15:26:47.654 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 15:26:47.655 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2755 ms
2025-07-13 15:26:47.943 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 15:26:48.081 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@27320f52
2025-07-13 15:26:48.083 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 15:26:48.134 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 15:26:48.221 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 16 migrations (execution time 00:00.051s)
2025-07-13 15:26:48.249 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 15:26:48.274 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Migrating schema `im_db` to version "4 - Add contact tag assignments" [out of order]
2025-07-13 15:26:48.348 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Successfully applied 1 migration to schema `im_db`, now at version v4 (execution time 00:00.028s)
2025-07-13 15:26:48.475 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 15:26:48.536 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 15:26:48.574 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 15:26:48.833 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 15:26:50.108 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 15:26:50.185 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 15:26:50.918 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 15:26:51.315 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 15:26:51.461 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 15:26:51.462 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 15:26:51.627 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 15:26:51.768 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 15:26:51.798 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 15:26:51.799 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 15:26:51.836 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 15:26:51.837 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 15:26:51.869 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 15:26:51.878 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 15:26:51.887 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 15:26:51.899 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 15:26:51.998 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 15:26:52.005 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 15:26:52.209 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 15:26:52.369 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 15:26:52.689 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 15:26:53.575 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 15:26:53.629 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 15:26:53.649 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 15:26:53.650 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 15:26:53.651 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@551266d3]]
2025-07-13 15:26:53.652 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 15:26:53.672 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 9.208 seconds (process running for 9.819)
2025-07-13 15:26:53.724 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 15:26:53.758 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 15:26:53.787 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 15:26:53.815 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 15:26:53.840 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 15:26:53.862 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 15:26:53.882 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 15:26:53.926 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 15:27:09.593 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 15:27:09.593 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 15:27:09.598 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-07-13 15:27:09.818 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:27:09.842 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:27:09.843 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:27:09.843 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:27:09.844 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:27:09.845 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:27:09.845 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:27:09.949 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:27:09.955 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:27:09.955 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:27:09.955 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:27:09.956 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:27:09.956 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:27:09.956 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:27:10.304 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:27:10.308 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:27:10.357 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:27:10.362 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:27:10.362 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:27:10.363 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:27:10.363 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:27:10.363 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:27:10.363 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:27:10.421 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:27:10.425 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:27:10.474 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:27:10.479 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:27:10.481 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:27:10.482 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:27:10.488 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:27:10.489 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:27:10.900 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:27:10.902 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:27:10.902 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:27:10.912 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:27:10.913 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:27:10.913 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:27:10.913 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:27:10.914 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:27:10.915 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:27:10.917 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:27:10.930 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:27:10.930 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:27:10.931 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:27:10.931 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:27:10.931 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:27:10.943 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:27:10.943 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:27:10.943 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:27:11.312 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:27:11.348 [http-nio-8080-exec-2] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:27:12.396 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:27:13.893 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:27:13.904 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:27:13.912 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:27:13.915 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:27:13.919 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:27:13.921 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:27:13.929 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:27:14.685 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:27:14.688 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:27:14.690 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:27:14.692 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:27:14.693 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:27:14.693 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:27:14.694 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:27:14.733 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:27:14.742 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:27:14.770 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:27:14.775 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:27:14.776 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:27:14.776 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:27:14.781 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:27:14.782 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:27:26.104 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:27:26.107 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:27:26.107 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:27:26.107 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:27:26.108 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:27:26.109 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:27:26.109 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:27:26.149 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:27:26.153 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:27:26.170 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:27:26.173 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:27:26.174 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:27:26.174 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:27:26.179 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:27:26.179 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:27:41.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:27:41.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:27:41.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:27:41.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:27:41.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:27:41.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:27:41.380 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:27:44.373 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:27:44.375 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:27:44.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:27:44.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:27:44.397 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:27:44.399 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:27:44.405 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:27:44.406 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:27:44.406 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:27:44.406 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:27:44.409 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:27:44.409 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:27:53.602 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 15:28:11.422 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:28:11.426 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:28:11.427 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:28:11.427 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:28:11.428 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:28:11.428 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:28:11.428 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:28:18.491 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:28:18.495 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:28:18.495 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:28:18.495 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:28:18.495 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:28:18.496 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:28:18.496 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:28:19.623 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:28:19.626 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:28:19.626 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:28:19.627 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:28:19.627 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:28:19.627 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:28:19.627 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:28:19.655 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:28:19.659 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:28:19.677 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:28:19.681 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:28:19.681 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:28:19.681 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:28:19.686 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:28:19.687 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:28:41.372 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:28:41.374 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:28:41.374 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:28:41.374 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:28:41.374 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:28:41.374 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:28:41.375 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:28:44.383 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:28:44.389 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:28:44.389 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:28:44.389 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:28:44.418 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:28:44.421 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:28:44.426 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:28:44.429 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:28:44.429 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:28:44.429 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:28:44.432 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:28:44.433 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:29:11.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:29:11.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:29:11.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:29:11.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:29:11.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:29:11.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:29:11.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:29:11.447 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:29:11.449 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:29:11.449 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:29:11.450 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:29:11.450 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:29:11.450 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:29:11.450 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:29:13.454 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:29:13.458 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:29:13.458 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:29:13.459 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:29:13.459 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:29:13.459 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:29:13.459 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:29:20.621 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 更新标签请求: userId=4, tagId=2, name=测试1, color=#4ecdc4
2025-07-13 15:29:20.689 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:29:21.635 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:29:21.637 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:29:21.637 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:29:21.637 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:29:21.637 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:29:21.637 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:29:21.637 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:29:23.839 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:29:23.842 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:29:23.842 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:29:23.842 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:29:23.842 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:29:23.842 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:29:23.843 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:29:25.664 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:29:25.666 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:29:25.666 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:29:25.667 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:29:25.667 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:29:25.667 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:29:25.667 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:29:41.382 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:29:41.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:29:41.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:29:41.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:29:41.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:29:41.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:29:41.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:29:44.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:29:44.382 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:29:44.382 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:29:44.382 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:29:44.405 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:29:44.407 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:29:44.414 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:29:44.416 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:29:44.416 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:29:44.416 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:29:44.420 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:29:44.420 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:30:11.386 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:30:11.390 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:30:11.390 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:30:11.390 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:30:11.390 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:30:11.390 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:30:11.390 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:30:38.889 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:30:38.891 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:30:38.891 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:30:38.892 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:30:38.892 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:30:38.892 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:30:38.892 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:30:39.790 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:30:39.790 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:30:39.814 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:30:39.816 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:30:39.816 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:30:39.816 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:30:39.817 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:30:39.817 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:30:39.817 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:30:39.834 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:30:39.837 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:30:39.849 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:30:39.852 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:30:39.852 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:30:39.852 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:30:39.855 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:30:39.855 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:30:40.341 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:30:40.341 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:30:40.342 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:30:40.349 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:30:40.349 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:30:40.349 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:30:40.349 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:30:40.349 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:30:40.349 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:30:40.350 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:30:40.358 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:30:40.358 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:30:40.358 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:30:40.359 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:30:40.359 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:30:40.363 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:30:40.363 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:30:40.363 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:30:40.792 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:30:40.815 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:30:42.660 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:30:43.856 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:30:43.859 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:30:43.859 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:30:43.859 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:30:43.860 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:30:43.860 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:30:43.860 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:30:44.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:30:44.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:30:44.381 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:30:44.381 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:30:44.414 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:30:44.416 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:30:44.422 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:30:44.426 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:30:44.427 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:30:44.427 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:30:44.431 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:30:44.432 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:30:44.983 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:30:44.986 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:30:44.986 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:30:44.986 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:30:44.986 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:30:44.986 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:30:44.987 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:30:45.021 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:30:45.023 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:30:45.044 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:30:45.048 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:30:45.048 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:30:45.048 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:30:45.053 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:30:45.054 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:30:47.672 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:30:47.675 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:30:47.676 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:30:47.676 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:30:47.676 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:30:47.677 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:30:47.677 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:30:47.716 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:30:47.721 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:30:47.739 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:30:47.742 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:30:47.743 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:30:47.744 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:30:47.751 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:30:47.751 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:30:58.712 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:30:58.716 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:30:58.716 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:30:58.716 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:30:58.716 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:30:58.716 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:30:58.717 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:31:10.381 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:31:10.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:31:10.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:31:10.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:31:10.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:31:10.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:31:10.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:31:18.937 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:31:18.939 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:31:18.940 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:31:18.940 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:31:18.940 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:31:18.941 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:31:18.941 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:31:22.798 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:31:22.800 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:31:22.801 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:31:22.801 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:31:22.801 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:31:22.801 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:31:22.801 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:31:40.373 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:31:40.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:31:40.377 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:31:40.377 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:31:40.377 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:31:40.377 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:31:40.377 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:31:44.367 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:31:44.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:31:44.371 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:31:44.371 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:31:44.392 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:31:44.395 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:31:44.401 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:31:44.403 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:31:44.404 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:31:44.404 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:31:44.407 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:31:44.407 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:31:51.801 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:31:51.803 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:31:51.804 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:31:51.804 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:31:51.804 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:31:51.805 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:31:51.805 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:31:56.853 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:31:56.857 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:31:56.857 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:31:56.858 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:31:56.859 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:31:56.860 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:31:56.860 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:32:10.383 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:32:10.385 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:32:10.385 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:32:10.385 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:32:10.385 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:32:10.385 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:32:10.385 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:32:40.380 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:32:40.382 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:32:40.383 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:32:40.383 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:32:40.383 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:32:40.383 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:32:40.383 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:32:44.377 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:32:44.380 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:32:44.380 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:32:44.380 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:32:44.407 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:32:44.411 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:32:44.420 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:32:44.424 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:32:44.424 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:32:44.424 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:32:44.429 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:32:44.430 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:32:53.703 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:32:53.705 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:32:53.706 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:32:53.706 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:32:53.707 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:32:53.707 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:32:53.707 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:32:56.333 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:32:56.335 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:32:56.335 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:32:56.335 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:32:56.336 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:32:56.336 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:32:56.336 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:32:57.049 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:32:57.051 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:32:57.051 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:32:57.051 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:32:57.051 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:32:57.051 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:32:57.052 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:32:57.068 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:32:57.071 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:32:57.079 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:32:57.082 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:32:57.082 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:32:57.082 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:32:57.086 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:32:57.086 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:32:58.168 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:32:58.169 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:32:58.203 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:32:58.206 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:32:58.206 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:32:58.206 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:32:58.206 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:32:58.206 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:32:58.207 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:32:58.238 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:32:58.243 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:32:58.257 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:32:58.262 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:32:58.263 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:32:58.263 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:32:58.269 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:32:58.269 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:32:58.751 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:32:58.752 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:32:58.753 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:32:58.759 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:32:58.760 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:32:58.760 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:32:58.761 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:32:58.761 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:32:58.761 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:32:58.763 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:32:58.775 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:32:58.775 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:32:58.776 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:32:58.776 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:32:58.776 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:32:58.783 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:32:58.784 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:32:58.784 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:32:59.174 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:32:59.214 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:32:59.624 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:33:00.748 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:33:00.751 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:33:00.751 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:33:00.752 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:33:00.753 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:33:00.753 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:33:00.753 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:33:01.358 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:33:01.361 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:33:01.361 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:33:01.361 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:33:01.361 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:33:01.362 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:33:01.362 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:33:01.392 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:33:01.396 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:33:01.407 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:33:01.410 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:33:01.410 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:33:01.411 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:33:01.413 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:33:01.414 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:33:28.371 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:33:28.372 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:33:28.372 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:33:28.373 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:33:28.373 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:33:28.373 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:33:28.373 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:33:41.068 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:33:41.071 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:33:41.072 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:33:41.073 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:33:41.073 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:33:41.073 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:33:41.073 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:33:41.991 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:33:41.992 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:33:42.020 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:33:42.023 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:33:42.024 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:33:42.024 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:33:42.025 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:33:42.025 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:33:42.025 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:33:42.045 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:33:42.049 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:33:42.061 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:33:42.064 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:33:42.065 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:33:42.065 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:33:42.068 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:33:42.069 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:33:42.566 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:33:42.566 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:33:42.566 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:33:42.572 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:33:42.572 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:33:42.572 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:33:42.572 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:33:42.573 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:33:42.573 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:33:42.581 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:33:42.598 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:33:42.598 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:33:42.599 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:33:42.599 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:33:42.599 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:33:42.606 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:33:42.606 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:33:42.607 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:33:43.015 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:33:43.060 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:33:43.365 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:33:44.368 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:33:44.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:33:44.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:33:44.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:33:44.386 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:33:44.390 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:33:44.394 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:33:44.395 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:33:44.396 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:33:44.396 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:33:44.399 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:33:44.399 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:33:44.469 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:33:44.470 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:33:44.470 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:33:44.471 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:33:44.471 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:33:44.471 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:33:44.471 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:33:45.284 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:33:45.285 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:33:45.286 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:33:45.286 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:33:45.286 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:33:45.286 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:33:45.286 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:33:45.302 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:33:45.304 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:33:45.311 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:33:45.312 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:33:45.313 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:33:45.313 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:33:45.315 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:33:45.316 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:33:46.363 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:33:46.366 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:33:46.366 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:33:46.367 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:33:46.367 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:33:46.367 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:33:46.367 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:33:46.389 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:33:46.391 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:33:46.400 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:33:46.402 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:33:46.403 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:33:46.403 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:33:46.407 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:33:46.408 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:33:48.329 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:33:48.331 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:33:48.332 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:33:48.332 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:33:48.332 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:33:48.332 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:33:48.333 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:33:48.357 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:33:48.360 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:33:48.370 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:33:48.372 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:33:48.373 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:33:48.373 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:33:48.376 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:33:48.376 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:33:55.187 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:33:55.190 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:33:55.190 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:33:55.190 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:33:55.191 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:33:55.191 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:33:55.191 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:33:58.841 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:33:58.843 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:33:58.844 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:33:58.844 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:33:58.844 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:33:58.844 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:33:58.844 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:33:58.860 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:33:58.862 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:33:58.871 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:33:58.873 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:33:58.873 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:33:58.873 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:33:58.876 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:33:58.876 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:34:12.381 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:34:12.382 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:34:12.382 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:34:12.383 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:34:12.383 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:34:12.383 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:34:12.383 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:34:12.517 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:34:12.518 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:34:12.519 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:34:12.519 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:34:12.519 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:34:12.519 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:34:12.519 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:34:13.456 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:34:13.457 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:34:13.457 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:34:13.458 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:34:13.458 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:34:13.458 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:34:13.458 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:34:42.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:34:42.388 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:34:42.388 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:34:42.388 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:34:42.388 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:34:42.389 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:34:42.389 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:34:44.362 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:34:44.363 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:34:44.363 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:34:44.364 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:34:44.391 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:34:44.394 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:34:44.397 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:34:44.399 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:34:44.399 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:34:44.399 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:34:44.404 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:34:44.404 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:35:12.364 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:35:12.365 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:35:12.365 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:35:12.366 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:35:12.366 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:35:12.366 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:35:12.366 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:35:42.372 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:35:42.374 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:35:42.374 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:35:42.374 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:35:42.374 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:35:42.374 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:35:42.374 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:35:44.371 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:35:44.373 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:35:44.373 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:35:44.373 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:35:44.396 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:35:44.400 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:35:44.406 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:35:44.409 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:35:44.409 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:35:44.409 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:35:44.414 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:35:44.415 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:36:01.143 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:36:01.145 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:36:01.146 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:36:01.146 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:36:01.146 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:36:01.146 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:36:01.146 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:36:02.046 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:36:02.048 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:36:02.048 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:36:02.049 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:36:02.049 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:36:02.049 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:36:02.049 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:36:02.065 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:36:02.068 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:36:02.076 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:36:02.078 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:36:02.078 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:36:02.078 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:36:02.081 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:36:02.081 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:36:02.989 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:36:02.990 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:36:03.013 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:36:03.015 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:36:03.015 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:36:03.015 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:36:03.015 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:36:03.015 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:36:03.015 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:36:03.035 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:36:03.037 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:36:03.046 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:36:03.047 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:36:03.047 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:36:03.048 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:36:03.051 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:36:03.052 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:36:03.536 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:36:03.536 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:36:03.536 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:36:03.539 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:36:03.539 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:36:03.540 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:36:03.540 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:36:03.540 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:36:03.540 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:36:03.542 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:36:03.551 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:36:03.551 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:36:03.551 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:36:03.551 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:36:03.551 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:36:03.554 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:36:03.554 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:36:03.554 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:36:03.988 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:36:04.002 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:36:04.311 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:36:05.156 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:36:05.160 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:36:05.160 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:36:05.161 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:36:05.161 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:36:05.161 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:36:05.162 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:36:05.759 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:36:05.763 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:36:05.764 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:36:05.764 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:36:05.764 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:36:05.765 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:36:05.765 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:36:05.794 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:36:05.798 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:36:05.811 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:36:05.814 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:36:05.814 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:36:05.815 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:36:05.820 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:36:05.821 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:36:16.744 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:36:16.748 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:36:16.748 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:36:16.748 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:36:16.748 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:36:16.748 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:36:16.749 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:36:16.774 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:36:16.778 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:36:16.795 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:36:16.806 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:36:16.810 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:36:16.812 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:36:16.841 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:36:16.848 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:36:28.942 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:36:28.944 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:36:28.945 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:36:28.945 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:36:28.946 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:36:28.946 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:36:28.946 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:36:30.149 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:36:30.154 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:36:30.155 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:36:30.155 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:36:30.155 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:36:30.156 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:36:30.156 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:36:33.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:36:33.374 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:36:33.375 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:36:33.375 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:36:33.375 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:36:33.375 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:36:33.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:36:44.363 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:36:44.365 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:36:44.365 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:36:44.366 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:36:44.380 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:36:44.382 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:36:44.386 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:36:44.388 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:36:44.389 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:36:44.389 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:36:44.391 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:36:44.391 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:36:56.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:36:56.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:36:56.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:36:56.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:36:56.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:36:56.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:36:56.382 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:36:57.884 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:36:57.886 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:36:58.051 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:36:58.056 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:36:58.056 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:36:58.057 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:36:58.057 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:36:58.058 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:36:58.059 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:36:58.130 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:36:58.133 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:36:58.144 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:36:58.147 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:36:58.147 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:36:58.147 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:36:58.151 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:36:58.152 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:36:58.624 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:36:58.626 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:36:58.626 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:36:58.627 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:36:58.627 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:36:58.627 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:36:58.627 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:36:58.628 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:36:58.628 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:36:58.631 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:36:58.638 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:36:58.638 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:36:58.638 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:36:58.638 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:36:58.638 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:36:58.641 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:36:58.642 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:36:58.642 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:36:58.764 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:36:58.778 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:36:59.541 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:37:00.632 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:37:00.635 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:37:00.636 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:37:00.636 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:37:00.637 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:37:00.637 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:37:00.637 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:37:01.822 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:37:01.825 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:37:01.826 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:37:01.826 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:37:01.827 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:37:01.827 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:37:01.827 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:37:01.856 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:37:01.859 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:37:01.871 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:37:01.874 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:37:01.874 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:37:01.874 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:37:01.877 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:37:01.877 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:37:03.292 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:37:03.294 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:37:03.295 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:37:03.295 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:37:03.295 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:37:03.296 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:37:03.297 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:37:03.319 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:37:03.321 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:37:03.328 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:37:03.330 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:37:03.330 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:37:03.330 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:37:03.333 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:37:03.334 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:37:06.650 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:37:06.653 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:37:06.653 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:37:06.653 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:37:06.655 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:37:06.655 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:37:06.655 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:37:06.688 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:37:06.691 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:37:06.699 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:37:06.703 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:37:06.703 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:37:06.703 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:37:06.706 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:37:06.707 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:37:10.171 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:37:10.172 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:37:10.210 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:37:10.212 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:37:10.212 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:37:10.213 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:37:10.214 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:37:10.214 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:37:10.214 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:37:10.235 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:37:10.239 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:37:10.249 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:37:10.250 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:37:10.250 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:37:10.250 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:37:10.254 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:37:10.254 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:37:10.757 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:37:10.758 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:37:10.758 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:37:10.760 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:37:10.760 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:37:10.760 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:37:10.760 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:37:10.760 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:37:10.760 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:37:10.763 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:37:10.767 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:37:10.767 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:37:10.767 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:37:10.767 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:37:10.767 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:37:10.785 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:37:10.786 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:37:10.787 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:37:11.177 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:37:11.200 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:37:33.949 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:37:35.113 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:37:35.116 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:37:35.116 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:37:35.116 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:37:35.117 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:37:35.117 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:37:35.117 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:37:37.863 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:37:37.865 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:37:37.865 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:37:37.865 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:37:37.866 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:37:37.866 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:37:37.866 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:37:37.896 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:37:37.899 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:37:37.909 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:37:37.912 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:37:37.912 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:37:37.912 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:37:37.920 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:37:37.920 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:37:40.252 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:37:40.254 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:37:40.254 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:37:40.255 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:37:40.255 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:37:40.255 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:37:40.255 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:37:42.590 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:37:42.592 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:37:42.592 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:37:42.592 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:37:42.593 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:37:42.593 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:37:42.593 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:37:42.619 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:37:42.622 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:37:42.630 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:37:42.631 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:37:42.632 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:37:42.632 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:37:42.636 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:37:42.636 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:37:42.954 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:37:42.956 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:37:42.957 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:37:42.957 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:37:42.958 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:37:42.958 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:37:42.958 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:37:42.996 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:37:43.006 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:37:43.018 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:37:43.021 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:37:43.022 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:37:43.022 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:37:43.025 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:37:43.026 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:37:44.375 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:37:44.377 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:37:44.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:37:44.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:37:44.402 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:37:44.404 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:37:44.409 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:37:44.411 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:37:44.412 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:37:44.412 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:37:44.415 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:37:44.416 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:37:49.968 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:37:49.971 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:37:49.972 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:37:49.972 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:37:49.972 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:37:49.972 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:37:49.973 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:38:00.682 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:38:00.684 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:38:00.684 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:38:00.684 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:38:00.684 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:38:00.684 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:38:00.684 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:38:03.114 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:38:03.115 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:38:03.116 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:38:03.116 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:38:03.116 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:38:03.116 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:38:03.116 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:38:03.132 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:38:03.135 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:38:03.142 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:38:03.143 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:38:03.143 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:38:03.143 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:38:03.145 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:38:03.145 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:38:10.243 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:38:10.245 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:38:10.245 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:38:10.246 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:38:10.246 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:38:10.246 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:38:10.247 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:38:15.948 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:38:15.950 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:38:15.950 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:38:15.950 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:38:15.952 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:38:15.952 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:38:15.952 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:38:15.979 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:38:15.983 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:38:15.992 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:38:15.994 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:38:15.994 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:38:15.995 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:38:15.999 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:38:15.999 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:38:16.164 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:38:16.166 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:38:16.167 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:38:16.168 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:38:16.168 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:38:16.168 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:38:16.169 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:38:16.198 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:38:16.202 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:38:16.212 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:38:16.217 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:38:16.217 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:38:16.217 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:38:16.221 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:38:16.221 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:38:16.291 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:38:16.294 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:38:16.294 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:38:16.294 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:38:16.295 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:38:16.295 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:38:16.296 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:38:16.327 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:38:16.330 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:38:16.341 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:38:16.343 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:38:16.343 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:38:16.344 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:38:16.348 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:38:16.348 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:38:40.373 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:38:40.374 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:38:40.375 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:38:40.375 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:38:40.375 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:38:40.375 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:38:40.376 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:38:44.383 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:38:44.385 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:38:44.386 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:38:44.386 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:38:44.408 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:38:44.411 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:38:44.415 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:38:44.416 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:38:44.417 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:38:44.417 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:38:44.421 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:38:44.421 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:39:10.366 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:39:10.368 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:39:10.368 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:39:10.368 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:39:10.369 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:39:10.369 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:39:10.369 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:39:40.381 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:39:40.383 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:39:40.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:39:40.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:39:40.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:39:40.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:39:40.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:39:44.375 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:39:44.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:39:44.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:39:44.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:39:44.399 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:39:44.402 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:39:44.408 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:39:44.410 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:39:44.411 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:39:44.411 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:39:44.415 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:39:44.416 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:40:10.381 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:40:10.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:40:10.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:40:10.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:40:10.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:40:10.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:40:10.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:40:40.383 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:40:40.386 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:40:40.386 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:40:40.386 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:40:40.386 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:40:40.386 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:40:40.387 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:40:44.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:40:44.373 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:40:44.374 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:40:44.374 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:40:44.399 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:40:44.402 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:40:44.408 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:40:44.412 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:40:44.412 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:40:44.412 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:40:44.417 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:40:44.418 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:41:41.368 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:41:41.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:41:41.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:41:41.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:41:41.372 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:41:41.372 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:41:41.372 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:41:44.365 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:41:44.367 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:41:44.367 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:41:44.367 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:41:44.381 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:41:44.383 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:41:44.387 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:41:44.389 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:41:44.389 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:41:44.389 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:41:44.392 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:41:44.392 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:42:42.375 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:42:42.377 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:42:42.377 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:42:42.378 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:42:42.378 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:42:42.378 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:42:42.378 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:42:44.382 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:42:44.393 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:42:44.393 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:42:44.396 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:42:44.443 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:42:44.450 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:42:44.462 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:42:44.467 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:42:44.467 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:42:44.467 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:42:44.476 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:42:44.476 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:43:43.373 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:43:43.375 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:43:43.375 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:43:43.375 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:43:43.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:43:43.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:43:43.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:43:44.366 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:43:44.368 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:43:44.368 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:43:44.368 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:43:44.385 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:43:44.388 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:43:44.392 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:43:44.394 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:43:44.395 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:43:44.395 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:43:44.399 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:43:44.399 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:44:44.384 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:44:44.386 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:44:44.387 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:44:44.388 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:44:44.388 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:44:44.390 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:44:44.390 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:44:44.390 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:44:44.391 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:44:44.391 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:44:44.391 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:44:44.414 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:44:44.419 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:44:44.426 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:44:44.430 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:44:44.431 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:44:44.432 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:44:44.438 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:44:44.438 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:45:44.382 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:45:44.382 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:45:44.384 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:45:44.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:45:44.385 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:45:44.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:45:44.385 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:45:44.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:45:44.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:45:44.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:45:44.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:45:44.407 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:45:44.410 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:45:44.416 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:45:44.419 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:45:44.419 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:45:44.419 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:45:44.424 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:45:44.424 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:46:44.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:46:44.384 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:46:44.389 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:46:44.389 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:46:44.389 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:46:44.389 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:46:44.390 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:46:44.390 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:46:44.390 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:46:44.391 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:46:44.391 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:46:44.424 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:46:44.430 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:46:44.438 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:46:44.442 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:46:44.442 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:46:44.442 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:46:44.449 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:46:44.450 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:46:47.762 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:46:47.765 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:46:47.765 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:46:47.766 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:46:47.766 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:46:47.766 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:46:47.766 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:46:50.715 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:46:50.717 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:46:50.740 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:46:50.742 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:46:50.742 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:46:50.743 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:46:50.743 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:46:50.743 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:46:50.743 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:46:50.757 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:46:50.760 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:46:50.767 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:46:50.769 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:46:50.769 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:46:50.769 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:46:50.772 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:46:50.772 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:46:51.267 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:46:51.267 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:46:51.267 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:46:51.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:46:51.269 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:46:51.270 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:46:51.270 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:46:51.270 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:46:51.270 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:46:51.274 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:46:51.279 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:46:51.280 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:46:51.280 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:46:51.280 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:46:51.280 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:46:51.283 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:46:51.284 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:46:51.284 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:46:51.719 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:46:51.736 [http-nio-8080-exec-7] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:46:52.412 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 15:46:53.805 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:46:53.807 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:46:53.807 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:46:53.808 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:46:53.808 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:46:53.808 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:46:53.808 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:46:54.517 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:46:54.520 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:46:54.520 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:46:54.520 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:46:54.521 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:46:54.521 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:46:54.521 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:46:54.553 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:46:54.555 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:46:54.570 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:46:54.584 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:46:54.585 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:46:54.587 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:46:54.616 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:46:54.619 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:47:10.419 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:47:10.421 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:47:10.421 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:47:10.422 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:47:10.422 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:47:10.422 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:47:10.422 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:47:10.444 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:47:10.447 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:47:10.454 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:47:10.457 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:47:10.457 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:47:10.457 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:47:10.462 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:47:10.463 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:47:21.371 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:47:21.373 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:47:21.373 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:47:21.373 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:47:21.373 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:47:21.373 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:47:21.373 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:47:44.364 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:47:44.365 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:47:44.365 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:47:44.365 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:47:44.379 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:47:44.382 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:47:44.385 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:47:44.387 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:47:44.387 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:47:44.387 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:47:44.391 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:47:44.391 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:47:51.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:47:51.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:47:51.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:47:51.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:47:51.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:47:51.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:47:51.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:48:08.359 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:48:08.367 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:48:08.368 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:48:08.368 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:48:08.370 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:48:08.370 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:48:08.371 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:48:20.778 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:48:20.782 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:48:20.782 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:48:20.782 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:48:20.782 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:48:20.782 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:48:20.783 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:48:44.386 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:48:44.390 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:48:44.390 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:48:44.390 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:48:44.412 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:48:44.415 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:48:44.427 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:48:44.429 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:48:44.429 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:48:44.429 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:48:44.433 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:48:44.434 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:48:49.005 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:48:49.007 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:48:49.007 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:48:49.008 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:48:49.008 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:48:49.008 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:48:49.008 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:48:51.366 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:48:51.369 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:48:51.370 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:48:51.370 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:48:51.370 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:48:51.370 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:48:51.371 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:49:21.373 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:49:21.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:49:21.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:49:21.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:49:21.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:49:21.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:49:21.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:49:34.172 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:49:34.174 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:49:34.174 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:49:34.174 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:49:34.175 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:49:34.175 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:49:34.175 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:49:44.365 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:49:44.367 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:49:44.367 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:49:44.367 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:49:44.382 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:49:44.385 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:49:44.390 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:49:44.392 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:49:44.393 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:49:44.393 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:49:44.396 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:49:44.396 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:49:51.375 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:49:51.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:49:51.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:49:51.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:49:51.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:49:51.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:49:51.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:50:21.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:50:21.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:50:21.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:50:21.379 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:50:21.379 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:50:21.379 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:50:21.379 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:50:44.363 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:50:44.365 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:50:44.365 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:50:44.365 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:50:44.379 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:50:44.382 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:50:44.388 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:50:44.390 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:50:44.390 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:50:44.390 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:50:44.393 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:50:44.393 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:51:22.374 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:51:22.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:51:22.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:51:22.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:51:22.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:51:22.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:51:22.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:51:44.384 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:51:44.386 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:51:44.387 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:51:44.387 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:51:44.413 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:51:44.416 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:51:44.425 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:51:44.428 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:51:44.428 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:51:44.428 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:51:44.434 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:51:44.434 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:52:23.385 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:52:23.389 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:52:23.389 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:52:23.389 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:52:23.390 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:52:23.390 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:52:23.390 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:52:44.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:52:44.381 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:52:44.382 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:52:44.382 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:52:44.399 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:52:44.402 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:52:44.406 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:52:44.408 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:52:44.408 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:52:44.408 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:52:44.410 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:52:44.411 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 15:53:02.250 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:53:02.256 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:53:02.256 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:53:02.257 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:53:02.257 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:53:02.257 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:53:02.258 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:53:02.289 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:53:02.293 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:53:02.293 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:53:02.294 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:53:02.294 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:53:02.294 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:53:02.294 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:53:03.326 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 15:53:03.328 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 15:53:03.371 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:53:03.373 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:53:03.374 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:53:03.375 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:53:03.375 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:53:03.375 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:53:03.375 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:53:03.403 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:53:03.407 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:53:03.432 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:53:03.435 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:53:03.435 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:53:03.435 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:53:03.440 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:53:03.441 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:53:03.915 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 15:53:03.918 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:53:03.918 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 15:53:03.938 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 15:53:03.939 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 15:53:03.939 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 15:53:03.940 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 15:53:03.940 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 15:53:03.941 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 15:53:03.942 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 15:53:03.959 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 15:53:03.960 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:53:03.960 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:53:03.961 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 15:53:03.961 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 15:53:03.970 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 15:53:03.971 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 15:53:03.971 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 15:53:04.330 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 15:53:04.375 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 15:53:05.454 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:53:05.457 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:53:05.457 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:53:05.457 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:53:05.457 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:53:05.457 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:53:05.458 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:53:21.834 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:53:21.838 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:53:21.838 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:53:21.840 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:53:21.840 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:53:21.841 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:53:21.841 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:53:21.841 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:53:21.841 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:53:21.848 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:53:21.850 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:53:21.851 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:53:21.851 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:53:21.855 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:53:21.855 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:53:34.419 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 15:53:34.430 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 15:53:34.431 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 15:53:34.435 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 15:53:34.436 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 15:53:34.437 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 15:53:34.437 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 15:53:34.495 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 15:53:34.501 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 15:53:34.522 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 15:53:34.527 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 15:53:34.528 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 15:53:34.529 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 15:53:34.535 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:53:34.537 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 15:53:44.478 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 15:53:44.485 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 15:53:44.485 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 15:53:44.486 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 15:53:44.556 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 15:53:44.562 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 15:53:44.585 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 15:53:44.593 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 15:53:44.593 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 15:53:44.595 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 15:53:44.603 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 15:53:44.604 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:00:52.784 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 16:00:52.810 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 30632 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 16:00:52.811 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 16:00:52.846 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 16:00:52.846 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 16:00:53.647 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 16:00:53.647 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 16:00:53.810 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 155 ms. Found 10 JPA repository interfaces.
2025-07-13 16:00:54.212 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 16:00:54.213 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 16:00:54.240 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 16:00:54.241 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 16:00:54.241 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 16:00:54.242 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 16:00:54.243 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 16:00:54.244 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 16:00:54.244 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 16:00:54.244 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 16:00:54.245 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 16:00:54.245 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 16:00:54.246 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 0 Redis repository interfaces.
2025-07-13 16:00:55.245 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 16:00:55.249 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 16:00:55.277 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 16:00:55.289 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 16:00:55.292 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 16:00:55.292 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 16:00:55.369 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 16:00:55.370 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2522 ms
2025-07-13 16:00:55.744 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 16:00:55.876 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@39fb54cf
2025-07-13 16:00:55.878 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 16:00:55.930 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 16:00:56.017 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 16 migrations (execution time 00:00.047s)
2025-07-13 16:00:56.039 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 16:00:56.043 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 16:00:56.133 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 16:00:56.181 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 16:00:56.209 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 16:00:56.460 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 16:00:57.271 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 16:00:57.309 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 16:00:57.940 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 16:00:58.293 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 16:00:58.670 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 16:00:58.670 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 16:00:58.831 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 16:00:58.966 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 16:00:58.994 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 16:00:58.995 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 16:00:59.030 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 16:00:59.030 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 16:00:59.061 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 16:00:59.071 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 16:00:59.079 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 16:00:59.088 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 16:00:59.193 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 16:00:59.199 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 16:00:59.364 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 16:00:59.471 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 16:00:59.680 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 16:01:00.167 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 16:01:00.210 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 16:01:00.235 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 16:01:00.238 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 16:01:00.239 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@981485e]]
2025-07-13 16:01:00.239 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 16:01:00.289 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 7.839 seconds (process running for 8.163)
2025-07-13 16:01:00.343 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 16:01:00.375 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 16:01:00.390 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 16:01:00.407 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 16:01:00.424 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 16:01:00.440 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 16:01:00.453 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 16:01:00.488 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 16:01:05.260 [http-nio-8080-exec-5] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 16:01:05.261 [http-nio-8080-exec-5] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 16:01:05.263 [http-nio-8080-exec-5] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 16:01:05.564 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 16:01:05.565 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 16:01:05.617 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:01:05.619 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:01:05.620 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:01:05.620 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:01:05.621 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:01:05.621 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:01:05.621 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:01:05.655 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:01:05.657 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:01:05.686 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:01:05.689 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:01:05.690 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:01:05.690 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:01:05.693 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:01:05.693 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:01:06.173 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:01:06.174 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:01:06.177 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 16:01:06.187 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 16:01:06.188 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 16:01:06.188 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 16:01:06.188 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 16:01:06.188 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 16:01:06.189 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 16:01:06.190 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 16:01:06.199 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 16:01:06.199 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:01:06.200 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:01:06.200 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:01:06.200 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 16:01:06.211 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 16:01:06.211 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 16:01:06.212 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 16:01:06.506 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 16:01:06.529 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 16:01:07.433 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:01:08.351 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:01:08.354 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:01:08.354 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:01:08.354 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:01:08.355 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:01:08.355 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:01:08.355 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:01:19.492 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:01:19.494 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:01:19.495 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:01:19.495 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:01:19.495 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:01:19.496 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:01:19.496 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:01:19.522 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人详情请求: userId=4, friendId=2
2025-07-13 16:01:19.525 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取联系人详情: userId=4, friendId=2
2025-07-13 16:01:19.543 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人详情: userId=4, friendId=2, tagCount=1
2025-07-13 16:01:19.547 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 成功获取联系人详情: userId=4, friendId=2, tagCount=1
2025-07-13 16:01:30.384 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:01:30.391 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:01:30.392 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:01:30.392 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:01:30.392 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:01:30.393 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:01:30.393 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:01:30.418 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人详情请求: userId=4, friendId=2
2025-07-13 16:01:30.421 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取联系人详情: userId=4, friendId=2
2025-07-13 16:01:30.445 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人详情: userId=4, friendId=2, tagCount=1
2025-07-13 16:01:30.451 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 成功获取联系人详情: userId=4, friendId=2, tagCount=1
2025-07-13 16:01:36.386 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:01:36.396 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:01:36.396 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:01:36.398 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:01:36.400 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:01:36.401 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:01:36.402 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:01:44.386 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:01:44.390 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:01:44.390 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:01:44.390 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:01:44.448 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:01:44.451 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:01:44.457 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:01:44.459 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:01:44.460 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:01:44.460 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:01:44.463 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:01:44.463 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:01:59.641 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:01:59.645 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:01:59.645 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:01:59.645 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:01:59.645 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:01:59.645 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:01:59.645 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:02:00.193 [MessageBroker-4] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 16:02:05.927 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:02:05.931 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:02:05.932 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:02:05.932 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:02:05.934 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:02:05.934 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:02:05.935 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:02:16.776 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:02:16.778 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:02:16.779 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:02:16.779 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:02:16.779 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:02:16.780 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:02:16.780 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:02:22.288 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:02:25.125 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 16:02:25.128 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 16:02:25.165 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:02:25.167 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:02:25.168 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:02:25.169 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:02:25.169 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:02:25.169 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:02:25.169 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:02:25.199 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:02:25.202 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:02:25.218 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:02:25.223 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:02:25.223 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:02:25.224 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:02:25.227 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:02:25.229 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:02:25.704 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 16:02:25.708 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:02:25.709 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:02:25.710 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 16:02:25.712 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 16:02:25.712 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 16:02:25.713 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 16:02:25.715 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 16:02:25.716 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 16:02:25.729 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 16:02:25.751 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 16:02:25.752 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:02:25.753 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:02:25.754 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:02:25.756 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 16:02:25.769 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 16:02:25.771 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 16:02:25.772 [http-nio-8080-exec-6] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 16:02:26.125 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 16:02:26.155 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 16:02:26.682 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:02:34.762 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:02:34.766 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:02:34.766 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:02:34.769 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:02:34.769 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:02:34.770 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:02:34.770 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:02:34.770 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:02:34.771 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:02:34.780 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:02:34.784 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:02:34.784 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:02:34.785 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:02:34.788 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:02:34.789 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:02:44.380 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:02:44.385 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:02:44.385 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:02:44.385 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:02:44.409 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:02:44.412 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:02:44.418 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:02:44.420 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:02:44.421 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:02:44.421 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:02:44.423 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:02:44.424 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:02:55.366 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:02:55.369 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:02:55.369 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:02:55.369 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:02:55.369 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:02:55.370 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:02:55.370 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:02:55.388 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:02:55.391 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:02:55.402 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:02:55.404 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:02:55.404 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:02:55.404 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:02:55.407 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:02:55.407 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:03:25.380 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:03:25.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:03:25.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:03:25.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:03:25.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:03:25.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:03:25.383 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:03:25.403 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:03:25.407 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:03:25.416 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:03:25.418 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:03:25.418 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:03:25.418 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:03:25.421 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:03:25.421 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:03:44.382 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:03:44.385 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:03:44.385 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:03:44.386 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:03:44.405 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:03:44.407 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:03:44.413 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:03:44.415 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:03:44.415 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:03:44.416 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:03:44.419 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:03:44.419 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:03:55.384 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:03:55.387 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:03:55.388 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:03:55.388 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:03:55.388 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:03:55.388 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:03:55.388 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:03:55.410 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:03:55.413 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:03:55.424 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:03:55.425 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:03:55.425 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:03:55.425 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:03:55.428 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:03:55.428 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:04:25.368 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:04:25.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:04:25.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:04:25.371 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:04:25.371 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:04:25.371 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:04:25.371 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:04:25.387 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:04:25.390 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:04:25.401 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:04:25.403 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:04:25.403 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:04:25.403 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:04:25.406 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:04:25.406 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:04:44.381 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:04:44.385 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:04:44.385 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:04:44.386 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:04:44.414 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:04:44.419 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:04:44.435 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:04:44.440 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:04:44.440 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:04:44.440 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:04:44.455 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:04:44.456 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:04:55.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:04:55.389 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:04:55.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:04:55.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:04:55.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:04:55.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:04:55.390 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:04:55.411 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:04:55.414 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:04:55.423 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:04:55.425 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:04:55.426 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:04:55.426 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:04:55.428 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:04:55.428 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:05:25.378 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:05:25.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:05:25.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:05:25.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:05:25.381 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:05:25.382 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:05:25.382 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:05:25.407 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:05:25.410 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:05:25.427 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:05:25.430 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:05:25.430 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:05:25.430 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:05:25.435 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:05:25.435 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:05:44.381 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:05:44.384 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:05:44.385 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:05:44.385 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:05:44.408 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:05:44.411 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:05:44.418 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:05:44.421 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:05:44.421 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:05:44.422 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:05:44.425 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:05:44.426 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:05:55.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:05:55.387 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:05:55.387 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:05:55.387 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:05:55.388 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:05:55.388 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:05:55.389 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:05:55.419 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:05:55.422 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:05:55.438 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:05:55.442 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:05:55.443 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:05:55.443 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:05:55.448 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:05:55.448 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:06:44.368 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:06:44.368 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:06:44.370 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:06:44.370 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:06:44.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:06:44.371 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:06:44.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:06:44.371 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:06:44.371 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:06:44.371 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:06:44.371 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:06:44.395 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:06:44.395 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:06:44.399 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:06:44.399 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:06:44.405 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:06:44.407 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:06:44.407 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:06:44.408 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:06:44.410 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:06:44.411 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:06:44.411 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:06:44.411 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:06:44.411 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:06:44.411 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:06:44.417 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:06:44.417 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:07:44.366 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:07:44.367 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:07:44.368 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:07:44.368 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:07:44.368 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:07:44.369 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:07:44.369 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:07:44.369 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:07:44.369 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:07:44.369 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:07:44.369 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:07:44.390 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:07:44.390 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:07:44.393 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:07:44.393 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:07:44.398 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:07:44.400 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:07:44.400 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:07:44.400 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:07:44.402 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:07:44.403 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:07:44.403 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:07:44.404 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:07:44.404 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:07:44.404 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:07:44.406 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:07:44.406 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:08:44.382 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:08:44.382 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:08:44.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:08:44.385 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:08:44.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:08:44.386 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:08:44.386 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:08:44.386 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:08:44.387 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:08:44.388 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:08:44.388 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:08:44.412 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:08:44.413 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:08:44.415 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:08:44.415 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:08:44.423 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:08:44.427 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:08:44.427 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:08:44.427 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:08:44.430 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:08:44.432 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:08:44.432 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:08:44.434 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:08:44.434 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:08:44.434 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:08:44.438 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:08:44.439 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:09:44.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:09:44.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:09:44.378 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:09:44.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:09:44.379 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:09:44.379 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:09:44.379 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:09:44.379 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:09:44.380 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:09:44.380 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:09:44.380 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:09:44.401 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:09:44.401 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:09:44.404 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:09:44.404 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:09:44.412 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:09:44.415 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:09:44.415 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:09:44.415 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:09:44.417 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:09:44.419 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:09:44.419 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:09:44.419 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:09:44.420 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:09:44.420 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:09:44.424 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:09:44.425 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:10:44.425 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:10:44.425 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:10:44.431 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:10:44.431 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:10:44.432 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:10:44.432 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:10:44.432 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:10:44.433 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:10:44.433 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:10:44.433 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:10:44.434 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:10:44.478 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:10:44.478 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:10:44.483 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:10:44.483 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:10:44.496 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:10:44.501 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:10:44.501 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:10:44.501 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:10:44.507 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:10:44.507 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:10:44.508 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:10:44.511 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:10:44.512 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:10:44.512 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:10:44.518 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:10:44.518 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:11:44.379 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:11:44.379 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:11:44.381 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:11:44.381 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:11:44.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:11:44.381 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:11:44.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:11:44.381 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:11:44.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:11:44.381 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:11:44.382 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:11:44.403 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:11:44.405 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:11:44.405 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:11:44.406 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:11:44.410 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:11:44.412 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:11:44.412 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:11:44.412 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:11:44.413 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:11:44.414 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:11:44.414 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:11:44.414 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:11:44.414 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:11:44.414 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:11:44.417 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:11:44.417 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:12:44.385 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:12:44.385 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:12:44.388 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:12:44.388 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:12:44.388 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:12:44.388 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:12:44.388 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:12:44.388 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:12:44.389 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:12:44.389 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:12:44.389 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:12:44.422 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:12:44.422 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:12:44.426 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:12:44.426 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:12:44.433 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:12:44.436 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:12:44.436 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:12:44.436 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:12:44.441 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:12:44.442 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:12:44.442 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:12:44.445 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:12:44.445 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:12:44.445 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:12:44.450 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:12:44.451 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:12:54.009 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:12:54.012 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:12:54.013 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:12:54.015 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:12:54.016 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:12:54.016 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:12:54.016 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:12:54.016 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:12:54.017 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:12:54.026 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:12:54.029 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:12:54.041 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:12:54.041 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:12:54.045 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:12:54.046 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:12:54.739 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 16:12:54.740 [http-nio-8080-exec-10] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 16:12:54.769 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:12:54.771 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:12:54.772 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:12:54.772 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:12:54.773 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:12:54.773 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:12:54.774 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:12:54.791 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:12:54.794 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:12:54.806 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:12:54.809 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:12:54.809 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:12:54.810 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:12:54.813 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:12:54.813 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:12:55.328 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 16:12:55.331 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:12:55.331 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:12:55.349 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 16:12:55.350 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 16:12:55.350 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 16:12:55.350 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 16:12:55.350 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 16:12:55.351 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 16:12:55.351 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 16:12:55.363 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 16:12:55.364 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:12:55.364 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:12:55.364 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:12:55.364 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 16:12:55.370 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 16:12:55.370 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 16:12:55.370 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 16:12:55.735 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 16:12:55.760 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 16:12:56.292 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:12:57.565 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:12:57.569 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:12:57.569 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:12:57.569 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:12:57.569 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:12:57.570 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:12:57.570 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:13:05.965 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:13:05.967 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:13:05.968 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:13:05.968 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:13:05.968 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:13:05.968 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:13:05.969 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:13:07.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:13:07.272 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:13:07.272 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:13:07.272 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:13:07.273 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:13:07.273 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:13:07.273 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:13:07.301 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:13:07.307 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:13:07.325 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:13:07.330 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:13:07.331 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:13:07.331 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:13:07.338 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:13:07.338 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:13:25.367 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:13:25.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:13:25.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:13:25.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:13:25.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:13:25.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:13:25.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:13:44.374 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:13:44.377 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:13:44.377 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:13:44.377 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:13:44.407 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:13:44.412 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:13:44.418 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:13:44.421 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:13:44.421 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:13:44.421 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:13:44.425 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:13:44.425 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:13:55.373 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:13:55.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:13:55.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:13:55.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:13:55.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:13:55.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:13:55.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:14:10.808 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:14:10.810 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:14:10.810 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:14:10.810 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:14:10.811 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:14:10.811 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:14:10.811 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:14:11.906 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 16:14:11.907 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 16:14:11.938 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:14:11.940 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:14:11.941 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:14:11.941 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:14:11.941 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:14:11.941 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:14:11.942 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:14:11.962 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:14:11.965 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:14:11.976 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:14:11.978 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:14:11.979 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:14:11.979 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:14:11.982 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:14:11.982 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:14:12.468 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:14:12.468 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:14:12.468 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 16:14:12.473 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 16:14:12.474 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 16:14:12.474 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 16:14:12.474 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 16:14:12.474 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 16:14:12.475 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 16:14:12.479 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 16:14:12.489 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 16:14:12.490 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:14:12.490 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:14:12.491 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:14:12.491 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 16:14:12.496 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 16:14:12.496 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 16:14:12.496 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 16:14:12.912 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 16:14:12.944 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 16:14:14.095 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:14:15.930 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:14:15.932 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:14:15.933 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:14:15.933 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:14:15.933 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:14:15.933 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:14:15.934 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:14:21.439 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:14:21.441 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:14:21.441 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:14:21.441 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:14:21.442 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:14:21.442 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:14:21.442 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:14:26.167 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:14:26.171 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:14:26.172 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:14:26.173 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:14:26.173 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:14:26.174 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:14:26.174 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:14:26.349 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:14:26.352 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:14:26.352 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:14:26.352 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:14:26.353 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:14:26.353 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:14:26.353 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:14:30.702 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 16:14:30.703 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 16:14:30.735 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:14:30.738 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:14:30.738 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:14:30.739 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:14:30.739 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:14:30.739 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:14:30.739 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:14:30.759 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:14:30.761 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:14:30.766 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:14:30.769 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:14:30.769 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 16:14:30.769 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:14:30.773 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:14:30.773 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:14:31.263 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:14:31.263 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:14:31.264 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 16:14:31.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 16:14:31.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 16:14:31.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 16:14:31.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 16:14:31.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 16:14:31.269 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 16:14:31.271 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 16:14:31.279 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 16:14:31.279 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:14:31.279 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:14:31.279 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:14:31.280 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 16:14:31.284 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 16:14:31.284 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 16:14:31.284 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 16:14:31.704 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 16:14:31.727 [http-nio-8080-exec-4] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 16:14:32.563 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:14:34.952 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:14:34.954 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:14:34.955 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:14:34.955 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:14:34.955 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:14:34.956 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:14:34.956 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:14:37.680 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:14:37.686 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:14:37.687 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:14:37.688 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:14:37.692 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:14:37.693 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:14:37.695 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:14:37.728 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:14:37.732 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:14:37.740 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:14:37.744 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:14:37.744 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 16:14:37.744 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:14:37.748 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:14:37.749 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:14:41.248 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:14:41.250 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:14:41.251 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:14:41.251 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:14:41.252 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:14:41.252 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:14:41.253 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:14:42.411 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:14:42.414 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:14:42.414 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:14:42.414 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:14:42.414 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:14:42.414 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:14:42.414 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:14:44.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:14:44.384 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:14:44.384 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:14:44.385 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:14:44.406 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:14:44.410 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:14:44.414 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:14:44.418 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:14:44.418 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:14:44.418 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:14:44.422 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:14:44.423 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:14:55.381 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:14:55.383 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:14:55.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:14:55.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:14:55.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:14:55.384 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:14:55.385 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:15:00.773 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:15:00.775 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:15:00.775 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:15:00.775 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:15:00.775 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:15:00.775 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:15:00.775 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:15:00.791 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:15:00.795 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:15:00.804 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:15:00.806 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:15:00.806 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:15:00.806 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:15:00.809 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:15:00.809 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:15:16.144 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:15:16.153 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:15:16.153 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:15:16.163 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:15:16.164 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:15:16.165 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:15:16.165 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:15:16.166 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:15:16.166 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:15:16.186 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:15:16.191 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:15:16.192 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:15:16.192 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:15:16.200 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:15:16.200 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:15:18.056 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:15:19.096 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:15:19.101 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:15:19.101 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:15:19.101 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:15:19.102 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:15:19.102 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:15:19.102 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:15:31.370 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:15:31.373 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:15:31.374 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:15:31.374 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:15:31.375 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:15:31.375 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:15:31.375 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:15:44.383 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:15:44.390 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:15:44.390 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:15:44.390 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:15:44.409 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:15:44.411 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:15:44.416 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:15:44.417 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:15:44.417 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:15:44.417 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:15:44.421 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:15:44.421 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:16:01.382 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:16:01.384 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:16:01.385 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:16:01.385 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:16:01.385 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:16:01.385 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:16:01.385 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:16:19.535 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:16:19.538 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:16:19.538 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:16:19.539 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:16:19.539 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:16:19.539 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:16:19.539 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:16:20.201 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:16:20.204 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:16:20.205 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:16:20.205 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:16:20.205 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:16:20.205 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:16:20.206 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:16:20.234 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:16:20.238 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:16:20.251 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:16:20.254 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:16:20.254 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:16:20.255 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:16:20.259 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:16:20.260 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:16:31.374 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:16:31.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:16:31.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:16:31.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:16:31.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:16:31.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:16:31.378 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:16:44.366 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:16:44.367 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:16:44.368 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:16:44.368 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:16:44.380 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:16:44.383 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:16:44.389 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:16:44.391 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:16:44.391 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:16:44.391 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:16:44.393 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:16:44.394 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:16:47.057 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:16:47.062 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:16:47.063 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:16:47.063 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:16:47.064 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:16:47.064 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:16:47.064 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:17:01.369 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:17:01.372 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:17:01.372 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:17:01.372 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:17:01.372 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:17:01.372 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:17:01.372 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:17:14.427 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:17:14.430 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:17:14.430 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:17:14.430 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:17:14.430 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:17:14.430 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:17:14.431 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:17:21.078 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:17:21.080 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:17:21.081 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:17:21.081 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:17:21.081 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:17:21.081 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:17:21.081 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:17:22.033 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:17:22.035 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:17:22.035 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:17:22.035 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:17:22.036 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:17:22.036 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:17:22.036 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:17:31.377 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:17:31.378 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:17:31.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:17:31.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:17:31.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:17:31.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:17:31.380 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:17:44.377 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:17:44.378 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:17:44.379 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:17:44.379 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:17:44.392 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:17:44.395 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:17:44.399 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:17:44.400 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:17:44.400 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:17:44.401 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:17:44.403 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:17:44.403 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:17:57.848 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:17:57.849 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:17:57.850 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:17:57.850 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:17:57.850 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:17:57.850 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:17:57.850 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:18:01.375 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:18:01.376 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:18:01.376 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:18:01.376 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:18:01.377 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:18:01.377 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:18:01.377 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:18:05.778 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:18:05.780 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:18:05.780 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:18:05.781 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:18:05.781 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:18:05.781 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:18:05.781 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:18:09.542 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:18:09.543 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:18:09.543 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:18:09.543 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:18:09.544 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:18:09.544 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:18:09.544 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:18:09.578 [http-nio-8080-exec-6] INFO  c.i.i.r.c.ContactSearchController - 通用搜索用户: keyword=te, currentUserId=4, page=0, size=20
2025-07-13 16:18:09.581 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 通用搜索用户: searchRequest=SearchContactRequest(keyword=te, searchType=null, userId=4)
2025-07-13 16:18:09.581 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据用户ID搜索用户: searchRequest=SearchContactRequest(keyword=te, searchType=null, userId=4)
2025-07-13 16:18:09.588 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 未找到用户: userIdStr=te
2025-07-13 16:18:09.588 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据昵称搜索用户: searchRequest=SearchContactRequest(keyword=te, searchType=null, userId=4)
2025-07-13 16:18:09.601 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 昵称搜索完成: nickname=te, 找到1个结果
2025-07-13 16:18:10.850 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=ceshi
2025-07-13 16:18:10.854 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:18:10.854 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:18:10.855 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:18:18.639 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:18:19.937 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:18:19.939 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:18:19.940 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:18:19.940 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:18:19.940 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:18:19.940 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:18:19.940 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:18:31.375 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:18:31.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:18:31.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:18:31.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:18:31.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:18:31.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:18:31.378 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:18:44.381 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:18:44.383 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:18:44.384 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:18:44.384 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:18:44.396 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:18:44.397 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:18:44.401 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:18:44.402 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:18:44.402 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:18:44.402 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:18:44.403 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:18:44.404 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:19:01.371 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:19:01.373 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:19:01.373 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:19:01.373 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:19:01.374 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:19:01.374 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:19:01.375 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:19:44.372 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:19:44.372 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:19:44.374 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:19:44.374 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:19:44.374 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:19:44.374 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:19:44.374 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:19:44.374 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:19:44.374 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:19:44.374 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:19:44.374 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:19:44.396 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:19:44.402 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:19:44.416 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:19:44.418 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:19:44.418 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:19:44.418 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:19:44.421 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:19:44.421 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:20:44.389 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:20:44.389 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:20:44.391 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:20:44.391 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:20:44.391 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:20:44.391 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:20:44.391 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:20:44.392 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:20:44.392 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:20:44.392 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:20:44.392 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:20:44.413 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:20:44.415 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:20:44.419 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:20:44.421 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:20:44.421 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:20:44.421 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:20:44.425 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:20:44.425 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:21:44.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:21:44.376 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:21:44.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:21:44.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:21:44.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:21:44.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:21:44.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:21:44.379 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:21:44.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:21:44.379 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:21:44.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:21:44.402 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:21:44.406 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:21:44.412 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:21:44.415 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:21:44.415 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:21:44.415 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:21:44.419 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:21:44.419 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:22:10.713 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:10.714 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:10.714 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:10.715 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:10.716 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:10.716 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:10.716 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:10.735 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:10.737 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:10.737 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:10.737 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:10.737 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:10.737 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:10.737 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:11.687 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 16:22:11.689 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 16:22:11.712 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:11.713 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:11.714 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:11.714 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:11.715 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:11.715 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:11.715 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:11.730 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:22:11.733 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:22:11.741 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:22:11.742 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:22:11.742 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:22:11.743 [http-nio-8080-exec-9] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:22:11.746 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:22:11.746 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:22:12.233 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 16:22:12.234 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:22:12.234 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:22:12.239 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 16:22:12.240 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 16:22:12.240 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 16:22:12.240 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 16:22:12.240 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 16:22:12.240 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 16:22:12.242 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 16:22:12.249 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 16:22:12.249 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:22:12.249 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:22:12.249 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:22:12.249 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 16:22:12.254 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 16:22:12.254 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 16:22:12.254 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 16:22:12.693 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 16:22:12.718 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 16:22:13.237 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:22:14.325 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:14.327 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:14.328 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:14.328 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:14.328 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:14.328 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:14.328 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:15.658 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:15.660 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:15.661 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:15.661 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:15.661 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:15.662 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:15.662 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:15.693 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:22:15.700 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:22:15.711 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:22:15.714 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:22:15.715 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:22:15.715 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:22:15.722 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:22:15.723 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:22:20.381 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=2
2025-07-13 16:22:28.259 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:28.266 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:28.267 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:28.269 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:28.271 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:28.273 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:28.278 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:30.996 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:30.998 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:30.999 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:30.999 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:30.999 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:30.999 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:30.999 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:31.102 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:31.105 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:31.105 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:31.105 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:31.106 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:31.106 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:31.106 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:34.991 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=2
2025-07-13 16:22:36.752 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:36.755 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:36.755 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:36.756 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:36.756 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:36.756 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:36.757 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:37.458 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:37.460 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:37.460 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:37.461 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:37.461 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:37.461 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:37.461 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:37.974 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:37.976 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:37.976 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:37.977 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:37.977 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:37.977 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:37.977 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:38.476 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:38.477 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:38.477 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:38.477 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:38.477 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:38.477 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:38.478 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:41.515 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:41.517 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:41.517 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:41.517 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:41.517 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:41.517 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:41.517 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:41.551 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:41.552 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:41.553 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:41.553 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:41.553 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:41.553 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:41.553 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:41.735 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:41.736 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:41.737 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:41.737 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:41.737 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:41.737 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:41.737 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:44.372 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:22:44.373 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:22:44.373 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:22:44.373 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:22:44.387 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:22:44.388 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:22:44.391 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:22:44.393 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:22:44.394 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:22:44.394 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:22:44.397 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:22:44.397 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:22:44.686 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:44.688 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:44.688 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:44.688 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:44.688 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:44.688 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:44.688 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:48.523 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 16:22:48.524 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 16:22:48.541 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:48.543 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:48.543 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:48.543 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:48.543 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:48.544 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:48.544 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:48.557 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:22:48.559 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:22:48.563 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:22:48.564 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:22:48.565 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 16:22:48.565 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:22:48.567 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:22:48.568 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:22:49.059 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 16:22:49.059 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:22:49.059 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:22:49.062 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 16:22:49.062 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 16:22:49.062 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 16:22:49.062 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 16:22:49.062 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 16:22:49.062 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 16:22:49.064 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 16:22:49.071 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 16:22:49.071 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:22:49.071 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:22:49.071 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:22:49.071 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 16:22:49.073 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 16:22:49.074 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 16:22:49.074 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 16:22:49.510 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 16:22:49.523 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 16:22:50.037 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:22:51.251 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:51.252 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:51.253 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:51.253 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:51.253 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:51.253 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:51.254 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:52.015 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:22:52.018 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:22:52.018 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:22:52.018 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:22:52.018 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:22:52.018 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:22:52.018 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:22:52.032 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:22:52.034 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:22:52.037 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:22:52.038 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:22:52.038 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 16:22:52.038 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:22:52.041 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:22:52.042 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:23:07.558 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:23:07.559 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:23:07.559 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:23:07.559 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:23:07.559 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:23:07.559 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:23:07.559 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:23:08.613 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:23:08.616 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:23:08.616 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:23:08.617 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:23:08.617 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:23:08.617 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:23:08.617 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:23:12.898 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=2
2025-07-13 16:23:19.367 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:23:19.369 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:23:19.369 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:23:19.369 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:23:19.369 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:23:19.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:23:19.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:23:44.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:23:44.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:23:44.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:23:44.382 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:23:44.407 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:23:44.413 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:23:44.420 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:23:44.421 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:23:44.421 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:23:44.421 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:23:44.425 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:23:44.425 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:23:49.376 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:23:49.378 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:23:49.378 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:23:49.378 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:23:49.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:23:49.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:23:49.379 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:23:51.684 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:23:51.685 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:23:51.685 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:23:51.685 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:23:51.686 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:23:51.686 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:23:51.686 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:23:56.095 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=2
2025-07-13 16:24:19.374 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:24:19.375 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:24:19.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:24:19.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:24:19.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:24:19.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:24:19.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:24:44.379 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:24:44.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:24:44.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:24:44.381 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:24:44.397 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:24:44.399 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:24:44.402 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:24:44.404 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:24:44.404 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:24:44.404 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:24:44.407 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:24:44.407 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:24:49.372 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:24:49.373 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:24:49.373 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:24:49.374 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:24:49.374 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:24:49.374 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:24:49.374 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:25:19.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:25:19.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:25:19.380 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:25:19.381 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:25:19.381 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:25:19.381 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:25:19.381 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:25:44.369 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:25:44.370 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:25:44.370 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:25:44.371 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:25:44.390 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:25:44.393 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:25:44.397 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:25:44.400 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:25:44.400 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:25:44.400 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:25:44.403 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:25:44.403 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:25:49.392 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:25:49.394 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:25:49.394 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:25:49.394 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:25:49.395 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:25:49.395 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:25:49.395 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:26:19.376 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:26:19.379 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:26:19.380 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:26:19.380 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:26:19.380 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:26:19.380 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:26:19.381 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:26:44.374 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:26:44.377 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:26:44.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:26:44.378 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:26:44.404 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:26:44.408 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:26:44.414 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:26:44.418 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:26:44.418 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:26:44.418 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:26:44.427 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:26:44.427 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:26:58.128 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:26:58.130 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:26:58.130 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:26:58.130 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:26:58.131 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:26:58.131 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:26:58.131 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:26:58.152 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:26:58.154 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:26:58.154 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:26:58.154 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:26:58.155 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:26:58.155 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:26:58.155 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:27:00.671 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 16:27:00.673 [http-nio-8080-exec-2] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 16:27:00.698 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:27:00.700 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:27:00.701 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:27:00.701 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:27:00.701 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:27:00.701 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:27:00.701 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:27:00.717 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:27:00.719 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:27:00.729 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:27:00.731 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:27:00.731 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:27:00.731 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:27:00.735 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:27:00.735 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:27:01.224 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:27:01.224 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:27:01.225 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 16:27:01.229 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 16:27:01.229 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 16:27:01.229 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 16:27:01.229 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 16:27:01.229 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 16:27:01.229 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 16:27:01.235 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 16:27:01.248 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 16:27:01.248 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:27:01.248 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:27:01.249 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:27:01.249 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 16:27:01.251 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 16:27:01.251 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 16:27:01.252 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 16:27:01.675 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 16:27:01.692 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 16:27:02.468 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:27:03.858 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:27:03.860 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:27:03.861 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:27:03.861 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:27:03.862 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:27:03.862 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:27:03.862 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:27:07.051 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:27:07.053 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:27:07.053 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:27:07.054 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:27:07.055 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:27:07.055 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:27:07.055 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:27:07.084 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:27:07.087 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:27:07.102 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:27:07.104 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:27:07.104 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:27:07.105 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:27:07.111 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:27:07.112 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:27:11.741 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:27:11.743 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:27:11.744 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:27:11.744 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:27:11.744 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:27:11.744 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:27:11.745 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:27:13.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:27:13.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:27:13.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:27:13.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:27:13.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:27:13.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:27:13.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:27:14.448 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:27:14.449 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:27:14.449 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:27:14.450 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:27:14.450 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:27:14.450 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:27:14.450 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:27:23.157 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:27:23.159 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:27:23.159 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:27:23.159 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:27:23.159 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:27:23.159 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:27:23.159 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:27:23.572 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:27:23.573 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:27:23.573 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:27:23.574 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:27:23.574 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:27:23.574 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:27:23.574 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:27:23.589 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:27:23.590 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:27:23.593 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:27:23.594 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:27:23.594 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 16:27:23.594 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:27:23.597 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:27:23.597 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:27:25.335 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:27:25.336 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:27:25.336 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:27:25.336 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:27:25.336 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:27:25.337 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:27:25.337 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:27:26.389 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:27:26.390 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:27:26.391 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:27:26.391 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:27:26.391 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:27:26.391 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:27:26.391 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:27:30.750 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:27:30.756 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:27:30.756 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:27:30.756 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:27:30.756 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:27:30.756 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:27:30.758 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:27:44.372 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:27:44.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:27:44.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:27:44.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:27:44.387 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:27:44.389 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:27:44.392 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:27:44.393 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:27:44.394 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:27:44.394 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:27:44.396 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:27:44.397 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:27:50.499 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:27:50.501 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:27:50.501 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:27:50.501 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:27:50.501 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:27:50.501 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:27:50.501 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:28:01.370 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:28:01.371 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:28:01.371 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:28:01.371 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:28:01.371 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:28:01.371 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:28:01.372 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:28:18.165 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:28:18.167 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:28:18.168 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:28:18.168 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:28:18.169 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:28:18.169 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:28:18.169 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:28:22.697 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:28:22.699 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:28:22.699 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:28:22.699 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:28:22.699 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:28:22.699 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:28:22.700 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:28:23.755 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:28:23.756 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:28:23.756 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:28:23.757 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:28:23.757 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:28:23.757 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:28:23.757 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:28:31.364 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:28:31.368 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:28:31.369 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:28:31.369 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:28:31.370 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:28:31.371 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:28:31.371 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:28:44.379 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:28:44.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:28:44.380 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:28:44.381 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:28:44.401 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:28:44.403 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:28:44.406 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:28:44.407 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:28:44.407 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:28:44.407 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:28:44.409 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:28:44.410 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:28:46.849 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:28:46.850 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:28:46.850 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:28:46.851 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:28:46.851 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:28:46.852 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:28:46.852 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:28:47.876 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:28:47.878 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:28:47.878 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:28:47.878 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:28:47.878 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:28:47.878 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:28:47.878 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:29:01.369 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:29:01.371 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:29:01.371 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:29:01.372 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:29:01.372 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:29:01.372 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:29:01.372 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:29:10.357 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:29:10.358 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:29:10.358 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:29:10.358 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:29:10.359 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:29:10.359 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:29:10.359 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:29:31.376 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:29:31.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:29:31.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:29:31.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:29:31.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:29:31.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:29:31.379 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:29:44.365 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:29:44.367 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:29:44.367 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:29:44.367 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:29:44.382 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:29:44.385 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:29:44.388 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:29:44.389 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:29:44.389 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:29:44.390 [http-nio-8080-exec-10] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:29:44.392 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:29:44.392 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:30:01.367 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:30:01.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:30:01.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:30:01.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:30:01.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:30:01.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:30:01.370 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:30:31.376 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:30:31.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:30:31.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:30:31.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:30:31.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:30:31.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:30:31.378 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:30:44.428 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:30:44.431 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:30:44.431 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:30:44.431 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:30:44.447 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:30:44.450 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:30:44.454 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:30:44.456 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:30:44.456 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:30:44.456 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:30:44.459 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:30:44.459 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:31:25.624 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:25.628 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:25.628 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:25.629 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:25.629 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:25.629 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:25.629 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:25.648 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:25.651 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:25.651 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:25.651 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:25.651 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:25.651 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:25.652 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:26.524 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 16:31:26.526 [http-nio-8080-exec-7] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 16:31:26.548 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:26.550 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:26.550 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:26.550 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:26.550 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:26.551 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:26.551 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:26.570 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:31:26.573 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:31:26.582 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:31:26.585 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:31:26.585 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 16:31:26.585 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:31:26.588 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:31:26.589 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:31:27.070 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 16:31:27.074 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:31:27.074 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:31:27.078 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 16:31:27.078 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 16:31:27.078 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 16:31:27.078 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 16:31:27.078 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 16:31:27.079 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 16:31:27.083 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 16:31:27.090 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 16:31:27.090 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:31:27.090 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:31:27.090 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:31:27.090 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 16:31:27.094 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 16:31:27.094 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 16:31:27.094 [http-nio-8080-exec-5] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 16:31:27.525 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 16:31:27.543 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 16:31:28.212 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:31:29.163 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:29.166 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:29.166 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:29.167 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:29.167 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:29.167 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:29.167 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:30.721 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:30.725 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:30.725 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:30.725 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:30.725 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:30.725 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:30.725 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:30.740 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:31:30.742 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:31:30.748 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:31:30.750 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:31:30.750 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 16:31:30.750 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:31:30.752 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:31:30.753 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:31:32.202 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:32.204 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:32.204 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:32.204 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:32.204 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:32.204 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:32.204 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:33.268 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:33.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:33.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:33.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:33.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:33.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:33.270 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:34.965 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:34.967 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:34.967 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:34.967 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:34.967 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:34.967 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:34.968 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:34.987 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人详情请求: userId=4, friendId=2
2025-07-13 16:31:34.990 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取联系人详情: userId=4, friendId=2
2025-07-13 16:31:35.003 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人详情: userId=4, friendId=2, tagCount=1
2025-07-13 16:31:35.007 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 成功获取联系人详情: userId=4, friendId=2, tagCount=1
2025-07-13 16:31:44.407 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:31:44.411 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:31:44.411 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:31:44.411 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:31:44.445 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:31:44.450 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:31:44.458 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:31:44.462 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:31:44.462 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:31:44.462 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:31:44.469 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:31:44.469 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:31:44.751 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:44.754 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:44.754 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:44.754 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:44.755 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:44.755 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:44.756 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:46.330 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:46.333 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:46.333 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:46.334 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:46.334 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:46.334 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:46.335 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:50.026 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:50.028 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:50.028 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:50.028 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:50.029 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:50.029 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:50.029 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:50.046 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:31:50.049 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:31:50.052 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:31:50.054 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:31:50.054 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 16:31:50.054 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:31:50.058 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:31:50.059 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:31:51.295 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:51.296 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:51.296 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:51.296 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:51.296 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:51.297 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:51.297 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:52.371 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:52.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:52.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:52.375 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:52.375 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:52.375 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:52.375 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:55.059 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:55.060 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:55.060 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:55.061 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:55.061 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:55.061 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:55.061 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:31:56.571 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:31:56.573 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:31:56.573 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:31:56.574 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:31:56.574 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:31:56.574 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:31:56.574 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:32:00.210 [MessageBroker-6] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 20, active threads = 1, queued tasks = 8, completed tasks = 63]
2025-07-13 16:32:00.538 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:32:00.540 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:32:00.540 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:32:00.541 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:32:00.541 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:32:00.541 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:32:00.541 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:32:01.332 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:32:01.334 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:32:01.334 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:32:01.334 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:32:01.334 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:32:01.334 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:32:01.335 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:32:01.348 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人详情请求: userId=4, friendId=2
2025-07-13 16:32:01.350 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取联系人详情: userId=4, friendId=2
2025-07-13 16:32:01.357 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人详情: userId=4, friendId=2, tagCount=1
2025-07-13 16:32:01.359 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 成功获取联系人详情: userId=4, friendId=2, tagCount=1
2025-07-13 16:32:27.394 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:32:27.396 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:32:27.396 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:32:27.397 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:32:27.397 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:32:27.397 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:32:27.397 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:32:44.368 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:32:44.370 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:32:44.370 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:32:44.371 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:32:44.387 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:32:44.389 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:32:44.392 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:32:44.393 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:32:44.393 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:32:44.393 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:32:44.396 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:32:44.396 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:32:57.377 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:32:57.379 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:32:57.379 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:32:57.379 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:32:57.379 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:32:57.379 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:32:57.379 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:33:27.370 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:33:27.371 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:33:27.372 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:33:27.372 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:33:27.373 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:33:27.373 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:33:27.373 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:33:44.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:33:44.373 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:33:44.374 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:33:44.374 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:33:44.390 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:33:44.392 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:33:44.395 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:33:44.398 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:33:44.398 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:33:44.398 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:33:44.401 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:33:44.402 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:33:57.368 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:33:57.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:33:57.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:33:57.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:33:57.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:33:57.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:33:57.370 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:34:27.374 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:34:27.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:34:27.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:34:27.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:34:27.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:34:27.377 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:34:27.378 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:34:44.363 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:34:44.364 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:34:44.364 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:34:44.364 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:34:44.379 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:34:44.382 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:34:44.385 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:34:44.387 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:34:44.387 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:34:44.387 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:34:44.390 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:34:44.390 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:34:57.369 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:34:57.371 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:34:57.372 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:34:57.372 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:34:57.373 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:34:57.373 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:34:57.373 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:35:20.521 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:35:20.523 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:35:20.523 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:35:20.523 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:35:20.523 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:35:20.524 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:35:20.524 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:35:21.408 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 16:35:21.409 [http-nio-8080-exec-6] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 16:35:21.428 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:35:21.430 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:35:21.430 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:35:21.430 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:35:21.430 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:35:21.431 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:35:21.431 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:35:21.444 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:35:21.446 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:35:21.453 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:35:21.454 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:35:21.454 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:35:21.454 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:35:21.457 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:35:21.458 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:35:21.948 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 16:35:21.949 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:35:21.950 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:35:21.951 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 16:35:21.951 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 16:35:21.951 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 16:35:21.952 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 16:35:21.952 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 16:35:21.952 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 16:35:21.956 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 16:35:21.968 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 16:35:21.968 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:35:21.969 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:35:21.969 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:35:21.969 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 16:35:21.973 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 16:35:21.974 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 16:35:21.974 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 16:35:22.408 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 16:35:22.428 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 16:35:22.731 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:35:23.977 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:35:23.979 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:35:23.979 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:35:23.979 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:35:23.979 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:35:23.979 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:35:23.979 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:35:24.914 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=2
2025-07-13 16:35:39.801 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:35:39.803 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:35:39.803 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:35:39.803 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:35:39.803 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:35:39.803 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:35:39.804 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:35:40.609 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=2
2025-07-13 16:35:44.377 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:35:44.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:35:44.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:35:44.379 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:35:44.396 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:35:44.399 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:35:44.403 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:35:44.405 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:35:44.405 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:35:44.405 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:35:44.407 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:35:44.408 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:35:52.384 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:35:52.385 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:35:52.386 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:35:52.386 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:35:52.386 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:35:52.386 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:35:52.386 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:36:22.374 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:36:22.375 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:36:22.375 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:36:22.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:36:22.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:36:22.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:36:22.376 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:36:44.373 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:36:44.374 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:36:44.375 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:36:44.375 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:36:44.391 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:36:44.393 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:36:44.397 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:36:44.398 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:36:44.398 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:36:44.398 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:36:44.400 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:36:44.400 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:36:52.385 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:36:52.387 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:36:52.388 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:36:52.388 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:36:52.388 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:36:52.388 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:36:52.388 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:37:22.369 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:37:22.377 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:37:22.378 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:37:22.378 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:37:22.378 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:37:22.378 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:37:22.378 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:37:44.360 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:37:44.362 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:37:44.362 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:37:44.362 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:37:44.376 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:37:44.379 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:37:44.382 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:37:44.384 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:37:44.385 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:37:44.385 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:37:44.388 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:37:44.388 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:37:52.367 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:37:52.368 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:37:52.368 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:37:52.369 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:37:52.369 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:37:52.369 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:37:52.369 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:38:22.383 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:38:22.385 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:38:22.385 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:38:22.385 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:38:22.385 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:38:22.385 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:38:22.386 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:38:44.367 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:38:44.368 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:38:44.369 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:38:44.369 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:38:44.386 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:38:44.389 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:38:44.393 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:38:44.395 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:38:44.395 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:38:44.395 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:38:44.398 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:38:44.398 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:38:52.378 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:38:52.380 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:38:52.380 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:38:52.380 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:38:52.380 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:38:52.380 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:38:52.380 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:39:44.384 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:39:44.384 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:39:44.387 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:39:44.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:39:44.387 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:39:44.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:39:44.387 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:39:44.387 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:39:44.387 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:39:44.388 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:39:44.389 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:39:44.411 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:39:44.415 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:39:44.422 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:39:44.425 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:39:44.425 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:39:44.425 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:39:44.430 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:39:44.430 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 16:40:02.202 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:40:02.206 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:40:02.207 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:40:02.207 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:40:02.207 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:40:02.208 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:40:02.208 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:40:02.237 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:40:02.241 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:40:02.242 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:40:02.242 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:40:02.243 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:40:02.243 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:40:02.243 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:40:03.080 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 16:40:03.083 [http-nio-8080-exec-3] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 16:40:03.147 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:40:03.151 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:40:03.151 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:40:03.152 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:40:03.153 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:40:03.153 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:40:03.153 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:40:03.195 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:40:03.200 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:40:03.217 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:40:03.220 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:40:03.221 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:40:03.222 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:40:03.228 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:40:03.229 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:40:03.422 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 16:40:03.426 [http-nio-8080-exec-1] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 16:40:03.504 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:40:03.509 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:40:03.509 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:40:03.510 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:40:03.510 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:40:03.510 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:40:03.511 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:40:03.568 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:40:03.574 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:40:03.591 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:40:03.595 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:40:03.596 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:40:03.597 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:40:03.603 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:40:03.603 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:40:04.066 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 16:40:04.070 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:40:04.071 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 16:40:04.076 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 16:40:04.076 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 16:40:04.077 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 16:40:04.077 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 16:40:04.078 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 16:40:04.078 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 16:40:04.088 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 16:40:04.105 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 16:40:04.106 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:40:04.106 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:40:04.107 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 16:40:04.107 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 16:40:04.113 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 16:40:04.114 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 16:40:04.114 [http-nio-8080-exec-7] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 16:40:04.418 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 16:40:04.504 [http-nio-8080-exec-6] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 16:40:05.216 [http-nio-8080-exec-9] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 16:40:06.380 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:40:06.392 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:40:06.396 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:40:06.399 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:40:06.403 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:40:06.406 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:40:06.406 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:40:07.363 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:40:07.366 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:40:07.366 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:40:07.367 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:40:34.392 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:40:34.394 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:40:34.394 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:40:34.395 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:40:34.396 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:40:34.396 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:40:34.396 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:40:34.423 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:40:34.427 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:40:34.438 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:40:34.441 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:40:34.442 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:40:34.442 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:40:34.446 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:40:34.446 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:40:44.037 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 16:40:44.042 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 16:40:44.042 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 16:40:44.047 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 16:40:44.047 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 16:40:44.048 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 16:40:44.048 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 16:40:44.048 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 16:40:44.048 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 16:40:44.057 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 16:40:44.060 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 16:40:44.061 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 16:40:44.061 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 16:40:44.065 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:40:44.066 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 16:40:44.381 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 16:40:44.384 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 16:40:44.385 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 16:40:44.385 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 16:40:44.417 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=2, includeBlocked=false
2025-07-13 16:40:44.420 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=2, includeBlocked=false
2025-07-13 16:40:44.426 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=2, friendId=4, alias=null
2025-07-13 16:40:44.428 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=4, email=jiapei1219@gmail.com, nickname=test001
2025-07-13 16:40:44.428 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=2, friendId=4, nickname=test001, alias=null, tagCount=0
2025-07-13 16:40:44.428 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=2, 联系人数量=1
2025-07-13 16:40:44.431 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 16:40:44.433 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=2, friendId=4, nickname=test001, alias=null
2025-07-13 21:35:19.108 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 21:35:19.177 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 21692 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 21:35:19.180 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 21:35:19.263 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 21:35:19.263 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 21:35:20.555 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 21:35:20.556 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 21:35:20.735 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 171 ms. Found 10 JPA repository interfaces.
2025-07-13 21:35:20.742 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 21:35:20.742 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 21:35:20.743 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 21:35:21.121 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 21:35:21.122 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 21:35:21.144 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 21:35:21.145 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 21:35:21.145 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 21:35:21.146 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 21:35:21.147 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 21:35:21.148 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 21:35:21.149 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 21:35:21.149 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 21:35:21.150 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 21:35:21.150 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 21:35:21.151 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 21:35:21.154 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 21:35:21.155 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 21:35:21.183 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 21:35:21.184 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 21:35:21.184 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 21:35:21.185 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 21:35:21.186 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 21:35:21.186 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 21:35:21.186 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 21:35:21.187 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 21:35:21.187 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 21:35:21.188 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 21:35:21.188 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 33 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 21:35:21.200 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 21:35:21.202 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 21:35:21.230 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 21:35:21.231 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 21:35:21.232 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 21:35:21.233 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 21:35:21.233 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 21:35:21.234 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 21:35:21.235 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 21:35:21.235 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 21:35:21.235 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 21:35:21.236 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 21:35:21.236 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 0 Redis repository interfaces.
2025-07-13 21:35:22.251 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 21:35:22.254 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 21:35:22.283 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 21:35:22.294 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 21:35:22.297 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 21:35:22.297 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 21:35:22.366 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 21:35:22.367 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3102 ms
2025-07-13 21:35:22.633 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 21:35:22.793 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6989f143
2025-07-13 21:35:22.795 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 21:35:22.894 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 21:35:23.006 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 16 migrations (execution time 00:00.061s)
2025-07-13 21:35:23.029 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 21:35:23.033 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 21:35:23.107 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 21:35:23.139 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 21:35:23.164 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 21:35:23.354 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 21:35:24.176 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 21:35:24.219 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 21:35:24.905 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 21:35:25.467 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 21:35:25.629 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 21:35:25.630 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 21:35:25.853 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 21:35:26.077 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 21:35:26.125 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 21:35:26.126 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 21:35:26.172 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 21:35:26.173 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 21:35:26.224 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 21:35:26.237 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 21:35:26.249 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 21:35:26.262 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 21:35:26.419 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 21:35:26.430 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 21:35:26.526 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - 初始化Elasticsearch客户端配置，连接地址: http://localhost:9200
2025-07-13 21:35:26.533 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch客户端已配置基本连接
2025-07-13 21:35:26.533 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch客户端配置初始化成功
2025-07-13 21:35:26.877 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 21:35:26.976 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 21:35:27.197 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 21:35:27.679 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 21:35:27.723 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 21:35:27.732 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 21:35:27.734 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 21:35:27.734 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@459677b9]]
2025-07-13 21:35:27.735 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 21:35:27.748 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 9.135 seconds (process running for 9.5)
2025-07-13 21:35:27.781 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 21:35:27.810 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 21:35:27.830 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 21:35:27.850 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 21:35:27.864 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 21:35:27.880 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 21:35:27.896 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 21:35:27.928 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 21:35:31.710 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 21:35:31.710 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 21:35:31.712 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 21:35:43.233 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 21:35:43.235 [http-nio-8080-exec-4] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 21:35:43.281 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 21:35:43.284 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 21:35:43.284 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 21:35:43.284 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 21:35:43.284 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 21:35:43.285 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 21:35:43.285 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 21:35:43.322 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 21:35:43.325 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 21:35:43.357 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 21:35:43.360 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 21:35:43.361 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 21:35:43.361 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 21:35:43.364 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 21:35:43.365 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 21:35:43.818 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 21:35:43.818 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 21:35:43.820 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 21:35:43.829 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 21:35:43.832 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 21:35:43.832 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 21:35:43.832 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 21:35:43.832 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 21:35:43.834 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 21:35:43.835 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 21:35:43.843 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 21:35:43.843 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 21:35:43.843 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 21:35:43.843 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 21:35:43.843 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 21:35:43.852 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 21:35:43.852 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 21:35:43.852 [http-nio-8080-exec-10] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 21:35:44.183 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 21:35:44.212 [http-nio-8080-exec-1] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 21:35:48.342 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 21:35:50.001 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 21:35:50.003 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 21:35:50.003 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 21:35:50.003 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 21:35:50.004 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 21:35:50.004 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 21:35:50.004 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 21:35:51.091 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 2
2025-07-13 21:35:51.093 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 21:35:51.094 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 21:35:51.094 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 21:35:54.628 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 21:35:54.631 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 21:35:54.631 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 21:35:54.632 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 21:35:54.632 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 21:35:54.632 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 21:35:54.632 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 21:35:54.647 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 21:35:54.651 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 21:35:54.662 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 21:35:54.664 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 21:35:54.665 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 21:35:54.665 [http-nio-8080-exec-8] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 21:35:54.667 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 21:35:54.668 [http-nio-8080-exec-8] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 21:36:02.010 [http-nio-8080-exec-10] INFO  c.i.i.r.controller.TagController - 更新标签请求: userId=4, tagId=2, name=测试001, color=#fa709a
2025-07-13 21:36:02.082 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 21:36:08.290 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 更新标签请求: userId=4, tagId=2, name=测试3, color=#fa709a
2025-07-13 21:36:13.321 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 21:36:13.324 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 21:36:13.324 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 21:36:13.324 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 21:36:13.324 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 21:36:13.325 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 21:36:13.325 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 21:36:13.586 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.TagController - 更新标签请求: userId=4, tagId=2, name=测试2, color=#fa709a
2025-07-13 21:36:13.630 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 21:36:24.104 [http-nio-8080-exec-4] INFO  c.i.i.u.s.impl.UserDeviceServiceImpl - 获取用户设备列表: userId=4
2025-07-13 21:36:25.783 [http-nio-8080-exec-7] INFO  c.i.i.u.s.impl.UserDeviceServiceImpl - 获取用户设备列表: userId=4
2025-07-13 21:36:27.716 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 21:36:34.540 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 21:36:34.540 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 21:36:34.540 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 21:36:34.543 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 21:36:34.544 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 21:36:34.544 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 21:36:34.544 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 21:36:34.544 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 21:36:34.544 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 21:36:34.548 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 21:36:34.555 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 21:36:34.555 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 21:36:34.555 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 21:36:34.555 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 21:36:34.555 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 21:36:34.564 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 21:36:34.564 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 21:36:34.565 [http-nio-8080-exec-9] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 21:36:35.460 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 21:36:35.460 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 21:36:35.461 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 21:36:35.465 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 21:36:35.465 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 21:36:35.465 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 21:36:35.465 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 21:36:35.465 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 21:36:35.465 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 21:36:35.467 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 21:36:35.475 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 21:36:35.476 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 21:36:35.476 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 21:36:35.476 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 21:36:35.476 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 21:36:35.480 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 21:36:35.480 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 21:36:35.480 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 21:36:35.981 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 21:36:35.982 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 21:36:35.982 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 21:36:35.984 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 21:36:35.985 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 21:36:35.985 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 21:36:35.985 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 21:36:35.985 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 21:36:35.985 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 21:36:35.990 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 21:36:35.997 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 21:36:35.998 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 21:36:35.998 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 21:36:35.998 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 21:36:35.998 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 21:36:36.001 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 21:36:36.001 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 21:36:36.001 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 21:36:38.513 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 21:36:38.515 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 21:36:38.515 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 21:36:38.515 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 21:36:38.516 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 21:36:38.516 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 21:36:38.516 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 21:36:43.321 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 21:36:43.325 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 21:36:43.325 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 21:36:43.325 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 21:36:43.325 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 21:36:43.325 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 21:36:43.327 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 21:36:43.344 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 21:36:43.345 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 21:36:43.356 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 21:36:43.357 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 21:36:43.357 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 21:36:43.357 [http-nio-8080-exec-7] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 21:36:43.359 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 21:36:43.359 [http-nio-8080-exec-7] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 21:36:44.628 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 21:36:44.630 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 21:36:44.630 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 21:36:44.631 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 21:36:44.631 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 21:36:44.631 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 21:36:44.631 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 21:36:44.652 [http-nio-8080-exec-10] INFO  c.i.i.r.c.ContactSearchController - 通用搜索用户: keyword=test, currentUserId=4, page=0, size=20
2025-07-13 21:36:44.655 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 通用搜索用户: searchRequest=SearchContactRequest(keyword=test, searchType=null, userId=4)
2025-07-13 21:36:44.655 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据用户ID搜索用户: searchRequest=SearchContactRequest(keyword=test, searchType=null, userId=4)
2025-07-13 21:36:44.660 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 未找到用户: userIdStr=test
2025-07-13 21:36:44.661 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 根据昵称搜索用户: searchRequest=SearchContactRequest(keyword=test, searchType=null, userId=4)
2025-07-13 21:36:44.672 [http-nio-8080-exec-10] INFO  c.i.i.r.s.i.ContactSearchServiceImpl - 昵称搜索完成: nickname=test, 找到1个结果
2025-07-13 21:36:45.872 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 根据用户ID字符串获取用户资料: userIdStr=ceshi
2025-07-13 21:36:45.876 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 2 ===
2025-07-13 21:36:45.876 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: null ===
2025-07-13 21:36:45.876 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 用户没有状态数据 ===
2025-07-13 21:36:51.646 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 21:36:51.646 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@459677b9]]
2025-07-13 21:36:51.647 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 21:36:51.879 [SpringApplicationShutdownHook] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 21:36:51.885 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 21:36:51.888 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 21:36:51.893 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 23:27:23.582 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 23:27:23.619 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 19048 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:27:23.620 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:27:23.656 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 23:27:23.656 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 23:27:24.392 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:27:24.393 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:27:24.577 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 176 ms. Found 13 JPA repository interfaces.
2025-07-13 23:27:24.584 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:27:24.585 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:27:24.585 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:27:24.936 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:27:24.937 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:27:24.958 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.959 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.959 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.960 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.961 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.961 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.962 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.962 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.963 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.963 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.963 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.963 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.964 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:27:24.964 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:27:24.966 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:27:24.967 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:27:24.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.980 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.981 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.981 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.981 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.981 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.982 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.982 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.982 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.982 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.982 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.983 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.983 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:27:24.984 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:27:24.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:27:24.994 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:27:25.016 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.016 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.016 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.016 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.018 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.018 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.018 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.018 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.018 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.019 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.019 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.019 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.019 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:27:25.020 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 0 Redis repository interfaces.
2025-07-13 23:27:25.784 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:27:25.787 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:27:25.804 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:27:25.813 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:27:25.815 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:27:25.816 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:27:25.870 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:27:25.870 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2213 ms
2025-07-13 23:27:26.111 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 23:27:26.259 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@64bb1867
2025-07-13 23:27:26.261 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 23:27:26.313 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:27:26.413 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 16 migrations (execution time 00:00.056s)
2025-07-13 23:27:26.440 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 23:27:26.448 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:27:26.545 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:27:26.608 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 23:27:26.641 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:27:26.896 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:27:27.994 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:27:28.072 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:27:28.114 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 23:27:28.121 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 23:27:28.135 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:28:13.098 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 23:28:13.134 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 26444 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:28:13.135 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:28:13.174 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 23:28:13.174 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 23:28:14.039 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:28:14.040 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:28:14.241 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 193 ms. Found 13 JPA repository interfaces.
2025-07-13 23:28:14.249 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:28:14.249 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:28:14.250 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:28:14.718 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:28:14.719 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:28:14.748 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.749 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.750 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.753 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.753 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.754 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.754 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.754 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.756 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.757 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.757 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.758 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:28:14.758 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 38 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:28:14.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:28:14.764 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:28:14.782 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.783 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.783 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.784 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.784 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.785 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.785 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.786 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.786 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.787 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.787 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.788 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.788 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:28:14.788 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:28:14.800 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:28:14.801 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:28:14.827 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.828 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.828 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.829 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.829 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.829 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.830 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.830 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.830 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.831 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.831 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.832 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.832 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:28:14.832 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2025-07-13 23:28:15.804 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:28:15.807 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:28:15.810 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:28:15.819 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:28:15.820 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:28:15.821 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:28:15.874 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:28:15.875 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2699 ms
2025-07-13 23:28:16.102 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 23:28:16.216 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@64bb1867
2025-07-13 23:28:16.218 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 23:28:16.291 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:28:16.361 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 16 migrations (execution time 00:00.045s)
2025-07-13 23:28:16.385 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 23:28:16.389 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:28:16.473 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:28:16.512 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 23:28:16.540 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:28:16.746 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:28:17.691 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:28:17.746 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:28:17.782 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 23:28:17.788 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 23:28:17.800 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:31:43.638 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 23:31:43.688 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 20732 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:31:43.689 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:31:43.728 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 23:31:43.729 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 23:31:44.595 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:31:44.595 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:31:44.783 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 179 ms. Found 13 JPA repository interfaces.
2025-07-13 23:31:44.792 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:31:44.792 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:31:44.792 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:31:45.176 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:31:45.176 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:31:45.197 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.198 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.199 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.200 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.200 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.200 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.201 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.202 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.203 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.204 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.204 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.204 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.204 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:31:45.204 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:31:45.207 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:31:45.208 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:31:45.220 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.221 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.221 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.222 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.222 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.222 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.223 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.223 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.223 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.223 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.223 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.224 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.224 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:31:45.224 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:31:45.237 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:31:45.239 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:31:45.264 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.265 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.266 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.266 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.266 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.267 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.267 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.267 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.267 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.268 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.268 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.268 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.269 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:31:45.269 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 0 Redis repository interfaces.
2025-07-13 23:31:46.256 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:31:46.261 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:31:46.282 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:31:46.294 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:31:46.297 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:31:46.298 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:31:46.364 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:31:46.365 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2636 ms
2025-07-13 23:31:46.732 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 23:31:47.015 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@31925be8
2025-07-13 23:31:47.019 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 23:31:47.089 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:31:47.205 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 17 migrations (execution time 00:00.074s)
2025-07-13 23:31:47.243 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250112.009
2025-07-13 23:31:47.282 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Migrating schema `im_db` to version "20250113.001 - Add avatar url to conversations"
2025-07-13 23:31:49.295 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Successfully applied 1 migration to schema `im_db`, now at version v20250113.001 (execution time 00:01.957s)
2025-07-13 23:31:49.400 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:31:49.481 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 23:31:49.531 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:31:49.921 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:31:52.072 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:31:52.170 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:31:52.222 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 23:31:52.230 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 23:31:52.243 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:33:47.306 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 23:33:47.355 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 15100 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:33:47.356 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:33:47.407 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 23:33:47.407 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 23:33:48.414 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:33:48.415 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:33:48.595 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 173 ms. Found 13 JPA repository interfaces.
2025-07-13 23:33:48.602 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:33:48.602 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:33:48.603 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:33:49.035 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:33:49.036 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:33:49.062 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.063 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.063 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.065 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.065 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.065 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.067 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.067 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.068 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.069 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.070 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.070 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.070 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:33:49.071 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 34 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:33:49.075 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:33:49.076 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:33:49.093 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.093 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.094 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.094 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.094 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.094 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.095 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.096 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.096 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.098 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.098 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.099 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.099 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:33:49.100 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:33:49.111 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:33:49.112 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:33:49.145 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.145 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.147 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.147 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.147 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.147 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.149 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.149 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.149 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.149 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.149 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.151 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.151 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:33:49.151 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 32 ms. Found 0 Redis repository interfaces.
2025-07-13 23:33:49.951 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:33:49.953 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:33:49.957 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:33:49.964 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:33:49.967 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:33:49.967 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:33:50.021 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:33:50.022 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2613 ms
2025-07-13 23:33:50.244 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 23:33:50.365 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@59b9ae6c
2025-07-13 23:33:50.367 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 23:33:50.447 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:33:50.517 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 18 migrations (execution time 00:00.041s)
2025-07-13 23:33:50.540 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.001
2025-07-13 23:33:50.559 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Migrating schema `im_db` to version "20250113.002 - Add conversation and message fields to file uploads"
2025-07-13 23:33:51.023 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Successfully applied 1 migration to schema `im_db`, now at version v20250113.002 (execution time 00:00.426s)
2025-07-13 23:33:51.095 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:33:51.128 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 23:33:51.149 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:33:51.328 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:33:52.518 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:33:52.594 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:33:52.645 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 23:33:52.654 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 23:33:52.672 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:35:45.668 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 23:35:45.708 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 27172 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:35:45.709 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:35:45.751 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 23:35:45.751 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 23:35:46.517 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:35:46.517 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:35:46.688 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 164 ms. Found 13 JPA repository interfaces.
2025-07-13 23:35:46.697 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:35:46.697 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:35:46.698 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:35:47.139 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:35:47.139 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:35:47.165 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.165 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.167 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.168 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.169 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.169 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.170 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.171 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.172 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.172 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.173 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.173 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.174 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:35:47.174 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 34 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:35:47.178 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:35:47.178 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:35:47.197 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.198 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.198 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.199 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.200 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.200 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.200 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.201 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.201 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.202 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.203 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.203 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.203 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:35:47.204 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:35:47.213 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:35:47.214 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:35:47.242 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.243 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.244 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.244 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.245 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.245 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.245 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.246 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.246 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.246 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.246 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.248 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.248 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:35:47.248 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 0 Redis repository interfaces.
2025-07-13 23:35:48.401 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:35:48.405 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:35:48.409 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:35:48.419 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:35:48.422 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:35:48.422 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:35:48.486 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:35:48.488 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2736 ms
2025-07-13 23:35:48.724 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 23:35:48.836 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@64bb1867
2025-07-13 23:35:48.836 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 23:35:48.905 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:35:48.986 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.055s)
2025-07-13 23:35:49.009 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.002
2025-07-13 23:35:49.032 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Migrating schema `im_db` to version "20250113.003 - Update messages table structure"
2025-07-13 23:35:50.381 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Successfully applied 1 migration to schema `im_db`, now at version v20250113.003 (execution time 00:01.288s)
2025-07-13 23:35:50.453 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:35:50.488 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 23:35:50.514 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:35:50.697 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:35:51.562 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:35:51.604 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:35:52.596 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 23:35:53.361 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 23:35:53.587 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 23:35:53.588 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 23:35:53.872 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 23:35:53.879 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 23:35:53.926 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 23:35:53.927 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 23:35:54.151 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:35:54.166 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:35:54.168 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 23:35:54.175 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 23:35:54.179 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:35:54.252 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:38:20.016 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 23:38:20.049 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 19940 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:38:20.050 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:38:20.085 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 23:38:20.086 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 23:38:20.814 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:38:20.815 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:38:20.961 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 140 ms. Found 13 JPA repository interfaces.
2025-07-13 23:38:20.967 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:38:20.968 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:38:20.969 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:38:21.308 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:38:21.308 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:38:21.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.329 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.329 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.330 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.331 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.331 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.332 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.332 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.333 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.333 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.334 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.334 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.334 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:38:21.334 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:38:21.337 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:38:21.338 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:38:21.351 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.351 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.352 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.353 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.353 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.353 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.354 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.354 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.354 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.355 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.355 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.355 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.355 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:38:21.356 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:38:21.364 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:38:21.365 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:38:21.386 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.386 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.387 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.387 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.387 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.388 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.389 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.389 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.389 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.390 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.391 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.391 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.392 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:38:21.392 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 0 Redis repository interfaces.
2025-07-13 23:38:22.625 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:38:22.628 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:38:22.632 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:38:22.643 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:38:22.645 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:38:22.646 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:38:22.714 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:38:22.716 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2629 ms
2025-07-13 23:38:23.010 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 23:38:23.171 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@fa28240
2025-07-13 23:38:23.173 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 23:38:23.264 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:38:23.382 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.079s)
2025-07-13 23:38:23.428 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:38:23.436 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:38:23.587 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:38:23.649 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 23:38:23.687 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:38:24.000 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:38:25.034 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:38:25.078 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:38:25.851 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 23:38:26.511 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 23:38:26.696 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 23:38:26.697 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 23:38:26.961 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 23:38:26.972 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 23:38:27.017 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 23:38:27.017 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 23:38:27.265 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:38:27.278 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:38:27.281 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 23:38:27.291 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 23:38:27.297 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:38:27.367 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:39:38.200 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 23:39:38.266 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 25848 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:39:38.268 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:39:38.321 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 23:39:38.321 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 23:39:39.351 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:39:39.351 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:39:39.492 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 132 ms. Found 13 JPA repository interfaces.
2025-07-13 23:39:39.497 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:39:39.512 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:39:39.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:39:39.820 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:39:39.821 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:39:39.840 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.840 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.841 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.842 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.843 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.843 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.844 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.844 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.845 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.845 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.845 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.845 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.846 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:39:39.846 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:39:39.848 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:39:39.849 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:39:39.862 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.863 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.863 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.863 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.864 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.864 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.864 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.864 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.865 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.865 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.865 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.865 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.865 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:39:39.865 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:39:39.874 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:39:39.875 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:39:39.892 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.892 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.892 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.892 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.893 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.893 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.893 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.894 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.894 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.894 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.895 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.895 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.895 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:39:39.895 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Redis repository interfaces.
2025-07-13 23:39:40.598 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:39:40.601 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:39:40.604 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:39:40.613 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:39:40.614 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:39:40.616 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:39:40.672 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:39:40.674 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2351 ms
2025-07-13 23:39:40.894 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 23:39:41.004 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@73c7024d
2025-07-13 23:39:41.005 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 23:39:41.062 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:39:41.128 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.042s)
2025-07-13 23:39:41.151 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:39:41.155 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:39:41.227 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:39:41.267 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 23:39:41.288 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:39:41.474 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:39:42.612 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:39:42.653 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:39:43.614 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 23:39:44.318 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 23:39:44.522 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 23:39:44.522 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 23:39:44.743 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 23:39:44.747 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 23:39:44.775 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 23:39:44.776 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 23:39:44.927 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:39:44.937 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:39:44.939 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 23:39:44.946 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 23:39:44.948 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:39:45.006 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:41:21.137 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 23:41:21.186 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 29720 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:41:21.187 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:41:21.237 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 23:41:21.237 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 23:41:22.266 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:41:22.267 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:41:22.473 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 198 ms. Found 13 JPA repository interfaces.
2025-07-13 23:41:22.482 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:41:22.483 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:41:22.485 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:41:22.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:41:22.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:41:23.004 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.006 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.007 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.008 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.009 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.009 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.010 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.010 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.011 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.012 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.012 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.012 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.012 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:23.013 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 34 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:41:23.017 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:41:23.018 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:41:23.035 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.037 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.037 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.038 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.038 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.039 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.039 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.039 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.040 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.040 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.040 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:23.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:41:23.050 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:41:23.052 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:41:23.074 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.075 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.075 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.076 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.077 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.077 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.078 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.079 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.079 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.080 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.080 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.081 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.081 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:23.081 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2025-07-13 23:41:23.883 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:41:23.886 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:41:23.890 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:41:23.897 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:41:23.899 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:41:23.900 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:41:23.952 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:41:23.953 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2714 ms
2025-07-13 23:41:24.199 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 23:41:24.310 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@64bb1867
2025-07-13 23:41:24.313 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 23:41:24.351 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:41:24.416 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.040s)
2025-07-13 23:41:24.435 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:41:24.438 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:41:24.510 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:41:24.545 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 23:41:24.567 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:41:24.746 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:41:25.640 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:41:25.676 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:41:26.398 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 23:41:26.870 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 23:41:27.042 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 23:41:27.042 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 23:41:27.309 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 23:41:27.317 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 23:41:27.367 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 23:41:27.367 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 23:41:27.732 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 23:41:27.732 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 23:41:27.775 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 23:41:27.785 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 23:41:27.793 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 23:41:27.802 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 23:41:27.902 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 23:41:27.908 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 23:41:27.958 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - 初始化Elasticsearch客户端配置，连接地址: http://localhost:9200
2025-07-13 23:41:27.964 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch客户端已配置基本连接
2025-07-13 23:41:27.964 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch客户端配置初始化成功
2025-07-13 23:41:28.394 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 23:41:28.625 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 23:41:29.082 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 23:41:29.879 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 23:41:29.954 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 23:41:29.969 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 23:41:29.972 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 23:41:29.973 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@524a5c9b]]
2025-07-13 23:41:29.973 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 23:41:29.998 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 9.39 seconds (process running for 9.968)
2025-07-13 23:41:30.067 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 23:41:30.099 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 23:41:30.115 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 23:41:30.134 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 23:41:30.151 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 23:41:30.167 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 23:41:30.194 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 23:41:30.234 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 23:41:31.161 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 23:41:31.161 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 23:41:31.164 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-07-13 23:41:51.053 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-07-13 23:41:51.057 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 23:41:51.057 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@524a5c9b]]
2025-07-13 23:41:51.058 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 23:41:51.058 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 23:41:51.382 [Thread-5] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:41:51.388 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:41:51.390 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 23:41:51.394 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 23:41:51.496 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 29720 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:41:51.496 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:41:51.700 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:41:51.700 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:41:51.750 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 50 ms. Found 13 JPA repository interfaces.
2025-07-13 23:41:51.751 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:41:51.751 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:41:51.751 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:41:51.840 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:41:51.840 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:41:51.851 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.852 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.852 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.853 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.853 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.854 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.854 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.854 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.854 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.854 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.855 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.855 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.855 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:41:51.855 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:41:51.856 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:41:51.857 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:41:51.868 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.868 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.868 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.868 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.868 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.868 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.868 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.869 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.869 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.869 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.869 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.869 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:41:51.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:41:51.873 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:41:51.873 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:41:51.886 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.886 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.886 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.886 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.886 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.886 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.888 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.888 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.888 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.888 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.888 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.889 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.889 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:41:51.889 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-07-13 23:41:52.005 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:41:52.006 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:41:52.006 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:41:52.007 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:41:52.008 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:41:52.008 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:41:52.031 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:41:52.031 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 534 ms
2025-07-13 23:41:52.106 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-07-13 23:41:52.114 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4f432699
2025-07-13 23:41:52.114 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-07-13 23:41:52.121 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:41:52.146 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.015s)
2025-07-13 23:41:52.162 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:41:52.164 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:41:52.196 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:41:52.198 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:41:52.206 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:41:52.339 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:41:52.351 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:41:52.631 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 23:41:52.632 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 23:41:52.633 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 23:41:52.706 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 23:41:52.708 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 23:41:52.740 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 23:41:52.741 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 23:41:53.031 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 23:41:53.031 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 23:41:53.041 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 23:41:53.050 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 23:41:53.085 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 23:41:53.093 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 23:41:53.189 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 23:41:53.198 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 23:41:53.225 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - 初始化Elasticsearch客户端配置，连接地址: http://localhost:9200
2025-07-13 23:41:53.226 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch客户端已配置基本连接
2025-07-13 23:41:53.226 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch客户端配置初始化成功
2025-07-13 23:41:53.339 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 23:41:53.398 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 23:41:53.555 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 23:41:53.974 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 23:41:53.994 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 23:41:53.998 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 23:41:53.999 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 23:41:54.000 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@202b0921]]
2025-07-13 23:41:54.000 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 23:41:54.014 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 2.542 seconds (process running for 33.985)
2025-07-13 23:41:54.016 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 23:41:54.049 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 23:41:54.072 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 23:41:54.094 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 23:41:54.118 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 23:41:54.136 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 23:41:54.152 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 23:41:54.199 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 23:41:54.203 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-07-13 23:42:18.895 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 23:42:18.896 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@202b0921]]
2025-07-13 23:42:18.896 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 23:42:19.323 [SpringApplicationShutdownHook] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:42:19.329 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:42:19.331 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-07-13 23:42:19.336 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-07-13 23:42:44.523 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-07-13 23:42:44.566 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10000 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:42:44.568 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:42:44.611 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 23:42:44.612 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 23:42:45.422 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:42:45.422 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:42:45.647 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 217 ms. Found 13 JPA repository interfaces.
2025-07-13 23:42:45.658 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:42:45.659 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:42:45.660 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:42:46.192 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:42:46.193 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:42:46.224 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.224 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.225 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.228 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.228 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.230 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.230 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.230 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.231 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.232 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.233 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.233 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.233 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:42:46.234 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 40 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:42:46.239 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:42:46.239 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:42:46.258 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.259 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.259 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.259 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.260 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.260 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.260 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.261 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.261 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.262 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.263 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.263 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.263 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:42:46.263 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:42:46.273 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:42:46.275 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:42:46.300 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.301 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.302 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.302 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.302 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.303 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.304 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.304 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.304 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.305 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.306 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.306 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.306 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:42:46.307 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 0 Redis repository interfaces.
2025-07-13 23:42:47.457 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:42:47.460 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:42:47.465 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:42:47.477 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:42:47.480 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:42:47.481 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:42:47.561 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:42:47.563 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2949 ms
2025-07-13 23:42:47.902 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 23:42:48.056 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5f0e2de6
2025-07-13 23:42:48.059 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 23:42:48.121 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:42:48.208 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.055s)
2025-07-13 23:42:48.238 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:42:48.244 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:42:48.352 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:42:48.397 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-07-13 23:42:48.434 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:42:48.708 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:42:49.835 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:42:49.869 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:42:50.545 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 23:42:50.962 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 初始化MinIO客户端，端点: http://localhost:9000, 访问密钥: minioadmin
2025-07-13 23:42:51.081 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO客户端初始化成功
2025-07-13 23:42:51.082 [restartedMain] INFO  c.i.i.user.config.MinioConfig - 开始检查并创建MinIO存储桶...
2025-07-13 23:42:51.227 [restartedMain] INFO  c.i.i.user.config.MinioConfig - MinIO存储桶初始化完成 - 公开存储桶: 6个, 私有存储桶: 6个
2025-07-13 23:42:51.231 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 初始化MinIO服务，开始创建存储桶...
2025-07-13 23:42:51.255 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - 所有存储桶初始化成功
2025-07-13 23:42:51.255 [restartedMain] INFO  c.i.i.u.s.impl.MinioServiceImpl - MinIO服务初始化完成
2025-07-13 23:42:51.669 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 开始初始化公共桶生命周期规则，默认过期天数: 7
2025-07-13 23:42:51.669 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-files 设置临时文件生命周期规则，过期天数: 7
2025-07-13 23:42:51.712 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-images 设置临时文件生命周期规则，过期天数: 7
2025-07-13 23:42:51.725 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-videos 设置临时文件生命周期规则，过期天数: 7
2025-07-13 23:42:51.737 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 为桶 im-public-documents 设置临时文件生命周期规则，过期天数: 7
2025-07-13 23:42:51.750 [restartedMain] INFO  c.i.i.u.s.i.MinioLifecycleServiceImpl - 公共桶生命周期规则初始化完成，成功设置: 0 个桶
2025-07-13 23:42:51.887 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 数据一致性检查线程池已初始化: coreSize=2, maxSize=5, queueCapacity=100
2025-07-13 23:42:51.897 [restartedMain] INFO  c.i.i.common.config.AsyncConfig - 通用异步任务线程池已初始化: coreSize=5, maxSize=10, queueCapacity=200
2025-07-13 23:42:51.983 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - 初始化Elasticsearch客户端配置，连接地址: http://localhost:9200
2025-07-13 23:42:51.989 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch客户端已配置基本连接
2025-07-13 23:42:51.990 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch客户端配置初始化成功
2025-07-13 23:42:52.417 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-07-13 23:42:52.563 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-07-13 23:42:52.836 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoints beneath base path '/actuator'
2025-07-13 23:42:53.466 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 23:42:53.525 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-13 23:42:53.537 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 23:42:53.540 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-07-13 23:42:53.541 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7f178957]]
2025-07-13 23:42:53.542 [restartedMain] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-07-13 23:42:53.561 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Started ImCommunicationSystemApplication in 9.494 seconds (process running for 9.953)
2025-07-13 23:42:53.603 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 开始配置存储桶访问策略...
2025-07-13 23:42:53.627 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-files
2025-07-13 23:42:53.643 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-images
2025-07-13 23:42:53.660 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-videos
2025-07-13 23:42:53.675 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-audios
2025-07-13 23:42:53.691 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-documents
2025-07-13 23:42:53.709 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 已设置公开存储桶策略: im-public-others
2025-07-13 23:42:53.755 [restartedMain] INFO  c.i.i.user.config.BucketPolicyConfig - 存储桶访问策略配置完成
2025-07-13 23:43:26.544 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 23:43:26.545 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 23:43:26.547 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 23:43:28.742 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 开始处理密码登录请求: jiapei1219@gmail.com
2025-07-13 23:43:29.815 [http-nio-8080-exec-8] INFO  c.i.i.a.service.AccountLockService - 用户 jiapei1219@gmail.com 无登录失败记录需要清除
2025-07-13 23:43:29.816 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 用户密码验证成功: userId=4, email=jiapei1219@gmail.com
2025-07-13 23:43:29.817 [http-nio-8080-exec-8] INFO  c.i.i.a.s.impl.DeviceServiceImpl - 记录登录设备: userId=4, deviceType=Web, ipAddress=null
2025-07-13 23:43:29.823 [http-nio-8080-exec-8] INFO  c.i.i.a.s.impl.DeviceServiceImpl - 更新现有设备记录: deviceId=6
2025-07-13 23:43:29.860 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 用户选择记住登录状态，设置长期token: userId=4
2025-07-13 23:43:29.862 [http-nio-8080-exec-8] INFO  c.i.i.a.service.impl.AuthServiceImpl - 用户登录成功: userId=4, email=jiapei1219@gmail.com, rememberMe=true
2025-07-13 23:43:31.642 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 23:43:31.647 [http-nio-8080-exec-5] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 23:43:31.707 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:43:31.711 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:43:31.712 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:43:31.712 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:43:31.715 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:43:31.715 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:43:31.715 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:43:31.766 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 23:43:31.770 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 23:43:31.823 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 23:43:31.828 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 23:43:31.831 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 23:43:31.832 [http-nio-8080-exec-6] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 23:43:31.838 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 23:43:31.838 [http-nio-8080-exec-6] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 23:43:32.265 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 23:43:32.265 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 23:43:32.265 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 23:43:32.287 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 3
2025-07-13 23:43:32.288 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 23:43:32.288 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 23:43:32.288 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 5
2025-07-13 23:43:32.289 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 23:43:32.292 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=3}
2025-07-13 23:43:32.293 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=3, totalSize=71402, typeStats={image=3}
2025-07-13 23:43:32.305 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 3
2025-07-13 23:43:32.305 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:43:32.306 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:43:32.306 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:43:32.307 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 23:43:32.321 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 3, 当前页数量: 3
2025-07-13 23:43:32.321 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 3
2025-07-13 23:43:32.321 [http-nio-8080-exec-8] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 3 个文件
2025-07-13 23:43:32.553 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 23:43:32.610 [http-nio-8080-exec-9] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 23:43:42.875 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始上传文件到MinIO，用户ID: 4, 文件名: 屏幕截图 2024-08-10 200902.png
2025-07-13 23:43:42.973 [http-nio-8080-exec-1] INFO  c.i.i.u.s.impl.MinioServiceImpl - 文件上传成功: im-private-images/image/2025/07/13/605cf217732d4e5e9cb5c59c4786aee6_1752421422876.png
2025-07-13 23:43:43.187 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件上传成功，文件ID: 34, MinIO路径: im-private-images/image/2025/07/13/605cf217732d4e5e9cb5c59c4786aee6_1752421422876.png
2025-07-13 23:43:43.200 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 文件上传成功，用户ID: 4, 文件ID: 34
2025-07-13 23:43:43.229 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 23:43:43.230 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 23:43:43.231 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 23:43:43.237 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 4
2025-07-13 23:43:43.238 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=34, 名称=屏幕截图 2024-08-10 200902.png, 类型=image, 大小=887818
2025-07-13 23:43:43.238 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 23:43:43.239 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 23:43:43.239 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 23:43:43.239 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=4}
2025-07-13 23:43:43.239 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=4, totalSize=959220, typeStats={image=4}
2025-07-13 23:43:43.245 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 6
2025-07-13 23:43:43.259 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 4
2025-07-13 23:43:43.260 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:43:43.260 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:43:43.260 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:43:43.262 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=34, 原始名称=屏幕截图 2024-08-10 200902.png, 是否删除=false, 文件类型=image
2025-07-13 23:43:43.262 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 23:43:43.268 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 4, 当前页数量: 4
2025-07-13 23:43:43.268 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 4
2025-07-13 23:43:43.269 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 4 个文件
2025-07-13 23:43:44.126 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 23:43:44.127 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 23:43:44.129 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 23:43:44.136 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 4
2025-07-13 23:43:44.136 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=34, 名称=屏幕截图 2024-08-10 200902.png, 类型=image, 大小=887818
2025-07-13 23:43:44.137 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 23:43:44.137 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 23:43:44.137 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 23:43:44.138 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=4}
2025-07-13 23:43:44.138 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=4, totalSize=959220, typeStats={image=4}
2025-07-13 23:43:44.139 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 6
2025-07-13 23:43:44.152 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 4
2025-07-13 23:43:44.153 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:43:44.153 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:43:44.154 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:43:44.155 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=34, 原始名称=屏幕截图 2024-08-10 200902.png, 是否删除=false, 文件类型=image
2025-07-13 23:43:44.155 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 23:43:44.162 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 4, 当前页数量: 4
2025-07-13 23:43:44.164 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 4
2025-07-13 23:43:44.164 [http-nio-8080-exec-3] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 4 个文件
2025-07-13 23:43:47.677 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:43:47.680 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:43:47.680 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:43:47.681 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:43:47.682 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:43:47.682 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:43:47.682 [http-nio-8080-exec-4] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:43:53.504 [MessageBroker-4] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 11, active threads = 1, queued tasks = 8, completed tasks = 2]
2025-07-13 23:43:59.186 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:43:59.190 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:43:59.190 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:43:59.191 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:43:59.192 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:43:59.192 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:43:59.192 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:44:01.970 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:44:01.981 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:44:01.985 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:44:01.990 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:44:01.997 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:44:02.000 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:44:02.008 [http-nio-8080-exec-10] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:44:02.102 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:44:02.115 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:44:02.117 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:44:02.122 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:44:02.127 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:44:02.131 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:44:02.138 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:44:04.143 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:44:04.148 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:44:04.148 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:44:04.149 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:44:04.149 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:44:04.149 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:44:04.149 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:44:09.006 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 23:44:09.007 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 23:44:09.007 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 23:44:09.013 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 4
2025-07-13 23:44:09.013 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=34, 名称=屏幕截图 2024-08-10 200902.png, 类型=image, 大小=887818
2025-07-13 23:44:09.014 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 23:44:09.014 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 23:44:09.014 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 23:44:09.015 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=4}
2025-07-13 23:44:09.015 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=4, totalSize=959220, typeStats={image=4}
2025-07-13 23:44:09.019 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 6
2025-07-13 23:44:09.028 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 4
2025-07-13 23:44:09.029 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:44:09.029 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:44:09.029 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:44:09.029 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=34, 原始名称=屏幕截图 2024-08-10 200902.png, 是否删除=false, 文件类型=image
2025-07-13 23:44:09.029 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 23:44:09.036 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 4, 当前页数量: 4
2025-07-13 23:44:09.036 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 4
2025-07-13 23:44:09.036 [http-nio-8080-exec-1] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 4 个文件
2025-07-13 23:44:16.729 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.TagController - 获取用户标签列表请求: userId=4
2025-07-13 23:44:20.107 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:44:20.110 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:44:20.111 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:44:20.111 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:44:20.112 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:44:20.112 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:44:20.112 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:44:24.718 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:44:24.722 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:44:24.722 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:44:24.723 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:44:24.723 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:44:24.724 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:44:24.724 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:44:26.340 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:44:26.345 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:44:26.345 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:44:26.346 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:44:26.346 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:44:26.347 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:44:26.347 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:44:29.593 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:44:29.595 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:44:29.596 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:44:29.596 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:44:29.596 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:44:29.596 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:44:29.597 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:44:30.367 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:44:30.371 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:44:30.372 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:44:30.373 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:44:30.373 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:44:30.373 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:44:30.374 [http-nio-8080-exec-3] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:44:30.402 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 23:44:30.406 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 23:44:30.414 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 23:44:30.418 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 23:44:30.418 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=0
2025-07-13 23:44:30.419 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 23:44:30.424 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 23:44:30.425 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 23:44:31.759 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:44:31.762 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:44:31.763 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:44:31.763 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:44:31.763 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:44:31.763 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:44:31.763 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:44:32.043 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:44:32.052 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:44:32.055 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:44:32.060 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:44:32.067 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:44:32.068 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:44:32.074 [http-nio-8080-exec-9] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:44:33.204 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:44:33.207 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:44:33.207 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:44:33.208 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:44:33.209 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:44:33.209 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:44:33.210 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:45:01.784 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:45:01.788 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:45:01.789 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:45:01.791 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:45:01.796 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:45:01.798 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:45:01.799 [http-nio-8080-exec-7] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:45:01.832 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 23:45:01.835 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 23:45:01.852 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 23:45:01.855 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 23:45:01.855 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 23:45:01.855 [http-nio-8080-exec-4] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 23:45:01.861 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 23:45:01.862 [http-nio-8080-exec-4] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 23:45:31.959 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:45:31.962 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:45:31.963 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:45:31.964 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:45:31.964 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:45:31.965 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:45:31.965 [http-nio-8080-exec-8] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:45:31.997 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 23:45:32.001 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 23:45:32.014 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 23:45:32.017 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 23:45:32.017 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 23:45:32.017 [http-nio-8080-exec-5] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 23:45:32.021 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 23:45:32.021 [http-nio-8080-exec-5] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 23:46:01.974 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:46:01.982 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:46:01.982 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:46:01.983 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:46:01.984 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:46:01.985 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:46:01.985 [http-nio-8080-exec-1] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:46:02.033 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 23:46:02.038 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 23:46:02.053 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 23:46:02.058 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 23:46:02.058 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 23:46:02.059 [http-nio-8080-exec-2] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 23:46:02.064 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 23:46:02.065 [http-nio-8080-exec-2] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 23:46:07.946 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 23:46:07.950 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 23:46:07.950 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:46:07.953 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:46:07.954 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:46:07.955 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:46:07.956 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:46:07.956 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:46:07.957 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:46:07.965 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 23:46:07.968 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 23:46:07.969 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 23:46:07.970 [http-nio-8080-exec-3] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 23:46:07.973 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 23:46:07.974 [http-nio-8080-exec-3] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 23:46:10.352 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取当前用户信息
2025-07-13 23:46:10.353 [http-nio-8080-exec-9] INFO  c.i.i.a.service.impl.AuthServiceImpl - 获取用户信息: userId=4
2025-07-13 23:46:10.389 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - 获取用户资料，用户ID: 4
2025-07-13 23:46:10.392 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 调试信息 - 用户ID: 4 ===
2025-07-13 23:46:10.392 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 数据库中的statusJson: {"text": "外出中", "emoji": "🚗", "updatedAt": "2025-07-12T02:09:19.652604600"} ===
2025-07-13 23:46:10.393 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 解析后的statusMap: {text=外出中, emoji=🚗, updatedAt=2025-07-12T02:09:19.652604600} ===
2025-07-13 23:46:10.393 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === statusMap的键: [text, emoji, updatedAt] ===
2025-07-13 23:46:10.394 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态文本: 外出中 ===
2025-07-13 23:46:10.394 [http-nio-8080-exec-5] INFO  c.i.i.u.s.i.UserProfileServiceImpl - === 状态表情: 🚗 ===
2025-07-13 23:46:10.418 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 获取联系人列表请求: userId=4, includeBlocked=false
2025-07-13 23:46:10.422 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 获取用户联系人列表: userId=4, includeBlocked=false
2025-07-13 23:46:10.438 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 处理联系人关系: userId=4, friendId=2, alias=测试001
2025-07-13 23:46:10.441 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 找到好友用户: friendId=2, email=3280164803@qq.com, nickname=test002
2025-07-13 23:46:10.442 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 构建ContactResponse: userId=4, friendId=2, nickname=test002, alias=测试001, tagCount=1
2025-07-13 23:46:10.442 [http-nio-8080-exec-1] INFO  c.i.i.r.s.impl.ContactServiceImpl - 成功获取联系人列表: userId=4, 联系人数量=1
2025-07-13 23:46:10.446 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人列表数据: contacts.size()=1
2025-07-13 23:46:10.446 [http-nio-8080-exec-1] INFO  c.i.i.r.controller.ContactController - 返回联系人数据: userId=4, friendId=2, nickname=test002, alias=测试001
2025-07-13 23:46:10.922 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 获取文件列表请求 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 23:46:10.922 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始获取用户文件统计信息, userId: 4
2025-07-13 23:46:10.922 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 开始查询用户文件 - 用户ID: 4, 文件类型: null, 页码: 0, 大小: 20
2025-07-13 23:46:10.926 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询到用户文件数量: 4
2025-07-13 23:46:10.926 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=34, 名称=屏幕截图 2024-08-10 200902.png, 类型=image, 大小=887818
2025-07-13 23:46:10.926 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=33, 名称=202302091675904138327528.jpg, 类型=image, 大小=39239
2025-07-13 23:46:10.926 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=32, 名称=202302091675904140211711.jpg, 类型=image, 大小=23656
2025-07-13 23:46:10.927 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件详情: ID=31, 名称=202302091675904140726704.jpg, 类型=image, 大小=8507
2025-07-13 23:46:10.927 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件类型统计结果: {image=4}
2025-07-13 23:46:10.927 [http-nio-8080-exec-6] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 最终统计结果: totalFiles=4, totalSize=959220, typeStats={image=4}
2025-07-13 23:46:10.928 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库中总文件记录数: 6
2025-07-13 23:46:10.937 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 用户 4 的所有文件记录数（包括已删除）: 4
2025-07-13 23:46:10.938 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=31, 原始名称=202302091675904140726704.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:46:10.938 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=32, 原始名称=202302091675904140211711.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:46:10.938 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=33, 原始名称=202302091675904138327528.jpg, 是否删除=false, 文件类型=image
2025-07-13 23:46:10.938 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 文件记录: ID=34, 原始名称=屏幕截图 2024-08-10 200902.png, 是否删除=false, 文件类型=image
2025-07-13 23:46:10.938 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 查询所有文件类型
2025-07-13 23:46:10.942 [http-nio-8080-exec-2] INFO  c.i.i.u.s.i.MinioFileUploadServiceImpl - 数据库查询结果 - 总数: 4, 当前页数量: 4
2025-07-13 23:46:10.943 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 查询到文件数量: 4
2025-07-13 23:46:10.943 [http-nio-8080-exec-2] INFO  c.i.i.u.c.FileUploadController - 用户 4 找到 4 个文件
2025-07-13 23:46:11.353 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 获取好友请求统计信息: userId=4
2025-07-13 23:46:11.366 [http-nio-8080-exec-3] INFO  c.i.i.r.s.i.ContactRequestServiceImpl - 统计信息获取完成: receivedPending=0, sentPending=0, acceptedReceived=1, acceptedSent=7
2025-07-13 23:55:13.713 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-07-13 23:55:13.776 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-07-13 23:55:13.777 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7f178957]]
2025-07-13 23:55:13.777 [Thread-5] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-07-13 23:55:13.784 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-13 23:55:14.873 [Thread-5] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:55:14.903 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:55:14.932 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-13 23:55:14.969 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-13 23:55:15.646 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10000 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:55:15.647 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:55:16.447 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:16.447 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:55:16.619 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 170 ms. Found 13 JPA repository interfaces.
2025-07-13 23:55:16.620 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:16.621 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:16.621 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:55:17.082 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:17.085 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:17.169 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.173 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.177 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.180 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.184 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.189 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.191 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.196 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.199 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.205 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.211 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.212 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.215 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:17.218 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 130 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:55:17.226 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:17.228 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:17.318 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.329 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.333 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.335 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.339 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.343 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.346 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.353 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.356 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.359 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.374 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.378 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.388 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:17.398 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 165 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:55:17.445 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:17.451 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:55:17.627 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.645 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.654 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.664 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.673 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.676 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.679 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.682 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.685 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.687 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.690 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.694 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:17.698 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 240 ms. Found 0 Redis repository interfaces.
2025-07-13 23:55:18.310 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:55:18.311 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:55:18.313 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:55:18.314 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:55:18.315 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:55:18.315 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:55:18.408 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:55:18.409 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2754 ms
2025-07-13 23:55:18.652 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-07-13 23:55:18.672 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@8822bcf
2025-07-13 23:55:18.672 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-07-13 23:55:18.749 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:55:18.827 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.051s)
2025-07-13 23:55:18.856 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:55:18.859 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:55:18.953 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:55:18.959 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:55:18.978 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:55:19.395 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:55:19.425 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:55:20.212 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:55:20.217 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:55:20.218 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-07-13 23:55:20.222 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-07-13 23:55:20.223 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:55:20.323 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:55:21.970 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10000 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:55:21.970 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:55:22.587 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:22.587 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:55:22.735 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 147 ms. Found 13 JPA repository interfaces.
2025-07-13 23:55:22.737 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:22.737 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:22.739 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:55:23.037 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:23.037 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:23.083 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.084 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.085 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.085 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.086 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.087 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.087 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.087 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.088 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.089 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.090 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.090 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.091 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:23.091 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:55:23.095 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:23.095 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:23.136 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.136 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.137 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.137 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.137 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.137 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.139 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.139 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.140 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.140 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.140 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.142 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:23.143 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 46 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:55:23.148 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:23.148 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:55:23.185 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.186 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.186 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.187 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.187 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.187 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.187 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.188 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.188 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.188 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.189 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.189 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.189 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:23.189 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 41 ms. Found 0 Redis repository interfaces.
2025-07-13 23:55:23.568 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:55:23.571 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:55:23.573 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:55:23.573 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:55:23.574 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:55:23.575 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:55:23.646 [restartedMain] INFO  o.a.c.c.C.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:55:23.646 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1673 ms
2025-07-13 23:55:23.979 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2025-07-13 23:55:23.989 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection com.mysql.cj.jdbc.ConnectionImpl@54aa2f1d
2025-07-13 23:55:23.989 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2025-07-13 23:55:24.001 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:55:24.041 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.027s)
2025-07-13 23:55:24.059 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:55:24.062 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:55:24.161 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:55:24.165 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:55:24.180 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:55:24.581 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:55:24.603 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:55:25.251 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:55:25.259 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:55:25.260 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown initiated...
2025-07-13 23:55:25.263 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown completed.
2025-07-13 23:55:25.265 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:55:25.394 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:55:34.581 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10000 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:55:34.582 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:55:35.138 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:35.139 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:55:35.282 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 142 ms. Found 13 JPA repository interfaces.
2025-07-13 23:55:35.282 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:35.282 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:35.283 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:55:35.543 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:35.544 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:35.585 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.593 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.595 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.596 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.597 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.598 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.599 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.599 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.600 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:35.600 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 55 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:55:35.603 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:35.604 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:35.644 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.645 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.645 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.645 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.646 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.646 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.646 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.646 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.648 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.648 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.649 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.650 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.650 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:35.651 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 46 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:55:35.656 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:35.657 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:55:35.698 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.698 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.700 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.700 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.700 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.701 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.701 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:35.701 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45 ms. Found 0 Redis repository interfaces.
2025-07-13 23:55:36.058 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:55:36.059 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:55:36.061 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:55:36.061 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:55:36.063 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:55:36.063 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:55:36.138 [restartedMain] INFO  o.a.c.c.C.[Tomcat-2].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:55:36.138 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1554 ms
2025-07-13 23:55:36.503 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Starting...
2025-07-13 23:55:36.514 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-4 - Added connection com.mysql.cj.jdbc.ConnectionImpl@64db1f9e
2025-07-13 23:55:36.515 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Start completed.
2025-07-13 23:55:36.528 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:55:36.577 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.033s)
2025-07-13 23:55:36.596 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:55:36.597 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:55:36.693 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:55:36.708 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:55:36.721 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:55:37.106 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:55:37.126 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:55:37.865 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:55:37.897 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:55:37.898 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Shutdown initiated...
2025-07-13 23:55:37.905 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Shutdown completed.
2025-07-13 23:55:37.908 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:55:38.037 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:55:39.715 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10000 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:55:39.716 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:55:40.292 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:40.293 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:55:40.440 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 147 ms. Found 13 JPA repository interfaces.
2025-07-13 23:55:40.442 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:40.443 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:40.444 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 1 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:55:40.940 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:40.940 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:40.987 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.987 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.987 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.988 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.988 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.988 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.989 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.989 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.989 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.990 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.990 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:40.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 50 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:55:40.994 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:40.995 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:41.052 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.052 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.053 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.053 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.053 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.054 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.054 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.055 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.056 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.057 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.057 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.058 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.058 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:41.060 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 64 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:55:41.068 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:41.069 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:55:41.121 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.121 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.121 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.121 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.123 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.123 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.123 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.124 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.124 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.124 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.124 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.124 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.124 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:41.125 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 54 ms. Found 0 Redis repository interfaces.
2025-07-13 23:55:41.468 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:55:41.469 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:55:41.471 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:55:41.471 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:55:41.471 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:55:41.471 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:55:41.540 [restartedMain] INFO  o.a.c.c.C.[Tomcat-3].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:55:41.541 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1823 ms
2025-07-13 23:55:41.786 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-5 - Starting...
2025-07-13 23:55:41.813 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-5 - Added connection com.mysql.cj.jdbc.ConnectionImpl@47aee784
2025-07-13 23:55:41.813 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-5 - Start completed.
2025-07-13 23:55:41.831 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:55:41.870 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.026s)
2025-07-13 23:55:41.891 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:55:41.892 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:55:41.994 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:55:41.998 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:55:42.016 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:55:42.339 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:55:42.358 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:55:43.171 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:55:43.177 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:55:43.178 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-5 - Shutdown initiated...
2025-07-13 23:55:43.183 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-5 - Shutdown completed.
2025-07-13 23:55:43.184 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:55:43.305 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:55:56.806 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10000 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:55:56.806 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:55:57.509 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:57.510 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:55:57.655 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 144 ms. Found 13 JPA repository interfaces.
2025-07-13 23:55:57.656 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:57.656 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:57.657 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:55:57.943 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:57.943 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:57.987 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.988 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.989 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.989 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.990 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.993 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.994 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.994 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.995 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.995 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.996 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:55:57.997 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:55:57.999 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:58.000 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:55:58.042 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.042 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.044 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.045 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.046 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.046 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.048 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.049 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.049 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.050 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.051 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.052 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.054 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:55:58.056 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 55 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:55:58.067 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:55:58.067 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:55:58.117 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.117 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.119 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.121 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.121 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.123 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.125 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.126 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.126 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.127 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.128 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.131 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.132 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:55:58.132 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 64 ms. Found 0 Redis repository interfaces.
2025-07-13 23:55:58.556 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:55:58.556 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:55:58.557 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:55:58.558 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:55:58.559 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:55:58.559 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:55:58.641 [restartedMain] INFO  o.a.c.c.C.[Tomcat-4].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:55:58.641 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1833 ms
2025-07-13 23:55:58.883 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-6 - Starting...
2025-07-13 23:55:58.894 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-6 - Added connection com.mysql.cj.jdbc.ConnectionImpl@b7e3ce3
2025-07-13 23:55:58.895 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-6 - Start completed.
2025-07-13 23:55:58.910 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:55:58.981 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.055s)
2025-07-13 23:55:59.075 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:55:59.086 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:55:59.325 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:55:59.334 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:55:59.352 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:55:59.704 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:55:59.728 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:56:00.401 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:56:00.425 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:56:00.425 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-6 - Shutdown initiated...
2025-07-13 23:56:00.428 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-6 - Shutdown completed.
2025-07-13 23:56:00.430 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:56:00.590 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:56:02.212 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10000 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:56:02.212 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:56:02.782 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:02.782 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:56:02.916 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 134 ms. Found 13 JPA repository interfaces.
2025-07-13 23:56:02.917 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:02.917 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:56:02.920 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 1 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:56:03.196 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:03.196 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:56:03.233 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.235 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.235 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.236 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.237 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.238 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.238 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.239 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.240 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.240 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.241 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.241 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.242 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:03.242 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:56:03.245 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:03.245 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:56:03.286 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.287 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.287 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.287 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.287 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.288 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.288 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.289 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.289 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.289 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.290 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.290 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.291 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:03.291 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:56:03.298 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:03.299 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:56:03.340 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.341 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.341 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.342 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.342 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.342 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.343 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.343 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.343 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.343 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.344 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.344 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.344 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:03.345 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 0 Redis repository interfaces.
2025-07-13 23:56:03.817 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:56:03.817 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:56:03.818 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:56:03.819 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:56:03.819 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:56:03.821 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:56:03.892 [restartedMain] INFO  o.a.c.c.C.[Tomcat-5].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:56:03.892 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1677 ms
2025-07-13 23:56:04.116 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-7 - Starting...
2025-07-13 23:56:04.132 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-7 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3ca7d98b
2025-07-13 23:56:04.132 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-7 - Start completed.
2025-07-13 23:56:04.147 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:56:04.184 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.026s)
2025-07-13 23:56:04.205 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:56:04.206 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:56:04.309 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:56:04.326 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:56:04.344 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:56:04.637 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:56:04.658 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:56:05.128 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:56:05.135 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:56:05.135 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-7 - Shutdown initiated...
2025-07-13 23:56:05.140 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-7 - Shutdown completed.
2025-07-13 23:56:05.140 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:56:05.277 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:56:16.694 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10000 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:56:16.694 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:56:17.448 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:17.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:56:17.598 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 148 ms. Found 13 JPA repository interfaces.
2025-07-13 23:56:17.599 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:17.599 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:56:17.600 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:56:17.860 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:17.860 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:56:17.907 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.910 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.912 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.915 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.917 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.918 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.920 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.921 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.923 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.924 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.924 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.925 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.925 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:17.926 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 64 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:56:17.930 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:17.930 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:56:17.975 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.976 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.977 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.977 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.977 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.980 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.980 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.981 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.981 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.982 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.983 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:17.984 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:56:17.990 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:17.990 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:56:18.034 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.035 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.035 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.035 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.036 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.036 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.037 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.037 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.038 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.038 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.039 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.039 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.040 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:18.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 50 ms. Found 0 Redis repository interfaces.
2025-07-13 23:56:18.949 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:56:18.951 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:56:18.954 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:56:18.956 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:56:18.958 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:56:18.959 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:56:19.086 [restartedMain] INFO  o.a.c.c.C.[Tomcat-6].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:56:19.087 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2390 ms
2025-07-13 23:56:19.325 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-8 - Starting...
2025-07-13 23:56:19.339 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-8 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6595111d
2025-07-13 23:56:19.339 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-8 - Start completed.
2025-07-13 23:56:19.350 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:56:19.392 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.028s)
2025-07-13 23:56:19.418 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:56:19.422 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:56:19.525 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:56:19.533 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:56:19.544 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:56:19.973 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:56:19.987 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:56:20.463 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:56:20.469 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:56:20.469 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-8 - Shutdown initiated...
2025-07-13 23:56:20.472 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-8 - Shutdown completed.
2025-07-13 23:56:20.473 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:56:20.582 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:56:48.322 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10000 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:56:48.322 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:56:49.025 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:49.026 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:56:49.165 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 139 ms. Found 13 JPA repository interfaces.
2025-07-13 23:56:49.166 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:49.166 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:56:49.168 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:56:49.445 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:49.446 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:56:49.495 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.496 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.496 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.496 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.497 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.498 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.501 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.503 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.504 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.504 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.505 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.505 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.506 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:56:49.506 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 60 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:56:49.510 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:49.512 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:56:49.561 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.562 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.562 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.563 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.563 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.563 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.564 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.565 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.565 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.566 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.566 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.572 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.573 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:56:49.574 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 61 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:56:49.584 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:56:49.586 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:56:49.638 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.640 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.640 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.641 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.643 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.644 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.645 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.645 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.647 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.648 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.648 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.649 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.650 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:56:49.651 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 64 ms. Found 0 Redis repository interfaces.
2025-07-13 23:56:50.226 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:56:50.227 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:56:50.230 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:56:50.232 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:56:50.234 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:56:50.235 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:56:50.318 [restartedMain] INFO  o.a.c.c.C.[Tomcat-7].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:56:50.319 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1995 ms
2025-07-13 23:56:50.597 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-9 - Starting...
2025-07-13 23:56:50.612 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-9 - Added connection com.mysql.cj.jdbc.ConnectionImpl@34ec33af
2025-07-13 23:56:50.612 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-9 - Start completed.
2025-07-13 23:56:50.633 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:56:50.676 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.027s)
2025-07-13 23:56:50.730 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:56:50.746 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:56:50.973 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:56:50.998 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:56:51.020 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:56:51.367 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:56:51.391 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:56:51.909 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:56:51.916 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:56:51.917 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-9 - Shutdown initiated...
2025-07-13 23:56:51.920 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-9 - Shutdown completed.
2025-07-13 23:56:51.921 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:56:52.053 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:57:04.747 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10000 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:57:04.748 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:57:05.726 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:57:05.728 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:57:06.228 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 499 ms. Found 13 JPA repository interfaces.
2025-07-13 23:57:06.243 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:57:06.257 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:57:06.276 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 1 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:57:06.750 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:57:06.751 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:57:06.802 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.803 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.804 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.805 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.806 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.806 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.807 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.808 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.809 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.810 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.812 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.813 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.813 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:06.813 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 62 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:57:06.816 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:57:06.817 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:57:06.876 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.879 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.879 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.879 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.880 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.881 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.881 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.882 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.882 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:06.883 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:57:06.892 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:57:06.892 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:57:06.973 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.974 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.975 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.976 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.976 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.976 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.977 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.977 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:06.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 86 ms. Found 0 Redis repository interfaces.
2025-07-13 23:57:07.370 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:57:07.372 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:57:07.373 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:57:07.375 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:57:07.376 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:57:07.376 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:57:07.536 [restartedMain] INFO  o.a.c.c.C.[Tomcat-8].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:57:07.540 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2789 ms
2025-07-13 23:57:07.774 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-10 - Starting...
2025-07-13 23:57:07.785 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-10 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5bab523d
2025-07-13 23:57:07.785 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-10 - Start completed.
2025-07-13 23:57:07.794 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:57:07.852 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.042s)
2025-07-13 23:57:07.874 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:57:07.876 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:57:07.966 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:57:07.971 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:57:07.982 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:57:08.331 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:57:08.351 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:57:08.828 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:57:08.835 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:57:08.836 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-10 - Shutdown initiated...
2025-07-13 23:57:08.842 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-10 - Shutdown completed.
2025-07-13 23:57:08.843 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:57:08.967 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-13 23:57:44.889 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - Starting ImCommunicationSystemApplication using Java 17.0.2 with PID 10000 (D:\Project\im-communication-system\target\classes started by ASUS in D:\Project\im-communication-system)
2025-07-13 23:57:44.890 [restartedMain] INFO  c.i.i.ImCommunicationSystemApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-13 23:57:46.019 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:57:46.020 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 23:57:46.316 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 295 ms. Found 13 JPA repository interfaces.
2025-07-13 23:57:46.318 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:57:46.318 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:57:46.321 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 1 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:57:46.737 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:57:46.738 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:57:46.775 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.776 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.776 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.780 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.780 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.781 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.781 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.782 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ElasticsearchRepository
2025-07-13 23:57:46.782 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 0 Elasticsearch repository interfaces.
2025-07-13 23:57:46.785 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:57:46.785 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2025-07-13 23:57:46.817 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.818 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.819 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.820 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.822 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.823 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.823 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.824 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.824 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.825 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.825 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.826 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.826 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Reactive Elasticsearch - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Reactive Elasticsearch repository, consider annotating your entities with one of these annotations: org.springframework.data.elasticsearch.annotations.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository
2025-07-13 23:57:46.827 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 41 ms. Found 0 Reactive Elasticsearch repository interfaces.
2025-07-13 23:57:46.834 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-13 23:57:46.834 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-13 23:57:46.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.LoginDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.879 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.880 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.auth.repository.VerificationCodeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.880 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationMemberRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.880 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.ConversationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.881 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.message.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.881 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.881 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactRequestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.882 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagAssignmentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.883 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.relationship.repository.ContactTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.883 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.FileUploadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.884 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserDeviceRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.885 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.im.imcommunicationsystem.user.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-13 23:57:46.885 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 49 ms. Found 0 Redis repository interfaces.
2025-07-13 23:57:47.304 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 23:57:47.306 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.9] using APR version [1.7.6].
2025-07-13 23:57:47.307 [restartedMain] INFO  o.a.c.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.5.0 8 Apr 2025]
2025-07-13 23:57:47.309 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-13 23:57:47.310 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 23:57:47.310 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 23:57:47.374 [restartedMain] INFO  o.a.c.c.C.[Tomcat-9].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 23:57:47.375 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2479 ms
2025-07-13 23:57:47.684 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-11 - Starting...
2025-07-13 23:57:47.763 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-11 - Added connection com.mysql.cj.jdbc.ConnectionImpl@79b58f5d
2025-07-13 23:57:47.763 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-11 - Start completed.
2025-07-13 23:57:47.824 [restartedMain] INFO  org.flywaydb.core.FlywayExecutor - Database: jdbc:mysql://localhost:3307/im_db (MySQL 9.3)
2025-07-13 23:57:47.908 [restartedMain] INFO  o.f.core.internal.command.DbValidate - Successfully validated 19 migrations (execution time 00:00.042s)
2025-07-13 23:57:47.944 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Current version of schema `im_db`: 20250113.003
2025-07-13 23:57:47.947 [restartedMain] INFO  o.f.core.internal.command.DbMigrate - Schema `im_db` is up to date. No migration necessary.
2025-07-13 23:57:48.062 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 23:57:48.068 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 23:57:48.092 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 23:57:48.381 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 23:57:48.424 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:57:48.878 [restartedMain] INFO  c.i.i.c.config.ElasticsearchConfig - Elasticsearch配置清理完成
2025-07-13 23:57:48.886 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 23:57:48.887 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-11 - Shutdown initiated...
2025-07-13 23:57:48.893 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-11 - Shutdown completed.
2025-07-13 23:57:48.895 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-13 23:57:49.104 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
